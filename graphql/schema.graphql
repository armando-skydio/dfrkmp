schema {
  query: Query
  mutation: Mutations
  subscription: Subscription
}

type AccessPoint implements Node {
  accessPointType: access_point_type!
  created: DateTime
  disabled: Boolean!
  displayName: String
  dock: Dock
  dockId: String
  hardwareVersion: String
  id: ID!
  isOnline: Boolean
  linkedDockId: String
  linkedVehicleId: String
  modified: DateTime
  name: String
  notes: String
  organizationId: String
  organizationNotes: String
  releaseOverride: DeviceReleaseOverride
  releaseUuid: String
  skydioSerial: String!
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
}

type AccessPointConnection {
  edges: [AccessPointEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccessPointEdge {
  cursor: String!
  node: AccessPoint
}

type ActionResult implements Node {
  actionKey: String!
  actionUuid: String!
  created: DateTime
  endTime: DateTime
  executionUuid: String!
  id: ID!
  missionExecution: MissionExecution
  modified: DateTime
  organizationId: String!
  parentActionResultUuid: String
  result: actionresulttype!
  startTime: DateTime
  uuid: String!
  waypointName: String
}

type ActionResultConnection {
  edges: [ActionResultEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ActionResultEdge {
  cursor: String!
  node: ActionResult
}

type AddAxonConfig {
  axonConfiguration: AxonConfiguration
  errors: [String]
}

type AddDevicesErrorType {
  deviceId: String
  deviceName: String
  deviceType: String
  errorMessage: String
}

type AddDevicesToResourceGroup {
  docks: [Dock]
  erroredDevices: [AddDevicesErrorType]
  errors: [String]
  vehicles: [Vehicle]
}

type AddSsoCredential {
  errors: [String]
  ssoCredential: SsoCredential
}

type AddVehiclesToOperation {
  errors: [String]
  operation: Operation
}

type AddWifiSetting {
  errors: [String]
  wifiSettingEdge: WifiSettingEdge
}

type AdsbRxAdsbFlags {
  value: Int!
}

type AdsbRxAdsbTraffic {
  utime: Float!
  vehicles: [AdsbRxAdsbVehicle!]!
}

type AdsbRxAdsbVehicle {
  altType: AdsbRxAltitudeTypeEnum!
  altitudeM: Int!
  callsign: String!
  emitterType: AdsbRxEmitterTypeEnum!
  flags: AdsbRxAdsbFlags!
  heading: Float!
  horizontalVelocity: Float!
  icaoAddress: Int!
  position: SensorsGpsCoordIntegers!
  squawkCode: Int!
  tslc: Int!
  utime: Float!
  verticalVelocity: Float!
}

enum AdsbRxAltitudeTypeEnum {
  GEOMETRIC
  PRESSURE_ALTITUDE
}

enum AdsbRxEmitterTypeEnum {
  CLUSTER_OBSTACLE
  EMERGENCY_SURFACE
  GLIDER
  HEAVY
  HIGHLY_MANUV
  HIGH_VORTEX_LARGE
  LARGE
  LIGHT
  LIGHTER_AIR
  LINE_OBSTACLE
  NO_INFO
  PARACHUTE
  POINT_OBSTACLE
  ROTORCRAFT
  SERVICE_SURFACE
  SMALL
  SPACE
  UAV
  ULTRA_LIGHT
  UNASSIGNED
  UNASSIGNED2
  UNASSIGNED3
}

type AlertConfigV2 implements Node {
  alertTargetRules(before: String, after: String, first: Int, last: Int): AlertTargetRuleConnection
  created: DateTime
  id: ID!
  modified: DateTime
  name: String!
  organization: Organization
  organizationId: String!
  targetedDocksCount: Int
  targetedVehiclesCount: Int
  triggerType: trigger_type!
  userEmails: [String]
  users(before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
  webhook: Webhook
  webhookId: String
}

type AlertConfigV2Connection {
  edges: [AlertConfigV2Edge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AlertConfigV2Edge {
  cursor: String!
  node: AlertConfigV2
}

type AlertRecordV2 implements Node {
  alertDetails: JSONString
  alertTime: DateTime!
  alertType: alert_type_v2!
  created: DateTime
  dock: Dock
  dockId: String
  flightDataFile: FlightDataFile
  flightDataFileId: String
  flightId: String
  id: ID!
  missionExecution: MissionExecution
  missionExecutionId: String
  modified: DateTime
  organizationId: String!
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
}

type AlertRecordV2Connection {
  edges: [AlertRecordV2Edge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AlertRecordV2Edge {
  cursor: String!
  node: AlertRecordV2
}

type AlertTargetRule implements Node {
  alertConfig: AlertConfigV2
  alertConfigId: String!
  created: DateTime
  customerFacingIdentifier: String
  id: ID!
  include: Boolean!
  modified: DateTime
  organizationId: String!
  parentName: String
  targetBaseType: target_base_type!
  targetParentId: String!
  targetParentType: target_parent_type!
  uuid: String!
}

type AlertTargetRuleConnection {
  edges: [AlertTargetRuleEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AlertTargetRuleEdge {
  cursor: String!
  node: AlertTargetRule
}

input AlertTargetRuleInput {
  targetBaseType: target_base_type
  targetParentId: String
  targetParentType: target_parent_type
}

type AmbassadorHeightAboveTakeoff {
  height: Float!
}

type AmbassadorMinimalGps {
  altitude: Float!
  fixType: Int!
  gpsUclock: Float!
  groundSpeed: Float!
  horizontalAccuracy: Float!
  latitude: Float!
  longitude: Float!
  numSatellitesUsed: Int!
}

type AmbassadorNavSourceInfo {
  activeNavSource: AmbassadorNavSourceInfoNavSource!
  gpsHealth: AmbassadorNavSourceInfoNavHealth!
  vioHealth: AmbassadorNavSourceInfoNavHealth!
}

enum AmbassadorNavSourceInfoNavHealth {
  AWAITING_HEADING
  DEGRADED
  DISABLED
  HEALTHY
  UNRELIABLE
}

enum AmbassadorNavSourceInfoNavSource {
  ATTITUDE
  GPS
  INVALID
  VIO
}

type Annotation implements Node {
  annotationCategory: AnnotationCategory
  annotationCategoryId: String!
  author: User
  authorId: String
  created: DateTime!
  description: String
  eventTime: DateTime
  flight: Flight
  flightDataFile: FlightDataFile
  flightDataFileId: String
  flightId: String
  flightUtime: Float
  id: ID!
  internalMetadata: JSONString
  mediaGeojson: GeoJSON
  missionExecution: MissionExecution
  missionExecutionUuid: String
  missionTemplate: MissionTemplate
  missionTemplateUuid: String
  modified: DateTime
  operation: Operation
  operationId: String
  organizationId: String
  structure: Structure
  structureId: String
  uuid: String!
  videoUsec: Float
}

type AnnotationCategory implements Node {
  color: String
  created: DateTime
  id: ID!
  isCustomerFacing: Boolean!
  modified: DateTime
  name: String!
  organizationId: String
  type: annotationcategorytype!
  uuid: String!
}

type AnnotationCategoryConnection {
  edges: [AnnotationCategoryEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AnnotationCategoryEdge {
  cursor: String!
  node: AnnotationCategory
}

type AnnotationCategoryMeta {
  colors: [String]
  nextColor: String
}

type AnnotationConnection {
  edges: [AnnotationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AnnotationEdge {
  cursor: String!
  node: Annotation
}

input AnnotationInput {
  annotationCategoryId: String
  description: String
  flightId: String!
  internalMetadata: JSONString
}

type ApiToken implements Node {
  created: DateTime
  enabled: Boolean!
  id: ID!
  modified: DateTime
  name: String
  organizationId: String!
  scope: tokenscope!
  scopes: [CloudApiApiTokenScopesScopesEnum]
  uuid: String!
}

type ApiTokenConnection {
  edges: [ApiTokenEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ApiTokenEdge {
  cursor: String!
  node: ApiToken
}

type ApnSetting implements Node {
  apn: String!
  carrier: String!
  created: DateTime
  id: ID!
  modified: DateTime
  organizationId: String!
  password: String
  username: String
  uuid: String!
}

type ApnSettingConnection {
  edges: [ApnSettingEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ApnSettingEdge {
  cursor: String!
  node: ApnSetting
}

type AssignUserToMission {
  errors: [String]
  missionTemplate: MissionTemplate
  user: User
}

type AssignVehicleLicense {
  errors: [String]
  vehicle: Vehicle
  vehicleLicense: VehicleLicense
}

type AssignVehicleToDock {
  dock: Dock
  errors: [String]
  unlinkedDock: Dock
}

type Attachment implements Node {
  attachmentType: attachmenttype!
  created: DateTime
  customNotes: String
  displayName: String
  id: ID!
  lastSeen: DateTime
  mcuId: String
  modified: DateTime
  mountPoint: mountpoint
  name: String
  nickname: String
  notes: String
  organization: Organization
  organizationId: String
  skydioSerial: String!
  swVersion: String
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
}

type AttachmentConnection {
  edges: [AttachmentEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AttachmentEdge {
  cursor: String!
  node: Attachment
}

type AutomaticFileUploadFileUploadStatus {
  currentlyUploadingFile: String!
  deliverRate: Float!
  error: String!
  filesDelivered: Int!
  filesFailedToUpload: Int!
  filesToUpload: Int!
  filesUploadedButNotDelivered: Int!
  flightsToUpload: [String!]!
  isUploading: Boolean!
  totalSizeDelivered: Float!
  totalSizePartiallyUploaded: Float!
  totalSizeToUpload: Float!
  totalSizeUploadedButNotDelivered: Float!
  uploadRate: Float!
  usecElapsedOverall: Float!
  utime: Float!
}

type AxonConfiguration implements Node {
  agencyId: String!
  clientId: String!
  created: DateTime
  defaultUserEmail: String!
  deleteUploadedFiles: Boolean
  evidenceEnabled: Boolean!
  featureGroupings: FeatureGroupingsResult
  id: ID!
  modified: DateTime
  organizationId: String!
  respondEnabled: Boolean!
  type: ConfigurationType!
  uuid: String!
}

type AxonConfigurationConnection {
  edges: [AxonConfigurationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AxonConfigurationEdge {
  cursor: String!
  node: AxonConfiguration
}

interface Base3DCartesianPosition {
  x: Float!
  y: Float!
  z: Float!
}

interface BaseGPSPosition {
  latitude: Float!
  longitude: Float!
}

type BasicModelPipelineRunStepConnection {
  edges: [BasicModelPipelineRunStepEdge]!
  pageInfo: PageInfo!
}

type BasicModelPipelineRunStepEdge {
  cursor: String!
  node: ModelPipelineRunStep
}

type BasicWaypointAction implements MissionAction {
  mediaCapture: MediaCapture
  name: String!
  transitToWaypointSettings: TransitToWaypointSettings!
  uuid: String!
  waitTime: WaitTime
  waypoint: MissionWaypoint!
}

input BasicWaypointActionInput {
  mediaCapture: MediaCaptureInput
  name: String!
  transitToWaypointSettings: TransitToWaypointSettingsInput!
  waitTime: WaitTimeInput
  waypoint: MissionWaypointInput!
}

type Battery implements Node {
  batteryCells(before: String, after: String, first: Int, last: Int): BatteryCellConnection
  batterySerial: String
  created: DateTime
  cycles: Int
  displayName: String
  flightCount: Int
  id: ID!
  maxCellTemp: Int
  minCellTemp: Int
  modified: DateTime
  name: String
  notes: String
  organizationId: String
  skydioSerial: String
  totalFlightMicroseconds: Float
  uuid: String!
}

type BatteryCell implements Node {
  batteryId: String!
  cellId: Int!
  created: DateTime
  id: ID!
  maxVoltage: Float!
  minVoltage: Float!
  modified: DateTime
  uuid: String!
}

type BatteryCellConnection {
  edges: [BatteryCellEdge]!
  maxVoltage: Float
  minVoltage: Float
  pageInfo: PageInfo!
  totalCount: Int!
}

type BatteryCellEdge {
  cursor: String!
  node: BatteryCell
}

type BatteryConnection {
  edges: [BatteryEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BatteryEdge {
  cursor: String!
  node: Battery
}

type BatteryPrediction {
  batteryCharging: Boolean!
  trueBatteryPercentage: Float!
}

type BatteryStatus {
  charging: Boolean
  percentage: Float
}

type BodyGpsOrigin {
  altitude: Float!
  latLon: EigenLcmVector2d!
  utime: Float!
}

type BodyTrans {
  orientation: EigenLcmQuaterniond!
  position: EigenLcmVector3d!
  utime: Float!
}

type Box {
  xExtentMeters: Float
  yExtentMeters: Float
  zExtentMeters: Float
}

input BoxInput {
  xExtentMeters: Float
  yExtentMeters: Float
  zExtentMeters: Float
}

type BulkUpsertOperations {
  errors: [String]
  operations: [Operation]
  transparencyDashboardSettings: TransparencyDashboardSettings
}

type CacheMissionSpecInfo {
  missionSpec: MissionSpec
}

type ClaimDevices {
  accessPoints: [AccessPoint]
  attachments: [Attachment]
  batteries: [Battery]
  controllers: [Controller]
  docks: [Dock]
  erroredDevices: [String]
  errors: [String]
  gimbals: [Gimbal]
  movedDevices: [String]
  vehicles: [Vehicle]
}

enum CloudApiAnnotationCategoryTypeAnnotationCategoryTypeEnum {
  DEFAULT
  TRANSPARENCY_DASHBOARD
  UNKNOWN
}

enum CloudApiApiTokenScopesScopesEnum {
  READ_ALERTS
  READ_ANNOTATIONS
  READ_BATTERIES
  READ_DOCKS
  READ_FLIGHTS
  READ_FLIGHT_TELEMETRY
  READ_JWT_VALIDATION
  READ_LIVE_STREAM
  READ_LIVE_TELEMETRY
  READ_MARKERS
  READ_MEDIA
  READ_MISSIONS
  READ_MISSION_CONTROLS
  READ_MISSION_SCHEDULE
  READ_REMOTE_VIDEO
  READ_SCANS
  READ_SITES
  READ_STRUCTURES
  READ_USERS
  READ_VEHICLES
  READ_WEBHOOKS
  READ_WEBHOOK_VALIDATION
  READ_WHOAMI
  UNKNOWN
  WRITE_ALERTS
  WRITE_MARKERS
  WRITE_MEDIA
  WRITE_MISSIONS
  WRITE_MISSION_CONTROLS
  WRITE_MISSION_SCHEDULE
  WRITE_REMOTE_VIDEO
  WRITE_WEBHOOKS
}

type CloudApiCloudJobProgressInfo {
  currentStage: Int!
  currentStagePercentageComplete: Int!
  totalStages: Int!
}

enum CloudApiJobRedisStateJobState {
  ERROR
  IN_PROGRESS
  IN_QUEUE
  SUCCESS
  UNKNOWN
}

type CloudApiLivekitCredentialsResponse {
  token: String!
  url: String!
}

type CloudApiSkygatewayDeploymentResponse {
  hostname: String!
  port: Int!
}

enum CloudApiTeleOpState {
  AVAILABLE
  FAILED
  OFFLINE
  READY
  SWITCHING
  WRONG_CONFIG
}

enum CloudApiTransparencyPublicationStatusTransparencyPublicationStatusEnum {
  IN_REVIEW
  PRIVATE
  PUBLIC
  UNKNOWN
}

enum CloudApiVehicleLicenseTypeVehicleLicenseTypeEnum {
  R47_3D_SCAN
  R47_CROSSHAIR
  R47_DYNAMIC
  R47_NIGHT_AUTONOMY
  R47_SCOUT
  R47_TOWER_SCAN
  S2_3D_SCAN
  S2_AEF
  UNKNOWN
  X10D_CORE
  X10D_MAVLINK
  X10D_ONLINE
  X10_ATAK
  X10_REMOTE_FLIGHT_DECK
  X2D_3D_SCAN
  X2D_AEF
  X2D_FED_ATO_SAC_SAE
  X2D_FED_NON_ATO_SAC_SAE
  X2D_INTL_SAC_SAE
  X2E_3D_SCAN
  X2E_AEF
}

enum CloudApiVehicleTypeVehicleTypeEnum {
  C18
  C36
  C93
  DOCK_G27
  DOCK_G47
  E1
  R1
  R3
  R36
  R47
  R47_ISP
  R47_XAVIER
  SIMULATOR
  UNKNOWN
}

type CloudApiWebTunnelConnectionInfoHeadersEntry {
  key: String!
  value: String!
}

type CloudSimulatorCondition {
  description: String
  lastTransitionTime: String
  status: String
  type: String
}

type CloudSimulatorObject {
  spec: CloudSimulatorSpec
  status: CloudSimulatorStatus
}

type CloudSimulatorSpec {
  containerTag: String
  dockId: String
  dockSerial: String
  enableFullFlightLogging: Boolean
  enableG47Dock: Boolean
  expiresIn: String
  organizationId: String
  requesterId: String
  skydioSerial: String
  stop: Boolean
  useCloudNode: Boolean
  vehicleId: String
  vehicleSerial: String
  vehicleType: String
}

type CloudSimulatorStatus {
  conditions: [CloudSimulatorCondition]
  simulatorExpiration: String
  simulatorStart: String
}

enum CommonFlightPhaseEnumEnum {
  ARMED_IN_DOCK
  FLIGHT_PROCESSES_CHECK
  FLYING
  HAND_TAKEOFF_PREP
  LOGGING_START
  PERCH
  POST_FLIGHT
  PREP
  PREP_CLEANUP
  READY_FOR_HAND_TAKEOFF
  REST
  SAFETY_CHECK
  TEGRA_REBOOT_PREP
  UNKNOWN
  WAIT_FOR_ARM
}

type ComplimentaryActionsComplimentaryAction {
  actionArgs: ComplimentaryActionsComplimentaryActionArgs!
  uuid: UuidUtilUuid!
}

type ComplimentaryActionsComplimentaryActionArgs {
  dummyChannelTriggered: ComplimentaryActionsDummyChannelTriggeredActionArgs
  dummyTimerTriggered: ComplimentaryActionsDummyTimerTriggeredActionArgs
  requireCalledAtMostOnce: Boolean!
  sendMissionControl: ComplimentaryActionsSendMissionControlActionArgs
  spawnComplimentaryActionsOnHook: ComplimentaryActionsSpawnComplimentaryActionsOnHookActionArgs
  spoofPhotoResponse: ComplimentaryActionsSpoofPhotoResponseActionArgs
}

type ComplimentaryActionsDummyChannelTriggeredActionArgs {
  numTriggers: Int!
  trigger: ComplimentaryActionsTriggerArgsChannelCallback!
}

type ComplimentaryActionsDummyTimerTriggeredActionArgs {
  numTriggers: Int!
  trigger: ComplimentaryActionsTriggerArgsTimerCallback!
}

type ComplimentaryActionsMissionControlCopyForComplimentaryActions {
  actionUuid: String!
  command: ComplimentaryActionsMissionControlCopyForComplimentaryActionsControlType!
  utime: Float!
}

enum ComplimentaryActionsMissionControlCopyForComplimentaryActionsControlType {
  ABORT
  ABORT_AUTONOMOUS
  INVALID
  LAND_IN_PLACE
  PAUSE
  REQUEST_MISSION
  RESUME
  SKIP_TO_WAYPOINT
  START
}

type ComplimentaryActionsSendMissionControlActionArgs {
  missionControl: ComplimentaryActionsMissionControlCopyForComplimentaryActions!
  trigger: ComplimentaryActionsTriggerArgsTimerCallback!
}

type ComplimentaryActionsSpawnComplimentaryActionHook {
  waypointStatusHookSpec: ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpec
}

type ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpec {
  conditions: [ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecCondition!]!
}

type ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecCondition {
  progressCondition: ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecConditionProgress
  waypointNonceComparedToRegisteredUtime: ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecConditionWaypointNonceComparedToRegisteredUtime
}

type ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecConditionProgress {
  comp: ProtobufUtilOpEnum!
  value: Float!
}

type ComplimentaryActionsSpawnComplimentaryActionHookWaypointStatusHookSpecConditionWaypointNonceComparedToRegisteredUtime {
  comp: ProtobufUtilOpEnum!
}

type ComplimentaryActionsSpawnComplimentaryActionsOnHookActionArgs {
  childActions: [ComplimentaryActionsComplimentaryAction!]!
  hook: ComplimentaryActionsSpawnComplimentaryActionHook!
  trigger: ComplimentaryActionsTriggerArgsChannelCallback!
}

type ComplimentaryActionsSpoofPhotoResponseActionArgs {
  photoCaptureResult: Int!
  spoofEndTriggerIdx: Int!
  spoofStartTriggerIdx: Int!
  trigger: ComplimentaryActionsTriggerArgsChannelCallback!
}

type ComplimentaryActionsTriggerArgsChannelCallback {
  channel: ComplimentaryActionsTriggerArgsChannelCallbackChannel!
}

enum ComplimentaryActionsTriggerArgsChannelCallbackChannel {
  GO_TO_WAYPOINT_STATUS_PB
  INVALID
  MISSION_ACTION_EVENT_PB
  USER_CAMERA_PHOTO_CAPTURE
  VEHICLE_POSE
}

type ComplimentaryActionsTriggerArgsTimerCallback {
  dt: Float!
}

type ComputedAlertTargetCounts {
  docks: Int
  vehicles: Int
}

enum ConfigurationType {
  AIR
  SEARCH
}

type Controller implements Node {
  controllerId: String!
  controllerRelease: ControllerRelease
  controllerReleaseOverride: ControllerReleaseOverride
  controllerReleaseUuid: String
  controllerType: controllertype!
  created: DateTime
  displayName: String
  eid: String
  iccidEsim: String
  iccidPhysical: String
  id: ID!
  imeiEsim: String
  imeiPhysical: String
  meid: String
  modified: DateTime
  name: String
  notes: String
  organization: Organization
  organizationId: String
  skydioSerial: String
  users(before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
}

type ControllerConnection {
  edges: [ControllerEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ControllerEdge {
  cursor: String!
  node: Controller
}

type ControllerRelease implements Node {
  active: Boolean!
  bucket: String!
  bucketType: buckettype!
  controllerType: controllertype!
  created: DateTime
  description: String
  etag: String
  id: ID!
  key: String!
  manifest: JSONString
  meta: JSONString
  modified: DateTime
  otaMeta: JSONString
  releaseKey: String!
  sha1: String
  size: Float
  uploaded: DateTime
  uuid: String!
  version: [Int]
  versionString: String
}

type ControllerReleaseConnection {
  edges: [ControllerReleaseEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ControllerReleaseEdge {
  cursor: String!
  node: ControllerRelease
}

type ControllerReleaseOverride implements Node {
  controllerId: String
  created: DateTime
  id: ID!
  isValid: String
  modified: DateTime
  releaseKey: String!
  userId: String
  uuid: String!
  validUntil: DateTime
}

type ConvertToProto_UNSAFE {
  data: String
}

type CoordinateFrame implements Node {
  coordinateFrameRoot: CoordinateFrameRoot
  coordinateFrameRootId: String
  created: DateTime
  headingDegrees: Float!
  id: ID!
  modified: DateTime
  posedPhotoCollections(before: String, after: String, first: Int, last: Int): PosedPhotoCollectionConnection
  poses(before: String, after: String, first: Int, last: Int): PoseConnection
  structures(before: String, after: String, first: Int, last: Int): StructureConnection
  type: coordinateframetype!
  uuid: String!
  xMeters: Float!
  yMeters: Float!
  zMeters: Float!
}

type CoordinateFrameConnection {
  edges: [CoordinateFrameEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CoordinateFrameEdge {
  cursor: String!
  node: CoordinateFrame
}

type CoordinateFrameRoot implements Node {
  coordinateFrames(frameType: coordinateframetype, before: String, after: String, first: Int, last: Int): CoordinateFrameConnection
  created: DateTime
  id: ID!
  modified: DateTime
  originAltitude: Float
  originPoint: Geography
  site: Site
  uuid: String!
}

type CoreMetadata {
  durationUs: Int
  xDimension: Int
  yDimension: Int
}

type CreateAlertConfig {
  alertConfig: AlertConfigV2
  errors: [String]
}

type CreateAnnotation {
  annotation: Annotation
  errors: [String]
}

type CreateAnnotationBatch {
  annotations: [Annotation]
  errors: [String]
}

type CreateAnnotationCategory {
  annotationCategory: AnnotationCategory
  errors: [String]
}

type CreateAxonIdentityProvider {
  errors: [String]
  identityProviderConfiguration: IdentityProviderConfiguration
}

type CreateCloudSimulator {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type CreateLivestreamEgress {
  errors: [String]
  livestreamEgress: LivestreamEgress
}

type CreateLoginType {
  errors: [String]
  loginType: LoginTypes
}

type CreateMissionTemplate {
  errors: [String]
  missionTemplateEdge: MissionTemplateEdge
}

type CreateOidcIdentityProvider {
  errors: [String]
  identityProviderConfiguration: IdentityProviderConfiguration
}

type CreateOperation {
  errors: [String]
  operation: Operation
}

input CreateOperationInput {
  annotationCategoryIds: [String]
  description: String
  externalId: String
  flightUuids: [UUID]
  markerUuids: [UUID]
  siteUuids: [UUID]
  userUuids: [UUID]
  vehicleUuids: [UUID]
}

type CreateOrganization {
  errors: [String]
  organization: Organization
}

type CreateSamlIdentityProvider {
  errors: [String]
  identityProviderConfiguration: IdentityProviderConfiguration
}

type CreateSharedLink {
  errors: [String]
  sharedLink: SharedLink
}

type CreateSimulatorContainerVersion {
  errors: [String]
  simulatorContainerVersion: SimulatorContainerVersion
}

type CreateVehicleLicense {
  errors: [String]
  vehicleLicenses: [VehicleLicense]
}

type CreateVpsMap {
  errors: [String]
  vpsMap: VPSMap
}

type CreateWebhook {
  errors: [String]
  webhook: Webhook
}

enum DBMissionTypeEnum {
  EMPTY
  GPS
  MIXED
  NAV
  SITE
  SURFACE_SCAN
}

type DataFile {
  size: Float!
}

type DataFileUploadStatus {
  bytesTotalSum: Float
  bytesUploadedSum: Float
  entries: [DataFileUploadStatusEntry]
  errors: [String]
  totalCount: Int
  uploadedCount: Int
}

type DataFileUploadStatusEntry {
  bytesTotalSum: Float
  bytesUploadedSum: Float
  fileKind: String
  totalCount: Int
  uploadedCount: Int
}

scalar DateTime

type DeleteAlertConfig {
  errors: [String]
  removedAlertConfigV2Id: ID
}

type DeleteAnnotation {
  errors: [String]
  removedAnnotationId: ID
}

type DeleteAnnotationCategory {
  errors: [String]
  removedAnnotationCategoryId: ID
}

type DeleteApiToken {
  errors: [String]
  removedApiTokenId: ID
}

type DeleteApnSetting {
  errors: [String]
  removedApnSettingId: ID
}

type DeleteAxonConfig {
  errors: [String]
  removedAxonConfigurationId: ID
}

type DeleteCloudSimulator {
  errors: [String]
}

type DeleteIdentityProviderConfiguration {
  errors: [String]
  identityProviderConfigurationId: ID
}

type DeleteLoginType {
  errors: [String]
  removedLoginTypeId: ID
}

type DeleteMarkers {
  deletedMarkers: [UUID]
  errors: [String]
}

type DeleteMediaFiles {
  deletedFiles: [FlightDataFile]
  errors: [String]
}

type DeleteObsoleteGroup {
  errors: [String]
  removedGroupId: ID
}

type DeleteOperation {
  errors: [String]
  removedOperationId: ID
}

type DeleteOrganizationLogo {
  errors: [String]
  organization: Organization
}

type DeleteResourceGroup {
  errors: [String]
  removedResourceGroupId: ID
}

type DeleteScheduledMission {
  errors: [String]
  removedScheduledMissionId: ID
}

type DeleteSharedLink {
  errors: [String]
  removedSharedLinkId: ID
}

type DeleteSimulatorContainerVersion {
  errors: [String]
  removedSimulatorContainerVersionId: ID
}

type DeleteSite {
  errors: [String]
  removedSiteId: ID
}

type DeleteSsoCredential {
  errors: [String]
  id: ID
}

type DeleteStructure {
  errors: [String]
  removedStructureId: ID
}

type DeleteVehicleLicense {
  errors: [String]
  removedVehicleLicenseId: ID
}

type DeleteWebhook {
  errors: [String]
  removedWebhookId: ID
}

type DeleteWifiSetting {
  errors: [String]
  removedWifiSettingId: ID
}

type DenormalizeLoginTypesForOrg {
  errors: [String]
}

enum DetectionDetectionClassEnum {
  CAR
  CASE
  CONTAINER
  DOCK
  FIDUCIAL
  G47
  PERSON
  STANFORD_PIGEON
  TTID_INSULATOR
  TTID_TOWER
}

interface Device {
  cloudConfigLastUpdated: Float
  connectivityStatsUpdated: DateTime
  dataFiles(kinds: [FileKindEnum], uploadedBefore: DateTime, uploadedSince: DateTime, before: String, after: String, first: Int, last: Int): DeviceDataFileConnection
  deviceId: String!
  deviceNetworkTestResults: IotApiDeviceNetworkTestSuiteResult
  deviceWillReboot: Boolean
  displayName: String!
  hyperMastFlagGroup(name: String!, instance: Int = 0): IotApiDeviceHyperMastFlagGroup
  hyperMastFlagGroups: GenericScalar
  hyperMastFlags: HyperMastFlagsHelper
  id: ID!
  isIotDevice: Boolean
  isOnline: Boolean
  mediaSyncSpeedTestResult: MediaSyncSpeedTestResult
  qcaStats: QcaStats
  release: Release
  skydioSerial: String
  softwareUpdateStatus: FlightDeckSoftwareUpdateStatus
  streams: [DeviceStream!]!
  trafficControlStatus: TrafficControlTrafficControlStatus
  uuid: String!
  webTunnelUptimeSeconds: Float
  wifiStatus: WifiStatus
}

type DeviceActiveFaultIdsReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceAmbassadorStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceBatteryStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceDataFile implements Node {
  accessPointSerial: String
  bucket: String!
  bucketType: buckettype!
  canDownload: Boolean
  controllerId: String
  created: DateTime
  dockId: String
  downloadUrl: String
  etag: String
  fileUsage: fileusagereason!
  filename: String!
  hasThumbnail: Boolean
  id: ID!
  isUploaded: Boolean
  key: String!
  kind: String!
  mediaCapturedAt: DateTime
  mediaMetadata: JSONString
  metadata: Metadata
  modified: DateTime
  organizationId: String
  sha1: String
  uploaded: DateTime
  userId: String
  uuid: String!
  vehicleId: String
}

type DeviceDataFileConnection {
  edges: [DeviceDataFileEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalSizeBytes: Float
}

type DeviceDataFileEdge {
  cursor: String!
  node: DeviceDataFile
}

type DeviceFlightDeckStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceHyperMastFlagUpdated {
  device: Device
}

type DeviceLivekitStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceMissionStateReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceNetworkTestSuiteResultReceived {
  device: Device
}

type DeviceReleaseOverride implements Node {
  accessPointSerial: String
  created: DateTime
  dockId: String
  forceFullFlashpack: Boolean!
  id: ID!
  modified: DateTime
  releaseKey: String!
  uuid: String!
  validUntil: DateTime
  vehicleId: String
}

type DeviceRemoteStreamingStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceRunModeSwitchingReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceSoftwareUpdateStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceStream {
  name: String!
  protocol: DeviceStreamProtocol!
  url: String!
}

enum DeviceStreamProtocol {
  RTSP
  WS
}

type DeviceUploadStatusReceived {
  device: Device
  vehicle: Vehicle @deprecated(reason: "Use device field instead")
}

type DeviceWebTunnelConnectionInfoChanged {
  dock: Dock
  vehicle: Vehicle
}

type DisableDeviceScheduledMissions {
  errors: [String]
  vehicle: Vehicle
}

type Dock implements Node & Device {
  accessPoint: AccessPoint
  activeFaults: [Int!]
  adsbTraffic: AdsbRxAdsbTraffic
  alertConfigs(before: String, after: String, first: Int, last: Int): AlertConfigV2Connection
  apriltagSet: apriltag_set!
  cloudConfigLastUpdated: Float
  connectivityStatsUpdated: DateTime
  created: DateTime
  dataFiles(kinds: [FileKindEnum], uploadedBefore: DateTime, uploadedSince: DateTime, before: String, after: String, first: Int, last: Int): DeviceDataFileConnection
  desiredState: iot_api_DockIOTDesiredState!
  deviceId: String!
  deviceNetworkTestResults: IotApiDeviceNetworkTestSuiteResult
  deviceWillReboot: Boolean
  disabled: Boolean!
  displayName: String!
  dockId: String!
  dockType: docktype!
  dockTypeCustomerName: String
  fiducialId: String
  fiducialType: fiducialtype!
  flightLogsToUpload: [String]
  flights(flightsBeforeDate: DateTime, flightsAfterDate: DateTime, orgUuid: String, before: String, after: String, first: Int, last: Int): FlightConnection
  hyperMastFlagGroup(name: String!, instance: Int = 0): IotApiDeviceHyperMastFlagGroup
  hyperMastFlagGroups: GenericScalar
  hyperMastFlags: HyperMastFlagsHelper
  id: ID!
  iotStatus: DockIOTStatus
  isIotDevice: Boolean
  isOnline: Boolean
  isSimulator: Boolean!
  linkedAccessPointSerial: String
  linkedVehicleId: String
  location: GPSLocation
  mediaSyncSpeedTestResult: MediaSyncSpeedTestResult
  modified: DateTime
  name: String
  nearestAdsbSensorDock: Dock
  nearestWeatherStationSensorDock: Dock
  networkIpSettings: NetworkManagerNetworkIpSettings
  notes: String
  organization: Organization
  organizationId: String
  overrides: Overrides
  overridesList(returnInheritedOverrides: Boolean = false): [Override]
  pendingReleaseUpdate: ReleaseUpdate
  qcaStats: QcaStats
  release: Release
  releaseOverride: DeviceReleaseOverride
  releaseUuid: String
  sensors(sensorSerial: String, before: String, after: String, first: Int, last: Int): SensorConnection
  setupDate: DateTime
  skydioSerial: String
  softwareUpdateStatus: FlightDeckSoftwareUpdateStatus
  softwareUpdateStatusToRelease: Release
  streams: [DeviceStream!]!
  takeoffPoint: TakeoffPoint
  takeoffPointId: String
  trafficControlStatus: TrafficControlTrafficControlStatus
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
  weatherStationData: WeatherStationWeatherStationData
  webTunnelConnectionInfo: cloud_api_WebTunnelConnectionInfo
  webTunnelUptimeSeconds: Float
  wifiStatus: WifiStatus
}

type DockAdsbTrafficUpdated {
  dock: Dock
}

type DockConnection {
  edges: [DockEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DockConnectivityStatsReceived {
  dock: Dock
}

type DockEdge {
  cursor: String!
  node: Dock
}

type DockIOTStatus {
  adsbTraffic: AdsbRxAdsbTraffic!
  dockStatus: DockStatus!
  flightDeckStatus: FlightDeckStatus!
  pendingReleaseUpdate: ReleaseFile!
  uclock: Float!
  weatherStationData: WeatherStationWeatherStationData!
  webTunnelUptimeUsec: Float!
}

type DockIOTStatusReceived {
  dock: Dock
}

type DockIsOnlineChanged {
  dock: Dock
}

input DockPositionInput {
  rotationDegrees: RotationDegrees
  siteId: ID
  xMeters: ENUOffsetMeters
  yMeters: ENUOffsetMeters
  zMeters: ENUOffsetMeters
}

type DockStatus {
  utime: Float!
}

type DockWeatherStationDataUpdated {
  dock: Dock
}

type DroneSenseMission {
  missionId: String
  name: String
}

type DroneSenseMissionSelection {
  callSign: String
  missionId: String
}

type DuplicateMission {
  missionTemplate: MissionTemplate
}

type DuplicateMissionTemplate {
  errors: [String]
  missionTemplateEdge: MissionTemplateEdge
}

scalar ENUOffsetMeters

input ENUPoseInput {
  headingDegrees: RotationDegrees
  pitchDegrees: RotationDegrees
  rollDegrees: RotationDegrees
  xMeters: ENUOffsetMeters
  yMeters: ENUOffsetMeters
  zMeters: ENUOffsetMeters
}

type EigenLcmQuaterniond {
  xyzw: [Float!]!
}

type EigenLcmVector2d {
  data: [Float!]!
}

type EigenLcmVector2f {
  data: [Float!]!
}

type EigenLcmVector3d {
  data: [Float!]!
}

type EigenLcmVector3f {
  data: [Float!]!
}

type ExternalApiDocumentationLink {
  description: String
  displayName: String!
  url: String!
}

type FaultDetectorsBatteryCellVoltageImbalanceThresholds {
  cellVoltageImbalanceThresholdSchedule: [Float!]!
  cellVoltageImbalanceVoltageSchedule: [Float!]!
}

type FeatureFlags {
  activateStrobeLightsOnLaunchRfd: Boolean!
  addLaunchPointRfd: Boolean!
  alertManagerWithAudioInTeleop: Boolean!
  alertOnFlyToPointAltitudeChange: Boolean!
  alertsApi: Boolean!
  allowBacktrackingRtx: Boolean!
  allowEditAdsbSettings: Boolean!
  allowSchedulingR47Missions: Boolean!
  allowTwilightFlight: Boolean!
  altKeyDragWaypointVertical: Boolean!
  alwaysShowCameraSettings: Boolean!
  annotations: Boolean!
  arVideoSync: Boolean!
  ascendSolarMapCaptureDemo: Boolean!
  automaticCloudPhotogrammetry: Boolean!
  automaticFileUploadPage: Boolean!
  automaticNcpgPhotogrammetry: Boolean!
  axonMediaIntegration: Boolean!
  axonRespondIntegration: Boolean!
  barometerHeightMode: Boolean!
  cityCustomerMapboxMapStyles: Boolean!
  cloudApiProcessTelemetryJson: Boolean!
  cloudInspectPage: Boolean!
  cloudOta: Boolean!
  configureObstacleMargin: Boolean!
  controlKeyDragWaypointVertical: Boolean!
  copyMarkersBetweenNypdOrgs: Boolean!
  createMarkersExternalApi: Boolean!
  customMapLayersExternal: Boolean!
  customMapLayersInternal: Boolean!
  customer2CustomMapboxMapStyles: Boolean!
  customerCustomMapboxMapStyles: Boolean!
  dfrCommand: Boolean!
  dfrCommandPhase1MarkersUi: Boolean!
  dfrStockSettings: Boolean!
  disableAutomaticVideoRecording: Boolean!
  disableCloudConfigSignatureVerification: Boolean!
  disableLinkLossAlertOnGround: Boolean!
  disableTeleopLandingPrompt: Boolean!
  displayMediaSyncSpeedTest: Boolean!
  dockEstopDisplay: Boolean!
  dockLocationUpdate: Boolean!
  dockSafetyLightSettings: Boolean!
  dockSafetySoundSettings: Boolean!
  downloadOnlyCloudConfigs: Boolean!
  droInternal: Boolean!
  droRemoteId: Boolean!
  droTeleopRunMissionJson: Boolean!
  dronesenseIntegrationSetup: Boolean!
  editDockLedsOverride: Boolean!
  editOrgFlightPolicy: Boolean!
  emitRtspStreamsToDefaultEgress: Boolean!
  enableArStreetOverlays: Boolean!
  enableAxonMarkersRfd: Boolean!
  enableC18MicrohardOfflineConfiguration: Boolean!
  enableCloudUiPublicSafetyLightsV2: Boolean!
  enableCreateMarkerInteractionRfd: Boolean!
  enableDockLandingAr: Boolean!
  enableDockPrecipitatonTag: Boolean!
  enableDockTransitPoint: Boolean!
  enableDownloadAllScanFiles: Boolean!
  enableEvShortcutsRfd: Boolean!
  enableFlyToPoiR47: Boolean!
  enableFlyToPoiRfd: Boolean!
  enableFpvOnMap: Boolean!
  enableG47DockInspectionRfd: Boolean!
  enableGimbalAttachmentUi: Boolean!
  enableIncidentMarkersRfd: Boolean!
  enableLookAtFinalPoint: Boolean!
  enableMapVehicleFollowiing: Boolean!
  enableMarkersAr: Boolean!
  enableMultiOrgSwitching: Boolean!
  enableMultidroneOperations: Boolean!
  enableOrbitToPoiRfd: Boolean!
  enablePointerLockDuringMissionsRfd: Boolean!
  enableRfdHudAirspeedAltitude: Boolean!
  enableRfdHudCompass: Boolean!
  enableRtkSupport: Boolean!
  enableSensorPackagesAndAttachmentsFleet: Boolean!
  enableSensorPackagesAndAttachmentsSettings: Boolean!
  enableSettingsDevicesAccessPointUi: Boolean!
  enableSetupFlights: Boolean!
  enableSiteWideAdsbData: Boolean!
  enableSiteWideWeatherSensorData: Boolean!
  enableStreamingDdLogs: Boolean!
  enableStreamingRumEvents: Boolean!
  enableViewDownloadRtkPpkFiles: Boolean!
  enableX10AdsbRfd: Boolean!
  europeanUnion: Boolean!
  executiveActionHotkeys: Boolean!
  filterMarkersInRfdSidebar: Boolean!
  fixedLocationRid: Boolean!
  fleetPageSdCardFormatting: Boolean!
  flyNowNoAutomaticRunModeSwitching: Boolean!
  flyToLaunchPointTeleopAnnotationCategory: Boolean!
  fullHeightVideoEnabled: Boolean!
  geofenceEnforcementInCloud: Boolean!
  gimbalPitchResetShortcut: Boolean!
  gqlDeleteMediaDirectly: Boolean!
  granularPermissions: Boolean!
  graphiqlViewer: Boolean!
  hideLandNowDuringRtd: Boolean!
  internalThemeToggle: Boolean!
  isOnpremOrg: Boolean!
  jwtValidationEndpoint: Boolean!
  linkLossAlertLevelCaution: Boolean!
  liveMissionPlanning: Boolean!
  liveStreaming: Boolean!
  lostCommsTimeoutSettingTeleop: Boolean!
  manageFlyToPointHeightWithVehicleOverride: Boolean!
  mediaAvailableAlert: Boolean!
  mediaAvailableForFlightAlert: Boolean!
  mediaAvailableForScanAlert: Boolean!
  mediaPageKindDropdown: Boolean!
  mediaWatermarks: Boolean!
  missionControlApi: Boolean!
  missionDocumentsApi: Boolean!
  missionEditorNightAutonomy: Boolean!
  missionMediaViewer: Boolean!
  missionResults3dViewer: Boolean!
  missionResume: Boolean!
  missionSharingCustomerPortal: Boolean!
  missionsPage: Boolean!
  mobileRemoteStreaming: Boolean!
  moveLivestreamTagPosition: Boolean!
  moveShareLivestreamButtonToIcon: Boolean!
  moveVehicleLaunchModalVideoFeed: Boolean!
  multiMissionFlightTester: Boolean!
  multiViewerStreaming: Boolean!
  multizoneSiteGeofences: Boolean!
  navHeightAboveGroundEnabled: Boolean!
  ncpgPhotogrammetryUseTensorRtFlowModel: Boolean!
  networkDebuggingTools: Boolean!
  noObstacleAvoidanceInTeleop: Boolean!
  offlineUpdatesPage: Boolean!
  ownOrgGroups: Boolean!
  perFlightFeedback: Boolean!
  postRefactorMissionEditor: Boolean!
  propGuardsEnablement: Boolean!
  publicVisibilityDashboard: Boolean!
  qosSkybusChannelSetting: Boolean!
  r47ShowMissionPlanners: Boolean!
  readyLinkSingleVehicle: Boolean!
  remotePilotApiAccess: Boolean!
  remoteVideoApiAccess: Boolean!
  remotelyApplyX10ApnSettings: Boolean!
  removeFlightFromResourceGroup: Boolean!
  rfdConnectivitySettingsTab: Boolean!
  rfdControllerMaxSpeedParity: Boolean!
  rfdParachuteAttachmentUi: Boolean!
  rfdTelemetryStats: Boolean!
  ridFeatureDisabled: Boolean!
  ridScheduledApiMissions: Boolean!
  safeLandingPoints: Boolean!
  scheduleMissionNowApi: Boolean!
  sendParquetIngestorJobsToTemporal: Boolean!
  sendZipFilesJobToTemporal: Boolean!
  sensorDataViewClaim: Boolean!
  showActivePilotNameIfLivestreaming: Boolean!
  showAdditionalWifiNetworks: Boolean!
  showAdsbStatusInRfd: Boolean!
  showAprilTagSettings: Boolean!
  showBandSelectionSettings: Boolean!
  showCloudSimulatorControls: Boolean!
  showFaaMapboxStyles: Boolean!
  showFlightReportMediaSummary: Boolean!
  showInternalMapboxStyles3: Boolean!
  showOperationsAreaInternalMapboxStyles: Boolean!
  showOperationsAreaMapboxStyles: Boolean!
  showOverlappingDockWifiChannelsFleetPage: Boolean!
  showRangeLimitSettings: Boolean!
  showSkydioLinkSettings: Boolean!
  showTeleopCircularBatteryWidget: Boolean!
  showTeleopIdleModal: Boolean!
  showTerrainAndBldgsToggleInFleetPage: Boolean!
  showVehicleFaultsTeleop: Boolean!
  showViewFlightDeckButton: Boolean!
  showVioResetCloudOverride: Boolean!
  showVpsInfo: Boolean!
  siteMapper: Boolean!
  siteMissions: Boolean!
  sitesStructureEditor: Boolean!
  skydioExtend: Boolean!
  speakerMicRfd: Boolean!
  ssoEnabled: Boolean!
  ssoManagement: Boolean!
  standaloneMapPage: Boolean!
  structureAnnotationsApi: Boolean!
  supportMenuV2: Boolean!
  surfaceScanMissions: Boolean!
  teleopActionsToolbar: Boolean!
  teleopArV2: Boolean!
  teleopBitrateSlider: Boolean!
  teleopBoostMode: Boolean!
  teleopCommandeeringV2: Boolean!
  teleopCrawlMode: Boolean!
  teleopDebugMenu: Boolean!
  teleopFastFlight: Boolean!
  teleopNavSourceInfoHealth: Boolean!
  teleopPilotKeepAlive: Boolean!
  teleopRemoveReturnType: Boolean!
  teleopSettingsModalV3: Boolean!
  teleopTelemetryHeadingAndGimbalPitch: Boolean!
  teleopThirdPersonView: Boolean!
  teleopWaypointCommands: Boolean!
  teleopWheelZoom: Boolean!
  twilightModeFastFlight: Boolean!
  useImprovedFlightStatusWorkflow: Boolean!
  usePathfinderFlyToPointRfd: Boolean!
  useWorldTakeoffFrameFlyToPoint: Boolean!
  vehicleLicensesPage: Boolean!
  vehicleRemoteStreaming: Boolean!
  vehicleSettingsCosmeticsAndAccessPoint: Boolean!
  vehicleTeleoperation: Boolean!
  vehicleTypeBasedAxonSessions: Boolean!
  viewOfflineSettings: Boolean!
  vpsMapDatamodelTransitionReadFromNew: Boolean!
  vpsMapDatamodelTransitionWriteToBoth: Boolean!
  waypointCameraSettings: Boolean!
  whatsNew: Boolean!
  whoamiEndpoint: Boolean!
  x10CloudOta: Boolean!
  x10EoCameraControlsParityInTeleop: Boolean!
  x10ZoomAndFlashUi: Boolean!
}

enum FeatureGrouping {
  EVIDENCE
  RESPOND
  SEARCH
}

union FeatureGroupingsResult = FeatureGroupingsResultSuccess | FeatureGroupingsResultAxonAPIError

type FeatureGroupingsResultAxonAPIError {
  code: Int
  msg: String!
}

type FeatureGroupingsResultSuccess {
  data: [FeatureGrouping!]!
}

type FetchDroneSenseMissions {
  defaults: DroneSenseMissionSelection
  dronesenseMissions: [DroneSenseMission]
  errors: [String]
}

type FileDownloadsDownloadableFile {
  error: String!
  kind: String!
  numDownloadAttempts: Int!
  priority: FileDownloadsFileDownloadPriorityPriorityEnum!
  uclock: Float!
  uuid: String!
}

enum FileDownloadsFileDownloadPriorityPriorityEnum {
  HIGH
  HIGHEST
  LOW
  LOWEST
  MEDIUM
}

type FileDownloadsFileDownloadStatus {
  currentlyDownloadingFile: FileDownloadsDownloadableFile!
  error: String!
  failedToDownload: [FileDownloadsDownloadableFile!]!
  filesDownloaded: [FileDownloadsDownloadableFile!]!
  filesToDownload: [FileDownloadsDownloadableFile!]!
  uclock: Float!
}

enum FileKindEnum {
  ACCESSORY_PROCESS_LOG
  ALIGNED_TELEMETRY_CSV
  ANALYTICS
  AUDIO_RECORDING
  BEACON_LOG
  C18_FLIGHT_LOG
  C93_FLIGHT_LOG
  CLOUD_FLIGHT_LOG
  DEBUG_LOG
  DOCK_FLIGHT_LOG
  FLIGHT_METADATA
  FLIGHT_METADATA_JSON
  NAV_CAM_POSE_GRAPH
  NAV_CAM_POSE_GRAPH_UNOPTIMIZED
  ORG_LOGO
  PHONE_AUDIO_RECORDING
  PHONE_FLIGHT_LOG
  PHONE_VIDEO_PREVIEW
  PHOTOGRAMMETRY_MESH
  PHOTOGRAMMETRY_STAGE_DIR
  QCU_FLIGHT_LOG
  QGC_TELEM_LOG
  RTK_ATTACHMENT_MRK
  RTK_ATTACHMENT_MRK_SCAN
  RTK_ATTACHMENT_RINEX_NAV
  RTK_ATTACHMENT_RINEX_NAV_SCAN
  RTK_ATTACHMENT_RINEX_OBS
  RTK_ATTACHMENT_RINEX_OBS_SCAN
  RTK_ATTACHMENT_SBF
  RTK_ATTACHMENT_SBF_SCAN
  SCAN_CAPTURE_REPORT
  SCAN_INPUT
  SCAN_MESH
  SCAN_ORTHOMAP
  SCAN_OUTPUT
  SCAN_PIX4D_GEOLOCATION
  SCAN_POSE_GRAPH
  SCAN_TSDF
  SNOWBALLED
  TELEMETRY_LOG_V0
  TELEMETRY_LOG_V1
  TELEMETRY_LOG_V2
  TILESET_JSON
  TRUNCATED_FLIGHT_LOG
  UNDISTORTED_IMAGE
  UNKNOWN
  VEHICLE_FLIGHT_IMAGE_LOG
  VEHICLE_IMAGE
  VEHICLE_IMAGE_DNG
  VEHICLE_IR_CAMERA_IMAGES
  VEHICLE_IR_CAMERA_VIDEO
  VEHICLE_IR_IMAGE
  VEHICLE_LOCALIZATION_NAV_CAM_POSE_GRAPH
  VEHICLE_LOG
  VEHICLE_MISSION_RESULT
  VEHICLE_NAV_CAMERA_IMAGES
  VEHICLE_NAV_CAMERA_IMAGES_INDEX
  VEHICLE_NAV_CAMERA_VIDEO
  VEHICLE_PATROL_MISSION
  VEHICLE_PROCESS_LOG
  VEHICLE_RADIOMETRIC_IMAGE
  VEHICLE_SKYMETRICS
  VEHICLE_SUB_CAMERA_IMAGES
  VEHICLE_SUB_CAMERA_IMAGES_INDEX
  VEHICLE_SUB_CAMERA_VIDEO
  VEHICLE_VIDEO_PREVIEW
  VEHICLE_VIDEO_RAW
}

enum FirstBootFlasherStatusEnum {
  ERROR
  IN_PROGRESS
  NOT_STARTED
  SKIPPED
  SUCCESS
  UNKNOWN
}

type FlashpackFile implements Node {
  created: DateTime
  encrypted: Boolean!
  fpinfo: JSONString
  fromReleaseKey: String
  id: ID!
  key: String!
  modified: DateTime
  sha1: String
  size: Float
  toReleaseKey: String!
  uploaded: DateTime
  uuid: String!
}

type Flight implements Node {
  annotations(categoryNames: [String] = [], annotationDescription: String, before: String, after: String, first: Int, last: Int): AnnotationConnection
  axonIntegrationStatus: uconfileintegrationstatustype
  batteryId: String
  batteryInfo: FlightBattery
  created: DateTime
  dataFileUploadStatus: DataFileUploadStatus
  dataFiles(kinds: [FileKindEnum], returnDeletedFiles: [Boolean], uploadedBefore: DateTime, uploadedSince: DateTime, mediaCapturedBefore: DateTime, mediaCapturedSince: DateTime, missionExecutionUuid: String, missionTemplateUuid: String, waypointName: String, before: String, after: String, first: Int, last: Int): FlightDataFileConnection
  deployCommit: String
  dock: Dock
  durationUsec: String
  flightMediaSharedLink: SharedLink
  gimbal: Gimbal
  gimbalId: String
  gimbalSerial: String
  handle: String
  hasDevLog: Boolean
  hasMediaFiles: Boolean
  hasTelemetry: Boolean
  id: ID!
  landingLocation: Location
  landingUtime: Float
  missionExecutions(before: String, after: String, first: Int, last: Int): MissionExecutionConnection
  modelPipelineRuns(before: String, after: String, first: Int, last: Int): ModelPipelineRunConnection
  modified: DateTime
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  organization: Organization
  organizationId: String
  path: [Location]
  posedPhotoCollections(before: String, after: String, first: Int, last: Int): PosedPhotoCollectionConnection
  release: Release
  releaseKey: String
  resourceGroups: [ResourceGroup]
  takeoff: DateTime
  takeoffAddress: String
  takeoffClientType: client_type!
  takeoffDockId: String
  takeoffLocation: Location
  takeoffPhoneId: String
  takeoffUserId: String!
  takeoffUtime: Float
  user: User
  uuid: String!
  vehicle: Vehicle
  vehicleId: String!
}

type FlightBattery {
  isSameOrg: Boolean
  serial: String
}

type FlightConnection {
  edges: [FlightEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalFlightTimeSeconds: Int!
}

type FlightDataFile implements Node {
  actionResultUuid: String
  annotations(before: String, after: String, first: Int, last: Int): AnnotationConnection
  availableInS3: String
  bucket: String!
  bucketType: buckettype!
  canDownload: Boolean
  created: DateTime
  deleted: DateTime
  downloadUrl: String
  etag: String
  fileUsage: fileusagereason!
  filename: String!
  flight: Flight
  flightId: String!
  hasThumbnail: Boolean
  id: ID!
  isDeleted: Boolean
  isUploaded: Boolean
  key: String!
  kind: String!
  mediaCapturedAt: DateTime
  mediaMetadata: JSONString
  metadata: Metadata
  missionExecutionUuid: String
  missionTemplateUuid: String
  missionWaypointName: String
  modified: DateTime
  organizationId: String
  sha1: String
  sizeBytes: Float
  thumbnailUrl: String
  uploaded: DateTime
  userId: String
  uuid: String!
}

type FlightDataFileConnection {
  edges: [FlightDataFileEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
  totalSizeBytes: Float
}

type FlightDataFileEdge {
  cursor: String!
  node: FlightDataFile
}

type FlightDataFileIntegrationStatusUpdated {
  flight: Flight
}

type FlightDataFilePromised {
  flight: Flight
}

type FlightDataFileThumbnailGenerated {
  flightDataFile: FlightDataFile
}

type FlightDataFileUploaded {
  flightDataFile: FlightDataFile
}

type FlightDeckCaptureSettings {
  antiBandingMode: UserCameraAntiBandingModeEnum!
  autoexposureRegion: UserCameraAutoRegionRequest!
  autofocusMode: UserCameraAutofocusModeEnum!
  autofocusRegion: UserCameraAutoRegionRequest!
  colorMode: UserCameraColorModeEnum!
  compensation: UserCameraCompensationModeEnum!
  customFolder: String!
  encoderMode: UserCameraEncoderModeEnum!
  exposure: UserCameraExposureModeEnum!
  iso: UserCameraIsoModeEnum!
  manualFocusPosition: Float!
  photo15mpEnabled: Boolean!
  photoFormat: UserCameraPhotoFormatEnum!
  photoInterval: UserCameraPhotoIntervalModeEnum!
  photoRecordingMode: UserCameraRecordingModeEnum!
  publishThumbnail: Boolean!
  recordingMode: UserCameraRecordingModeEnum!
  source: FlightDeckCaptureSettingsCaptureSettingsSource!
  streamEncoderMode: UserCameraEncoderModeEnum!
  thumbnailWidth: Int!
  useCustomFolder: Boolean!
  userBitrateOverride: Int!
  userBitratePreset: UserCameraRecordingBitratePresetEnum!
  utime: Float!
  validationId: Int!
  videoAutoRecord: Boolean!
  videoRecordingMode: UserCameraRecordingModeEnum!
  whiteBalance: UserCameraAwbModeEnum!
}

enum FlightDeckCaptureSettingsCaptureSettingsSource {
  CAMERA_SETTINGS_EXECUTABLE
  LANDING_PAD_FRONTEND
  MAVLINK
  MOBILE_APP
  SKILLS
  TELEOP_UI
  UNSPECIFIED
}

type FlightDeckFirstBootProgress {
  airhawkFlashStatus: FirstBootFlasherStatusEnum!
  escsFlashStatus: FirstBootFlasherStatusEnum!
  firstBootAttemptNum: Int!
  gimbalFlashStatus: FirstBootFlasherStatusEnum!
  groundhawkFlashStatus: FirstBootFlasherStatusEnum!
  isRebooting: Boolean!
  mcu: String!
  microhardFlashStatus: FirstBootFlasherStatusEnum!
  skytrainFlashStatus: FirstBootFlasherStatusEnum!
  totalProgressPercent: Float!
  ubootStats: FlightDeckUbootStats!
  userCameraFlashStatus: FirstBootFlasherStatusEnum!
}

type FlightDeckIrCaptureSettings {
  agc: FlirBosonDriverAgcSettings!
  boson: FlirBosonDriverBosonSettings!
  colorlut: FlirBosonDriverColorlutEnum!
  exposureRoi: FlirBosonDriverRoiSettings!
  isotherm: FlirBosonDriverIsothermSettings!
  photoDisabled: Boolean!
  photoFormat: UserCameraPhotoFormatEnum!
  thermalParams: FlirBosonDriverThermalParams!
  utime: Float!
}

type FlightDeckMavlinkClientSettings {
  geofenceAction: FlightDeckMavlinkClientSettingsMavlinkGeofenceAction!
  geofenceHeight: Float!
  geofenceRadius: Float!
}

enum FlightDeckMavlinkClientSettingsMavlinkGeofenceAction {
  MAVLINK_GEOFENCE_ACTION_HOLD
  MAVLINK_GEOFENCE_ACTION_LAND
  MAVLINK_GEOFENCE_ACTION_NONE
  MAVLINK_GEOFENCE_ACTION_RETURN
  MAVLINK_GEOFENCE_ACTION_TERMINATE
  MAVLINK_GEOFENCE_ACTION_WARN
}

enum FlightDeckNavigationModeMode {
  AUTONOMY_OFF
  DEFAULT_NAV
  NIGHT_AUTONOMY
  TWILIGHT
  UNKNOWN
  VESSEL_MODE
}

type FlightDeckReturnSettings {
  ascendFromCurrentHeight: Boolean!
  attiReturnAltAgl: Int!
  cancelAttiReturnWaitTime: Float!
  cancelAttiReturnWithTimer: Boolean!
  dontDescend: Boolean!
  dontReturnOnLostComms: Boolean!
  dontReturnOnLostCommsInAtti: Boolean!
  faceForward: Boolean!
  landOnceReturned: Boolean!
  lowBatteryAutoRth: Boolean!
  minimumHeight: Float!
  speed: Float!
  useBacktrack: Boolean!
  waitTime: Float!
  waitTimeBeforeLand: Float!
}

enum FlightDeckRgbLedModeEnum {
  AVIATION_RGB_LED
  DEFAULT_RGB_LED
}

enum FlightDeckRunModeAction {
  NONE
  SET_DEFAULT
  START
  TERMINATE
  TERMINATE_AND_START
}

input FlightDeckRunModeRequest {
  action: FlightDeckRunModeAction
  requestId: Int
  runModeArgs: [FlightDeckRunModeRequestRunModeArgsEntry!]
  runModeName: String
  synchronizeQcu: Boolean
  utime: Float
}

input FlightDeckRunModeRequestRunModeArgsEntry {
  key: String
  value: String
}

type FlightDeckSoftwareUpdateStatus {
  applyProgress: google_protobuf_Struct!
  batteryLow: Boolean!
  diskState: FlightDeckSoftwareUpdateStatusDiskState!
  failedPartitionTargetInfo: FlightDeckSoftwareUpdateTargetInfo!
  finalizingProgress: FlightDeckFirstBootProgress!
  finalizingUpdate: Boolean!
  otaRelatedMetadata: String!
  runningReleaseKey: String!
  state: FlightDeckSoftwareUpdateStatusState!
  updateFileReleaseKey: String!
}

enum FlightDeckSoftwareUpdateStatusDiskState {
  DISK_INTERNAL_MOUNT
  DISK_OTHER
}

enum FlightDeckSoftwareUpdateStatusState {
  APPLIED_WITHOUT_REBOOT
  APPLYING
  ERR_APPLY_FAILED
  ERR_NO_SPACE
  ERR_SEARCH_FAILED
  ERR_VERIFY_FAILED
  NO_FILE
  REBOOTING
  SEARCHING
  VERIFIED
  VERIFYING
}

type FlightDeckSoftwareUpdateTargetInfo {
  diffpackFromGitCommit: String!
  diffpackFromReleaseKey: String!
  gitCommit: String!
  releaseKey: String!
  sha1: String!
}

type FlightDeckStatus {
  cloudConfigLastUpdated: Float!
  flightPhase: CommonFlightPhaseEnumEnum!
  runModeName: String!
  skillKey: String!
  softwareUpdateRelease: Release
  softwareUpdateStatus: FlightDeckSoftwareUpdateStatus!
  vehicleType: String!
}

type FlightDeckUbootCounters {
  bootAttempts: Float!
  bootSuccessCount: Float!
  flightdeckSuccessCount: Float!
  isPartitionHealthy: Boolean!
  partitionNum: Int!
}

type FlightDeckUbootStats {
  bootQueue: String!
  currentPartition: Int!
  didBootIntoNewPartition: Boolean!
  partitions: [FlightDeckUbootStatsPartitionsEntry!]!
}

type FlightDeckUbootStatsPartitionsEntry {
  key: Int!
  value: FlightDeckUbootCounters!
}

type FlightDeckVehicleSettings {
  alignedTelemetryCsv: Boolean!
  allow3dCaptureScanMode: Boolean!
  allowCommandedEland: Boolean!
  allowCylinderCaptureScanMode: Boolean!
  allowIndoorCaptureScanMode: Boolean!
  allowIndoorCaptureScanModeV2: Boolean!
  allowInternalMissionActions: Boolean!
  allowIrSubjectTracking: Boolean!
  allowMapCaptureScanMode: Boolean!
  allowMavlinkPerch: Boolean!
  allowOnVehiclePhotogrammetry: Boolean!
  allowOrbitCaptureScanMode: Boolean!
  allowPoweredPayloads: Boolean!
  allowSemanticTransmissionTowerScanMode: Boolean!
  allowSurfaceCaptureScanMode: Boolean!
  allowSurfaceScanAlphaFeatures: Boolean!
  allowTakeoffFromMismatchedDock: Boolean!
  allowTowerCaptureScanMode: Boolean!
  autoLandInAttiMode: Boolean!
  bandSelectionList: [Int!]!
  battImbalanceThresholds: FaultDetectorsBatteryCellVoltageImbalanceThresholds!
  batteryButtonLaunch: Boolean!
  blackoutModeEnabled: Boolean!
  boostDisablesNightsense: Boolean!
  caseLandingDisabled: Boolean!
  centralizedFrbRateEnable: Boolean!
  cloudConfigUclock: Float!
  commandedAttitudeModeOn: Boolean!
  digitalZoom: Boolean!
  disableCountryCodeScan: Boolean!
  disableGps: Boolean!
  disableMediaEncryption: Boolean!
  disableObstacleAvoidanceDockLanding: Boolean!
  displayHandWaveCalibration: Boolean!
  dockJigglingEnabled: Boolean!
  enableAttitudeRtx: Boolean!
  enableCommandedAttitude: Boolean!
  enableCommandedLostComms: Boolean!
  enableEuSlowSpeed: Boolean!
  enableFlightFileManifestTask: Boolean!
  enableForceVioDegraded: Boolean!
  enableGetMicrohardRfConfig: Boolean!
  enableGpsSpoofingDetector: Boolean!
  enableHighAltitudeVio: Boolean!
  enableIspPixelContentFlip: Boolean!
  enableJpgHighCompress3ds: Boolean!
  enableLowTakeoff: Boolean!
  enableManualWff: Boolean!
  enablePerch: Boolean!
  enableRapidDescent: Boolean!
  enableRscToggle3ds: Boolean!
  enableRtkSupport: Boolean!
  enableVehicleRtspKlv: Boolean!
  enterpriseMode: Boolean!
  europeanUnionLighting: Boolean!
  flashDriveRequiredForFlight: Boolean!
  flightHistory: Boolean!
  flightMode: FlightDeckVehicleSettingsFlightMode!
  frameSelectionList: [Int!]!
  fullSpinOnTakeoff: Boolean!
  geofence: GeofenceGeofence!
  geofenceOff: Boolean!
  gimbalInspectionMode: Boolean!
  handWaveEnabled: Boolean!
  heightCeilingOff: Boolean!
  heightCeilingValue: Float!
  ignoreGpsHeightCeil: Boolean!
  ignoreLowBatteryBehavior: Boolean!
  illuminationMode: FlightDeckVehicleSettingsIlluminationMode!
  increasedMaxSpeedMapCapture: Boolean!
  isEuropeanUnion: Boolean!
  landingLedMode: FlightDeckVehicleSettingsLandingLedMode!
  longRangeDisabled: Boolean!
  lteDataSaver: Boolean!
  lteModemEnabled: Boolean!
  manualBandSelection: Int!
  manualFrameSelection: Int!
  manualModeSelection: Int!
  manualRadiowidthSelection: Int!
  manualWifiChannel: Int!
  manualWifiChannelOnRest: Int!
  mavlinkClientSettings: FlightDeckMavlinkClientSettings!
  mhVehicleDcsCapable: Boolean!
  modeSelectionList: [Int!]!
  multiResPreviewEnable: Boolean!
  narrowBandEnabled: Boolean!
  navigationMode: FlightDeckNavigationModeMode!
  nightsenseDisabled: Boolean!
  nightsenseDisabledNightAutonomySwitch: Boolean!
  nightsenseOffAllowedWithPoorGps: Boolean!
  oaOffGroundAvoidanceDisabled: Boolean!
  obstacleMarginMode: FlightDeckVehicleSettingsObstacleMarginMode!
  offline: Boolean!
  overwriteOldMedia: Boolean!
  policeMode: Boolean!
  precisionFlightMode: Boolean!
  publicSafetyEmergencyMode: Boolean!
  publicSafetyPoliceMode: Boolean!
  radiowidthSelectionList: [Int!]!
  rebootBeforeScheduledMissionsSeconds: Int!
  rebootMaxUptimeSeconds: Int!
  returnSettings: FlightDeckReturnSettings!
  returnWithVisionOnly: Boolean!
  rfHighPower: Boolean!
  rgbLedMode: FlightDeckRgbLedModeEnum!
  rgbLedsDisabled: Boolean!
  ridFeatureDisabled: Boolean!
  ridFeatureEnabled: Boolean!
  safetyHeight: Boolean!
  skydiolinkAes256: Boolean!
  skysticksPairingInfo: WifiSkysticksPairingInfo!
  speedNearObstacles: Float!
  stopAtStructure: Boolean!
  superzoom: Boolean!
  surfaceScan: Boolean!
  utime: Float!
  validationId: Int!
  variableObstacleAvoidance: Boolean!
  wifiBand: FlightDeckVehicleSettingsWifiBand!
  wifiChannelList: [Int!]!
  wifiCountryCode: String!
}

enum FlightDeckVehicleSettingsFlightMode {
  ATTITUDE
  DYNAMIC
  MISSION
  NOT_SET
  WIDE_PHOTOS
}

enum FlightDeckVehicleSettingsIlluminationMode {
  DEFAULT_ILLUMINATION
  INFRARED_ON
  INFRARED_STROBE
  VISIBLE_STROBE
}

enum FlightDeckVehicleSettingsLandingLedMode {
  LANDING_LED_OFF
  LANDING_LED_ON
}

enum FlightDeckVehicleSettingsObstacleMarginMode {
  DEFAULT_OBSTACLES
  MINIMAL_OBSTACLES
  NO_OBSTACLES
  REDUCED_OBSTACLES
}

enum FlightDeckVehicleSettingsWifiBand {
  DEFAULT_20_MHZ
  NARROW_10_MHZ
  NARROW_5_MHZ
}

type FlightEdge {
  cursor: String!
  node: Flight
}

input FlightSearchRequest {
  annotationCategoryUuids: [UUID]
  annotationNames: [String]
  annotationPatterns: [String]
  flightIdPatterns: [String]
  gitBranchOrTag: String
  gitCommit: String
  gitCommitEndDate: DateTime
  gitCommitStartDate: DateTime
  hasDataFileKinds: [FileKindEnum]
  minDurationSeconds: Float
  onlyDevLogs: Boolean
  orgName: String
  takeoffEndDate: DateTime
  takeoffStartDate: DateTime
  userEmail: String
  vehicle: String
  vehicleTypes: [CloudApiVehicleTypeVehicleTypeEnum]
}

type FlightTelemetryEnabledChanged {
  organization: Organization
}

enum FlirBosonDriverAgcModeEnum {
  kAdaptiveDetailEnhancement
  kDigitalDetailEnhancement
}

type FlirBosonDriverAgcSettings {
  adeAlphaNoise: Float!
  adeBetaHf: Float!
  adeBetaLf: Float!
  adeBetaMix: Float!
  adeFootRoom: Float!
  adeGain: Float!
  adeHeadRoom: Float!
  adeHighLimit: Float!
  adeHpBendingAmount: Float!
  adeLinearMix: Float!
  adeLowLimit: Float!
  adeLutMax: Float!
  adePaletteHighClipLimit: Float!
  adePaletteLowClipLimit: Float!
  adeSigmaShift: Float!
  dampingFactor: Float!
  detailGain: Float!
  detailHeadroom: Float!
  gamma: Float!
  linearPercent: Float!
  maxGain: Float!
  mode: FlirBosonDriverAgcModeEnum!
  plateauValue: Float!
  smoothingFactor: Float!
  tailRejection: Float!
}

type FlirBosonDriverBosonSettings {
  ffcMode: FlirBosonDriverFfcModeEnum!
  gainMode: FlirBosonDriverGainModeEnum!
}

enum FlirBosonDriverColorlutEnum {
  kArctic
  kBlackHot
  kGlobow
  kGradedFire
  kHottest
  kIronbow
  kLava
  kRainbow
  kRainbowHc
  kWhiteHot
}

enum FlirBosonDriverFfcModeEnum {
  kAutoFfc
  kExternalFfc
  kManualFfc
  kShutterTestFfc
}

enum FlirBosonDriverGainModeEnum {
  kHighGain
  kLowGain
}

enum FlirBosonDriverIsothermBlendingModeEnum {
  kFollowY
  kSolid
  kTransparent
}

enum FlirBosonDriverIsothermColorEnum {
  kBlue
  kCyan
  kGray
  kGreen
  kMagenta
  kRed
  kYellow
}

enum FlirBosonDriverIsothermFillModeEnum {
  kBlendedColor
  kInvalid
  kPalette
}

type FlirBosonDriverIsothermSettings {
  blendMode: FlirBosonDriverIsothermBlendingModeEnum!
  color: FlirBosonDriverIsothermColorEnum!
  cutoffC: Float!
  enable: Boolean!
  fillMode: FlirBosonDriverIsothermFillModeEnum!
  palette: FlirBosonDriverColorlutEnum!
  rangeC: FlirBosonDriverRange!
  type: FlirBosonDriverIsothermTypeEnum!
}

enum FlirBosonDriverIsothermTypeEnum {
  kAbove
  kBelow
  kExcludeInterval
  kIncludeInterval
}

type FlirBosonDriverRange {
  high: Float!
  low: Float!
}

type FlirBosonDriverRoiSettings {
  startX: Float!
  startY: Float!
  stopX: Float!
  stopY: Float!
}

type FlirBosonDriverThermalParams {
  clipRangeC: FlirBosonDriverRange!
  emissivity: Float!
  objectDistanceM: Float!
  relativeHumidity: Float!
  saturationRangeC: FlirBosonDriverRange!
  validRangeC: FlirBosonDriverRange!
  warningRangeC: FlirBosonDriverRange!
}

type GPSLocation implements BaseGPSPosition {
  latitude: Float!
  longitude: Float!
}

input GPSPointInput {
  altitude: Float
  latitude: Float
  longitude: Float
}

type GPSPositionWithAltitude implements Position & BaseGPSPosition {
  altitude: Float!
  frame: SkillsFrameTypeEnum!
  latitude: Float!
  longitude: Float!
  zFrame: SkillsFrameTypeEnum!
}

type GPSPositionWithHeight implements Position & BaseGPSPosition {
  frame: SkillsFrameTypeEnum!
  height: Float!
  heightMode: WaypointHeightMode!
  latitude: Float!
  longitude: Float!
  zFrame: SkillsFrameTypeEnum!
}

scalar GenericScalar

scalar GeoJSON

type GeoModel implements Node {
  created: DateTime
  id: ID!
  location: Geography
  locationEnu: Geography
  modelEnuTSelf: [Float]!
  modelPipelineRunStep: ModelPipelineRunStep
  modelPipelineRunStepId: String
  modified: DateTime
  organizationFiles(before: String, after: String, first: Int, last: Int): OrganizationFileConnection
  organizationId: String!
  source: model_source_enum!
  type: modeltype!
  uuid: String!
}

type GeofenceCylinder {
  center: EigenLcmVector2f!
  heightLimits: GeofenceHeightLimits!
  radius: Float!
}

type GeofenceGeofence {
  shapes: [GeofenceGeofenceShape!]!
  utime: Float!
}

type GeofenceGeofenceShape {
  cylinder: GeofenceCylinder
  frame: SkillsFrameTypeEnum!
  keepOut: Boolean!
  metadata: GeofenceMetadata!
  poly2d: GeofencePolygon
  source: GeofenceGeofenceShapeSource!
}

enum GeofenceGeofenceShapeSource {
  MAVLINK_MISSION
  MAVLINK_PARAM
  UNKNOWN
}

type GeofenceHeightLimits {
  ceiling: Float!
  ceilingEnabled: Boolean!
  floor: Float!
  floorEnabled: Boolean!
  frame: SkillsFrameTypeEnum!
}

type GeofenceMetadata {
  country: String!
  id: String!
}

type GeofencePolygon {
  heightLimits: GeofenceHeightLimits!
  vertices: [EigenLcmVector2f!]!
}

type Geography {
  latitude: Float!
  longitude: Float!
}

type Gimbal implements Node {
  created: DateTime
  displayName: String
  flights(before: String, after: String, first: Int, last: Int): FlightConnection
  gimbalId: String
  gimbalType: gimbaltype!
  id: ID!
  lastSeen: DateTime
  modified: DateTime
  name: String
  notes: String
  organization: Organization
  organizationId: String
  skydioSerial: String!
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
}

type GimbalConnection {
  edges: [GimbalEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GimbalEdge {
  cursor: String!
  node: Gimbal
}

type GimbalGimbalNavTransform {
  hasMatchingNavigationImage: Boolean!
  navTGimbalCameraImu: BodyTrans!
  navTVehicleImu: BodyTrans!
  utime: Float!
}

type GlobalGraphSaveRequest {
  requestUuid: UuidUtilUuid!
  saveType: GlobalGraphSaveRequestSaveType!
  utime: Float!
}

enum GlobalGraphSaveRequestSaveType {
  IMMEDIATE
  WHEN_LANDING
}

type GoogleProtobufInt64Value {
  value: Float!
}

type GoogleProtobufListValue {
  values: [GoogleProtobufValue!]!
}

enum GoogleProtobufNullValue {
  NULL_VALUE
}

type GoogleProtobufStructFieldsEntry {
  key: String!
  value: GoogleProtobufValue!
}

type GoogleProtobufTimestamp {
  nanos: Int!
  seconds: Float!
}

type GoogleProtobufValue {
  boolValue: Boolean
  listValue: GoogleProtobufListValue
  nullValue: GoogleProtobufNullValue
  numberValue: Float
  stringValue: String
  structValue: google_protobuf_Struct
}

type GpsOriginInfo {
  altitude: Float!
  heading: Float!
  latitude: Float!
  longitude: Float!
}

input GpsOriginInfoInput {
  altitude: Float!
  heading: Float!
  latitude: Float!
  longitude: Float!
}

type GpsPb {
  gpsUclock: Float!
}

type Group implements Node {
  controllerReleases(before: String, after: String, first: Int, last: Int): ControllerReleaseConnection
  created: DateTime
  description: String
  enabledForOrg(uuid: String!): Boolean
  enabledForUser(uuid: String!): Boolean
  id: ID!
  isAdminProvisioned: Boolean!
  isObsolete: Boolean
  latestControllerRelease(controllerType: controllertype): ControllerRelease
  latestRelease(vehicleType: vehicletype!): Release
  modified: DateTime
  name: String!
  obsoleteAt: DateTime
  organizations(before: String, after: String, first: Int, last: Int): OrganizationConnection
  owner: String
  released: Boolean!
  releases(before: String, after: String, first: Int, last: Int): ReleaseConnection
  type: GroupType
  userCount: Int
  users(searchTerm: String, before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
}

type GroupConnection {
  edges: [GroupEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GroupEdge {
  cursor: String!
  node: Group
}

type GroupRolloutEntry {
  enabledCount: Int
  orgTier: OrgTierEnum
  totalCount: Int
}

enum GroupSortEnum {
  CREATED_ASC
  CREATED_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  MODIFIED_ASC
  MODIFIED_DESC
  NAME_ASC
  NAME_DESC
  OBSOLETE_AT_ASC
  OBSOLETE_AT_DESC
  OWNER_ASC
  OWNER_DESC
  RELEASED_ASC
  RELEASED_DESC
  TYPE_ASC
  TYPE_DESC
  UUID_ASC
  UUID_DESC
}

enum GroupType {
  FEATURE
  PERMISSION
  RELEASE
  UNKNOWN
}

enum HandhawkMainRadioTypeEnum {
  MICROHARD_1624
  MICROHARD_1800
  NO_RADIO
  SKYDIO_LINK
}

enum HeadingFrameType {
  GPS
  NAV
  NAV_TAKEOFF
  SITE
}

type HyperMastFlagsHelper {
  adsb_rx_PingStationStatus_Enum__CONNECTED(instance: Int = 0): Boolean
  adsb_rx_PingStationStatus_Enum__PING_STATION_STATUS_UNDEFINED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__ATTACHMENT_CONNECTION_INFO_UNDEFINED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__GNSS_ATTACHMENT_CONNECTED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__NIGHT_AUTONOMY_CONNECTED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__PARACHUTE_CONNECTED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__RTK_CONNECTED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__SPEAKERMIC_CONNECTED(instance: Int = 0): Boolean
  attachment_manager_AttachmentConnectionInfo__SPOTLIGHT_CONNECTED(instance: Int = 0): Boolean
  device_node_DeviceNodeStatus_Enum__ENABLED(instance: Int = 0): Boolean
  device_node_DeviceNodeStatus_Enum__UNKNOWN(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__DOCK_CONNECTED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__DOCK_CONNECTION_INFO_UNDEFINED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__DOCK_EVER_CONNECTED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__DOCK_LITE_CONNECTED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__DOCK_LITE_EVER_CONNECTED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__G47_CONNECTED(instance: Int = 0): Boolean
  dock_client_DockConnectionInfo__G47_EVER_CONNECTED(instance: Int = 0): Boolean
  flag_util_FormatType_Enum__ENCODED(instance: Int = 0): Boolean
  flag_util_FormatType_Enum__GENERIC(instance: Int = 0): Boolean
  flag_util_FormatType_Enum__PROTOBUF(instance: Int = 0): Boolean
  flag_util_FormatType_Enum__UNKNOWN(instance: Int = 0): Boolean
  flag_util_SubType_Enum__ACKED_DELTA(instance: Int = 0): Boolean
  flag_util_SubType_Enum__ACKED_ONE_SHOT(instance: Int = 0): Boolean
  flag_util_SubType_Enum__DEFAULT(instance: Int = 0): Boolean
  flag_util_SubType_Enum__DELTA(instance: Int = 0): Boolean
  flag_util_SubType_Enum__ONE_SHOT(instance: Int = 0): Boolean
  flag_util_SubType_Enum__UNKNOWN(instance: Int = 0): Boolean
  flight_deck_VehicleSettings_ObstacleMarginMode__DEFAULT_OBSTACLES(instance: Int = 0): Boolean
  flight_deck_VehicleSettings_ObstacleMarginMode__MINIMAL_OBSTACLES(instance: Int = 0): Boolean
  flight_deck_VehicleSettings_ObstacleMarginMode__NO_OBSTACLES(instance: Int = 0): Boolean
  flight_deck_VehicleSettings_ObstacleMarginMode__REDUCED_OBSTACLES(instance: Int = 0): Boolean
  flight_deck_WifiStatus_WifiRadioTypeRome__RADIO_2_4GHz_ONLY(instance: Int = 0): Boolean
  flight_deck_WifiStatus_WifiRadioTypeRome__RADIO_5GHz_ONLY(instance: Int = 0): Boolean
  flight_deck_WifiStatus_WifiRadioTypeRome__RADIO_DUAL_BAND(instance: Int = 0): Boolean
  flight_deck_WifiStatus_WifiRadioTypeRome__RADIO_UNKNOWN(instance: Int = 0): Boolean
  gimbal_driver_shared_GimbalExtras_Enum__R47_FLASHLIGHT(instance: Int = 0): Boolean
  gimbal_driver_shared_GimbalExtras_Enum__UNKNOWN(instance: Int = 0): Boolean
  iot_api_LogUploadRequest_UploadType__DEBUG_LOGS(instance: Int = 0): Boolean
  iot_api_LogUploadRequest_UploadType__DEBUG_LOGS_R47(instance: Int = 0): Boolean
  iot_api_LogUploadRequest_UploadType__FLIGHT_LOGS(instance: Int = 0): Boolean
  iot_api_LogUploadRequest_UploadType__UNKNOWN(instance: Int = 0): Boolean
  media_sync_speed_test_MediaSyncTestCapability_Enum__ENABLED(instance: Int = 0): Boolean
  media_sync_speed_test_MediaSyncTestCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  nav_cam_reconstruction_SupportedChannels_Enum__FULL_MAPPING_PB(instance: Int = 0): Boolean
  nav_cam_reconstruction_SupportedChannels_Enum__LOAD_PB(instance: Int = 0): Boolean
  nav_cam_reconstruction_SupportedChannels_Enum__UNKNOWN(instance: Int = 0): Boolean
  network_manager_SkydioLinkStatus_Enum__ENABLED(instance: Int = 0): Boolean
  network_manager_SkydioLinkStatus_Enum__UNKNOWN(instance: Int = 0): Boolean
  network_manager_SupportedConnectionMethod_Enum__SKYDIOLINK(instance: Int = 0): Boolean
  network_manager_SupportedConnectionMethod_Enum__UNKNOWN(instance: Int = 0): Boolean
  network_manager_SupportedConnectionMethod_Enum__WIFI(instance: Int = 0): Boolean
  network_utils_SupportedTest_Enum__IPERF(instance: Int = 0): Boolean
  network_utils_SupportedTest_Enum__IPERF_REVERSE(instance: Int = 0): Boolean
  network_utils_SupportedTest_Enum__PCAP(instance: Int = 0): Boolean
  network_utils_SupportedTest_Enum__UNKNOWN(instance: Int = 0): Boolean
  network_utils_SupportedTest_Enum__WIFI_SCAN(instance: Int = 0): Boolean
  nightsense_manager_HasNightAutonomy_Enum__UNKNOWN(instance: Int = 0): Boolean
  nightsense_manager_HasNightAutonomy_Enum__YES(instance: Int = 0): Boolean
  planner_PlannerCapability_Enum__CANCEL_TAKEOFF_TO_HOVER(instance: Int = 0): Boolean
  planner_PlannerCapability_Enum__EDIT_MISSIONS_WITH_INIT_GPS(instance: Int = 0): Boolean
  planner_PlannerCapability_Enum__STOP_AT_STRUCTURE(instance: Int = 0): Boolean
  planner_PlannerCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  planner_PlannerCapability_Enum__VARIABLE_MARGINS(instance: Int = 0): Boolean
  qca_stats_RemoteIdFeatures_Enum__RPIC_GPS_NOT_REQUIRED(instance: Int = 0): Boolean
  qca_stats_RemoteIdFeatures_Enum__UNKNOWN(instance: Int = 0): Boolean
  qca_stats_StationModeFeatures_Enum__UNKNOWN(instance: Int = 0): Boolean
  qca_stats_StationModeFeatures_Enum__UPLOAD_CHANNEL(instance: Int = 0): Boolean
  remote_streaming_SupportedBroadcastTypes_Enum__TRANSLATED(instance: Int = 0): Boolean
  remote_streaming_SupportedBroadcastTypes_Enum__UNKNOWN(instance: Int = 0): Boolean
  remote_streaming_SupportedDCEPMessage_Enum__DATA_CHANNEL_ACK(instance: Int = 0): Boolean
  remote_streaming_SupportedDCEPMessage_Enum__DATA_CHANNEL_OPEN(instance: Int = 0): Boolean
  remote_streaming_SupportedDCEPMessage_Enum__UNKNOWN(instance: Int = 0): Boolean
  remote_streaming_SupportedProtocol__PILOT(instance: Int = 0): Boolean
  remote_streaming_SupportedProtocol__PING(instance: Int = 0): Boolean
  remote_streaming_SupportedProtocol__UNKNOWN(instance: Int = 0): Boolean
  remote_streaming_SupportedSdpExtensions_Enum__TWCC(instance: Int = 0): Boolean
  remote_streaming_SupportedSdpExtensions_Enum__UNKNOWN(instance: Int = 0): Boolean
  remote_streaming_VideoType_Enum__COLOR(instance: Int = 0): Boolean
  remote_streaming_VideoType_Enum__NONE(instance: Int = 0): Boolean
  remote_streaming_VideoType_Enum__THERMAL(instance: Int = 0): Boolean
  skills_NonBackwardsCompatibleMissionType_Enum__MISSION_WITH_NAV_TAKEOFF_WAYPOINTS(instance: Int = 0): Boolean
  skills_NonBackwardsCompatibleMissionType_Enum__MISSION_WITH_SITE_WAYPOINTS(instance: Int = 0): Boolean
  skills_NonBackwardsCompatibleMissionType_Enum__UNKNOWN(instance: Int = 0): Boolean
  skills_SurfaceScanCapability_Enum__RUNMODES_MERGED(instance: Int = 0): Boolean
  skills_SurfaceScanCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  streaming_bitrate_controller_SupportedFeatures_Enum__LTE_DATA_SAVER_TOGGLE(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_AUTH(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_BITRATE_CONFIG(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_SETTING_APN(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_SETTING_BANDS(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_SETTING_FWSWITCH(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__SUPPORTS_WDS_CONFIG(instance: Int = 0): Boolean
  telit_lte_modem_ModemFeatures_Enum__UNKNOWN(instance: Int = 0): Boolean
  telit_lte_modem_ModemType_Enum__kFn980(instance: Int = 0): Boolean
  telit_lte_modem_ModemType_Enum__kFn990(instance: Int = 0): Boolean
  telit_lte_modem_ModemType_Enum__kUnknown(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R3_WIDE(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_CINE(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_INFRARED(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_NARROW(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_NAV(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_TELE(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__R47_WIDE(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__UNKNOWN(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__X2_NARROW(instance: Int = 0): Boolean
  user_camera_SensorModule_Enum__X2_WIDE(instance: Int = 0): Boolean
  vehicle_stats_lite_PoseInformationPublished_Enum__UNKNOWN(instance: Int = 0): Boolean
  vehicle_stats_lite_PoseInformationPublished_Enum__VEHICLE_TRANSFORM_CAMERA(instance: Int = 0): Boolean
  vehicle_stats_lite_PoseInformationPublished_Enum__WORLD_POSESTATE_VEHICLE(instance: Int = 0): Boolean
  vehicle_updates_CloudUpdateCapability_Enum__ENABLED(instance: Int = 0): Boolean
  vehicle_updates_CloudUpdateCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_CloudWaypointRequestIdBlock_Enum__BLOCK_3(instance: Int = 0): Boolean
  waypoints_CloudWaypointRequestIdBlock_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_SupportedChannels_Enum__GLOBAL_GRAPH_SAVE_LOAD_PB(instance: Int = 0): Boolean
  waypoints_SupportedChannels_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_SupportedFlyByWaypointCapability_Enum__TERMINATION_ARGS(instance: Int = 0): Boolean
  waypoints_SupportedFlyByWaypointCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_SupportedGeofenceCapability_Enum__CEILING_AND_FLOOR(instance: Int = 0): Boolean
  waypoints_SupportedGeofenceCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_SupportedRTXCapability_Enum__BACKTRACKING(instance: Int = 0): Boolean
  waypoints_SupportedRTXCapability_Enum__UNKNOWN(instance: Int = 0): Boolean
  waypoints_SupportedRTXCapability_Enum__UP_AND_OVER(instance: Int = 0): Boolean
  weather_station_WeatherStationStatus_Enum__CONNECTED(instance: Int = 0): Boolean
  weather_station_WeatherStationStatus_Enum__WEATHER_STATION_STATUS_UNDEFINED(instance: Int = 0): Boolean
}

type IdentityProviderConfiguration implements Node {
  axonConnectCallbackUri: String
  axonConnectDomain: String
  created: DateTime
  createdBy: String
  displayName: String
  id: ID!
  isOrganizationDefault: Boolean!
  lastModifiedBy: String
  modified: DateTime
  name: String!
  oidcCallbackUrl: String
  oidcInitiateLoginUrl: String
  organizationId: String!
  providerSettings: JSONString!
  providerType: identityprovidertype!
  samlAcsUrl: String
  samlMetadataUrl: String
  uuid: String!
}

type IdentityProviderConfigurationConnection {
  edges: [IdentityProviderConfigurationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IdentityProviderConfigurationEdge {
  cursor: String!
  node: IdentityProviderConfiguration
}

type InitializeGpsAction implements MissionAction {
  _: Boolean
  uuid: String!
}

input InitializeGpsActionInput {
  _: Boolean
}

type InviteUsers {
  errors: [String]
  invitedUsers: [String]
}

type IotApiDeviceHyperMastFlagGroup {
  flags: [IotApiDeviceHyperMastFlagGroupFlag!]!
  updatedAt: GoogleProtobufTimestamp!
}

type IotApiDeviceHyperMastFlagGroupFlag {
  raised: Boolean!
  value: Int!
}

type IotApiDeviceNetworkTest {
  skyperf: IotApiDeviceNetworkTestSkyperfConfig
  wifiScan: QcaStatsWifiScanParams
}

input IotApiDeviceNetworkTestRequest {
  testSpecs: [IotApiDeviceNetworkTestSpec!]
}

type IotApiDeviceNetworkTestResult {
  index: Int!
  params: IotApiDeviceNetworkTest!
  skyperfResult: NetworkUtilsIperfResult
  success: Boolean!
  wifiScanResult: QcaStatsWifiScanResult
}

type IotApiDeviceNetworkTestSkyperfConfig {
  dumpFolder: String!
  sessionDuration: Int!
  sessions: [SkyperfSkyperfSession!]!
}

input IotApiDeviceNetworkTestSpec {
  skyperf: IotApiDeviceNetworkTestSpecSkyperfSpec
}

input IotApiDeviceNetworkTestSpecSkyperfSpec {
  protocols: [SkyperfSkyperfSessionProtocol!]
  reverse: Boolean
  sessionDuration: Int
}

type IotApiDeviceNetworkTestSuite {
  tests: [IotApiDeviceNetworkTest!]!
}

type IotApiDeviceNetworkTestSuiteResult {
  results: [IotApiDeviceNetworkTestResult!]!
}

input IotApiIOTCommand {
  idempotencyKey: String
  missionControlCommand: IotApiMissionControlCommand
  runModeRequestCommand: IotApiRunModeRequestCommand
  source: IotApiIOTCommandCommandSource
  zoomCommand: UserCameraDigitalZoomRequest
}

enum IotApiIOTCommandCommandSource {
  EXTERNAL_API
  MOBILE
  UNKNOWN
  WEB
}

enum IotApiMessageTargetEnum {
  MISSION_PLANNER
  MISSION_RUNNER
}

input IotApiMissionControlCommand {
  missionControl: SkillsMissionControl
  missionTemplateUuid: String
  scheduledMissionUuid: String
  source: IotApiIOTCommandCommandSource
  waypointUuid: String
}

enum IotApiRpicState {
  CONFIRMED
  REJECTED
  REQUESTED
  UNKNOWN
}

enum IotApiRpicUserSessionSessionState {
  ACTIVE
  CONFIRMED
  REJECTED
  REQUESTED
  UNKNOWN
}

input IotApiRunModeRequestCommand {
  runModeRequest: FlightDeckRunModeRequest
}

scalar JSONString

input JiraDataInput {
  description: String!
  descriptionDetails: String
  fixVersions: [String]
  flightId: String
  issueType: String
  labels: [String]
  priority: String
  productAreas: [String]
  project: String!
  summary: String!
  team: String
}

type JobRedisState implements Node {
  errorMessage: String!
  id: ID!
  progressInfo: CloudApiCloudJobProgressInfo!
  state: CloudApiJobRedisStateJobState!
  stateMessage: String!
  timestamp: Float!
  workerId: String!
}

type JobRedisStateConnection {
  edges: [JobRedisStateEdge]!
  pageInfo: PageInfo!
}

type JobRedisStateEdge {
  cursor: String!
  node: JobRedisState
}

type JobStatusReceived {
  organization: Organization
}

enum JoysticksJoysticksFlightModeEnum {
  INVALID
  MODE_1
  MODE_2
  MODE_3
}

type JoysticksJoysticksSettings {
  flightMode: JoysticksJoysticksFlightModeEnum!
  flipTriggers: Boolean!
  horizontalGeofenceDistance: Float!
  horizontalGeofenceEnabled: Boolean!
  rates: JoysticksRates!
  utime: Float!
}

type JoysticksRates {
  ascendSpeed: Float!
  descendSpeed: Float!
  forwardSpeed: Float!
  gimbalPitchRate: Float!
  headingRate: Float!
  lateralSpeed: Float!
}

interface Jwk {
  alg: String!
  kid: String!
  kty: String!
}

type KinesisWebrtcAWSIAMCredentials {
  accessKeyId: String!
  expiration: GoogleProtobufTimestamp!
  secretAccessKey: String!
  sessionToken: String!
}

type KinesisWebrtcKinesisCredentials {
  channelInfo: KinesisWebrtcKinesisSignalingChannel!
  credentials: KinesisWebrtcAWSIAMCredentials!
  utime: Float!
}

type KinesisWebrtcKinesisSignalingChannel {
  channelArn: String!
  channelName: String!
}

enum LandingPadLandingPadTypeEnum {
  APRILTAG_PEDESTAL_REV2
  APRILTAG_VESSEL
  CASE
  G47
  INVALID
  LOGO_DOCK
}

enum LandingPadTrackLandingPadRequestSourceEnum {
  SETUP_FLIGHT
  UNKNOWN
}

type LegacyExternalAPIOrientation {
  gimbalPitchDegrees: Float
  headingDegrees: Float
}

type LegacyExternalAPIPosition {
  frame: String
  latitude: Float
  longitude: Float
  x: Float
  y: Float
  z: Float
  zFrame: String
}

type LegacyExternalAPIWaypoint {
  action: String
  name: String
  orientation: LegacyExternalAPIOrientation
  position: LegacyExternalAPIPosition
  recordAction: String
  transitOrientation: LegacyExternalAPIOrientation
  transitSpeed: Float
  uuid: String
  waitTimeSeconds: Float
}

input LegacyPhotoIntervalSettingsInput {
  customPhotoQuality: Int
  customShutterSpeed: String
  timeInterval: Float
}

enum LicenseStatusEnum {
  ACTIVE
  DEPRECATED
  DEVELOPMENT
  UNKNOWN
}

type LinkDevices {
  accessPoint: AccessPoint
  dock: Dock
  errors: [String]
  unlinkedDevices: [Node]
  vehicle: Vehicle
}

type LivestreamEgress implements Node {
  created: DateTime
  host: String!
  id: ID!
  livestreamEgressSettings(before: String, after: String, first: Int, last: Int): LivestreamEgressSettingsConnection
  modified: DateTime
  uuid: String!
}

type LivestreamEgressConnection {
  edges: [LivestreamEgressEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LivestreamEgressEdge {
  cursor: String!
  node: LivestreamEgress
}

type LivestreamEgressSettings implements Node {
  created: DateTime
  dataEnabled: Boolean!
  enabled: Boolean! @deprecated(reason: "use rtspEnabled and dataEnabled instead")
  externalHost: String
  externalToken: String
  id: ID!
  livestreamEgress: LivestreamEgress!
  modified: DateTime
  rtspEnabled: Boolean!
  uuid: String!
}

type LivestreamEgressSettingsConnection {
  edges: [LivestreamEgressSettingsEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LivestreamEgressSettingsEdge {
  cursor: String!
  node: LivestreamEgressSettings
}

type LivestreamIngressSettings {
  ingressDeployment: CloudApiSkygatewayDeploymentResponse!
}

type LivestreamSettings implements Node {
  created: DateTime
  id: ID!
  livestreamEgressSettings: LivestreamEgressSettings!
  livestreamIngressSettings: LivestreamIngressSettings!
  modified: DateTime
  uuid: String!
}

type Location {
  latitude: Float
  longitude: Float
}

type LocationWithAddress {
  address: String
  latitude: Float!
  longitude: Float!
}

type LoginOverrideCount {
  count: Int!
  displayName: String!
  key: String!
  loginType: UserLoginTypeEnum!
}

type LoginTypes implements Node {
  authEnabled: Boolean!
  created: DateTime
  createdBy: String
  id: ID!
  identityProviderConfiguration: IdentityProviderConfiguration
  identityProviderConfigurationId: String
  isOverride: Boolean!
  lastModifiedBy: String
  loginType: login_type!
  modified: DateTime
  organizationId: String!
  userId: String
  uuid: String!
}

type LoginTypesConnection {
  edges: [LoginTypesEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoginTypesEdge {
  cursor: String!
  node: LoginTypes
}

input LoginTypesUpdate {
  authEnabled: Boolean
  identityProviderConfigurationId: UUID
  loginType: login_type!
}

type Marker implements Node {
  address: String
  area: String
  created: DateTime
  description: String
  eventTime: DateTime
  externalId: String
  externalSource: String
  externalUpdatedAt: DateTime
  externalUuid: String
  id: ID!
  jsonMetadata: GenericScalar
  location: LocationWithAddress
  modified: DateTime
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  organizationId: String!
  resolvedAt: DateTime
  source: MarkerSource!
  status: MarkerStatus
  title: String
  type: MarkerType!
  uuid: String!
  version: Int
}

type MarkerConnection {
  edges: [MarkerEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MarkerEdge {
  cursor: String!
  node: Marker
}

enum MarkerSource {
  AXON
  CUSTOMER_PORTAL
  FUSUS
  INCIDENT
  INCIDENT_LOCATION
  UNKNOWN
}

enum MarkerStatus {
  AXON_BUFFERING
  AXON_DOCKED
  AXON_INACTIVE
  AXON_RECORDING
}

enum MarkerType {
  AXON_BODY_3
  AXON_BODY_4
  AXON_FLEET_3_DUAL_VIEW_CAMERA
  AXON_FLEET_3_EXTERIOR_CAMERA
  AXON_FLEET_3_HUB
  AXON_FLEET_3_INTERIOR_CAMERA
  CUSTOM
  FUSUS_ALPR_CRITICAL_PRIORITY
  FUSUS_ALPR_HIGH_PRIORITY
  FUSUS_ALPR_LOW_PRIORITY
  FUSUS_ALPR_MEDIUM_PRIORITY
  INCIDENT
  INCIDENT_LOCATION_CRITICAL_PRIORITY
  INCIDENT_LOCATION_HIGH_PRIORITY
  INCIDENT_LOCATION_LOW_PRIORITY
  INCIDENT_LOCATION_MEDIUM_PRIORITY
  UNKNOWN
}

interface MediaCapture {
  isSkippable: Boolean!
}

input MediaCaptureInput {
  isSkippable: Boolean!
  mediaCaptureType: MediaCaptureType!
  panoramaType: SkillsPanoramaModeEnum
  takePhoto: TakePhotoInput
}

enum MediaCaptureType {
  TAKE_PANORAMA
  TAKE_PHOTO
}

type MediaMetadata {
  captureUclock: Float!
  captureUtime: Float!
  flightId: String!
  focalLength: [Float!]
  heightPixels: Int!
  opticalCenter: [Float!]
  takeoffUclock: Float!
  vehicleId: String!
  vehicleName: String!
  widthPixels: Int!
}

input MediaSyncSpeedTestFileSpec {
  kind: String!
  size: Int!
}

input MediaSyncSpeedTestRequest {
  files: [MediaSyncSpeedTestFileSpec]!
  testTimeoutSeconds: Int!
}

type MediaSyncSpeedTestResult {
  averageUploadRate: Int
  filesDelivered: Int
  filesFailedToUpload: Int
  raw: String
  responseString: String
  success: Boolean
  testUuid: String
  totalSizeDelivered: Int
  uploadRateSamples: [Int]
}

type MediaSyncSpeedTestResultReceived {
  device: Device
}

type Metadata {
  core: CoreMetadata
  vehicleStats: VehicleStatsMetadata
}

interface MissionAction {
  uuid: String!
}

input MissionActionInput {
  actionType: MissionActionType!
  basicWaypointAction: BasicWaypointActionInput
  initializeGpsAction: InitializeGpsActionInput
  surfaceScanSkillAction: SurfaceScanSkillActionInput
}

enum MissionActionType {
  BASIC_WAYPOINT
  INITIALIZE_GPS
  SURFACE_SCAN_SKILL
}

type MissionExecution implements Node {
  actionResults(actionKey: String, result: actionresulttype, before: String, after: String, first: Int, last: Int): ActionResultConnection
  annotations: Annotation
  created: DateTime
  customerFacingResult: String
  endTime: DateTime
  errorString: String
  failedActionResult: ActionResult
  flight: Flight
  flightId: String!
  id: ID!
  missionSpec: MissionSpec
  missionSpecUuid: String!
  modified: DateTime
  organization: Organization
  organizationId: String!
  result: missionresulttype!
  scheduledMission: ScheduledMission
  scheduledMissionUuid: String
  siteFramePosedPhotoCollection: PosedPhotoCollection
  startTime: DateTime
  uuid: String!
}

type MissionExecutionConnection {
  edges: [MissionExecutionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MissionExecutionEdge {
  cursor: String!
  node: MissionExecution
}

type MissionListUpdated {
  organization: Organization
}

type MissionOnVehicleUpdated {
  vehicle: Vehicle
}

enum MissionResumeOption {
  LOOSE_RESUME
  STRICT_START
}

enum MissionReturnType {
  BACKTRACK
  DIRECT
  INVALID
  UP_AND_OVER
}

type MissionSpec implements Node {
  actions: [MissionAction]
  autoStart: Boolean!
  autonomousAbortMissionOnFailedAction: Boolean!
  awbMode: awb_mode_t
  cachedMissionType: DBMissionTypeEnum
  cachedNumWaypoints: Int
  cachedWaypointLocations: String
  compensationMode: compensation_mode_t
  created: DateTime
  disableStrobeLights: Boolean!
  dockMission: Boolean!
  enableFaultBasedDirectRtd: Boolean!
  estimateReferenceNavTNavTakeoff: JSONString!
  estimatedDuration: Float
  expectedGpsOrigin: GpsOriginInfo
  exposureMode: exposure_mode_t
  globalGraphFileId: String
  id: ID!
  isoMode: iso_mode_t
  json: String
  jsonV1: GenericScalar
  jsonV2(useIntegersForEnums: Boolean = false): GenericScalar
  lostConnectionAction: lostconnectionaction!
  missionExecutions(before: String, after: String, first: Int, last: Int): MissionExecutionConnection
  missionType: MissionType
  modified: DateTime
  navigationModeOverride: navigationmode
  ncpgFile: FlightDataFile
  ncpgFileId: String
  needsGlobalGraph: Boolean!
  needsNcpgInitialization: Boolean!
  numWaypoints: Int
  organizationId: String!
  photoIntervalSettings: PhotoIntervalSettings
  postFailureAction: postmissionaction!
  postMissionAction: postmissionaction!
  recordingMode: recording_mode_t
  returnBehavior: ReturnBehavior
  returnToPathOnResume: Boolean!
  showSkipUi: Boolean!
  spec: SkillsMission
  takeoffPoint: TakeoffPoint
  takeoffPointId: String
  template: MissionTemplate
  templateUuid: String!
  tilesetUrl: String @deprecated(reason: "Use vpsMap.tilesetOrgFile.tilesetUrl instead")
  uuid: String!
  videoBitrateOverride: Int
  vpsMap: VPSMap
  vpsMapRevisionId: String
  waypointLocations: String
  waypoints: [LegacyExternalAPIWaypoint]
}

type MissionSpecConnection {
  edges: [MissionSpecEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MissionSpecEdge {
  cursor: String!
  node: MissionSpec
}

type MissionState {
  missionName: String!
  missionUuid: String!
  scheduledMissionUuid: String!
  stateEnum: SkillsMissionStateMissionStateEnum!
  templateUuid: String!
  utime: Float!
}

type MissionTemplate implements Node {
  annotations: Annotation
  archived: Boolean
  created: DateTime
  currentSpec: MissionSpec
  flight: Flight
  flightId: String
  id: ID!
  isMappingMission: Boolean!
  isPartialPath: Boolean
  missionExecutions(sinceTime: DateTime, beforeTime: DateTime, before: String, after: String, first: Int, last: Int): MissionExecutionConnection
  missionSpecs(before: String, after: String, first: Int, last: Int): MissionSpecConnection
  modified: DateTime
  name: String!
  organizationId: String!
  scheduledMissions(before: String, after: String, first: Int, last: Int): ScheduledMissionConnection
  timezone: String
  updated: DateTime
  users(before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
}

type MissionTemplateConnection {
  edges: [MissionTemplateEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MissionTemplateEdge {
  cursor: String!
  node: MissionTemplate
}

enum MissionType {
  EMPTY
  GPS
  MIXED
  NAV
  SITE
  SURFACE_SCAN
}

type MissionWaypoint {
  orientation: Orientation!
  position: Position!
  preserveArScene: Boolean!
  relocalizationInfo: RelocalizationInfo
}

input MissionWaypointInput {
  orientation: OrientationInput!
  position: PositionInput!
  preserveArScene: Boolean
  relocalizationInfo: RelocalizationInfoInput
}

type ModelAndSourcePhotos {
  model: GeoModel
  modelType: ModelType
  photos: PosedPhotoCollection
}

type ModelPipelineRun implements Node {
  active: Boolean!
  bestModel: GeoModel
  bestModelId: String
  bestPosedPhotoCollection: PosedPhotoCollection
  bestPosedPhotoCollectionId: String
  created: DateTime
  enuTVolumeIntentGeojson: GeoJSON
  flights(before: String, after: String, first: Int, last: Int): FlightConnection
  id: ID!
  locationEnu: Geography
  modified: DateTime
  organizationId: String!
  scanOutputs(before: String, after: String, first: Int, last: Int): ScanOutputConnection
  steps(before: String, after: String, first: Int, last: Int): ModelPipelineRunStepConnection
  structure: Structure
  structureId: String
  uuid: String!
  volumeIntentMaxHeight: Float
  volumeIntentMinHeight: Float
}

type ModelPipelineRunConnection {
  edges: [ModelPipelineRunEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModelPipelineRunEdge {
  cursor: String!
  node: ModelPipelineRun
}

type ModelPipelineRunStep implements Node {
  ancestorSteps(hasPosedPhotoCollection: Boolean, hasModel: Boolean, before: String, after: String, first: Int, last: Int): BasicModelPipelineRunStepConnection
  created: DateTime
  descendantSteps(hasPosedPhotoCollection: Boolean, hasModel: Boolean, before: String, after: String, first: Int, last: Int): BasicModelPipelineRunStepConnection
  extraFiles(before: String, after: String, first: Int, last: Int): ModelPipelineRunStepExtraFileConnection
  geoModel: GeoModel
  id: ID!
  inputSteps(before: String, after: String, first: Int, last: Int): ModelPipelineRunStepConnection
  modelPipelineRun: ModelPipelineRun
  modelPipelineRunId: String
  modified: DateTime
  organizationId: String!
  outputSteps(before: String, after: String, first: Int, last: Int): ModelPipelineRunStepConnection
  posedPhotoCollection: PosedPhotoCollection
  topologicalOrder: Int!
  type: modelpipelinerunsteptype!
  uuid: String!
}

type ModelPipelineRunStepConnection {
  edges: [ModelPipelineRunStepEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModelPipelineRunStepEdge {
  cursor: String!
  node: ModelPipelineRunStep
}

type ModelPipelineRunStepExtraFile implements Node {
  created: DateTime
  flightDataFile: FlightDataFile
  flightDataFileId: String
  id: ID!
  modelPipelineRunStep: ModelPipelineRunStep
  modelPipelineRunStepId: String
  modified: DateTime
  organizationFile: OrganizationFile
  organizationFileId: String
  organizationId: String!
  type: pipelinestepextrafiletype!
  uuid: String!
}

type ModelPipelineRunStepExtraFileConnection {
  edges: [ModelPipelineRunStepExtraFileEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ModelPipelineRunStepExtraFileEdge {
  cursor: String!
  node: ModelPipelineRunStepExtraFile
}

enum ModelType {
  CLOUD
  MESH
  OTHER
  VEHICLE
}

type MoveDevicesToResourceGroup {
  docks: [Dock]
  erroredDevices: [String]
  errors: [String]
  vehicles: [Vehicle]
}

type Mutations {
  addAxonConfig(agencyId: String, clientId: String, clientSecret: String, configurationType: ConfigurationType, defaultUserEmail: String, organizationNodeId: ID, overwrite: Boolean): AddAxonConfig
  addDevicesToResourceGroup(deviceNodeIds: [ID], resourceGroupNodeId: ID!): AddDevicesToResourceGroup
  addSsoCredential(clientId: String, clientSecret: String, credentialType: sso_credential_type!, region: String): AddSsoCredential
  addVehiclesToOperation(operationUuid: UUID!, orgUuid: UUID!, vehicleUuids: [UUID]!): AddVehiclesToOperation
  addWifiSetting(orgId: ID, password: String, priority: Int, ssid: String): AddWifiSetting
  assignUserToMission(mission_template_id: ID!, user_id: ID!): AssignUserToMission
  assignVehicleLicense(licenseId: ID!, vehicleId: ID): AssignVehicleLicense
  assignVehicleToDock(id: ID!, vehicleId: ID): AssignVehicleToDock
  bulkUpsertOperations(flightNodeIds: [ID]!, operationData: OperationInput!, orgNodeId: ID!): BulkUpsertOperations
  cacheMissionSpecInfo(invalidate: Boolean, missionTemplateUuid: UUID!): CacheMissionSpecInfo
  claimDevices(orgId: ID!, skydioSerials: [String]): ClaimDevices
  convertToProto(json: String!, protoType: SupportedProtobufTypes!): ConvertToProto_UNSAFE
  createAlertConfig(alertTargetRules: [AlertTargetRuleInput]!, name: String!, orgUuid: String!, triggerType: trigger_type!, userEmails: [String], webhookId: ID): CreateAlertConfig
  createAnnotation(annotationCategoryId: String, annotationCategoryName: String, description: String, eventTime: DateTime, flightDataFileId: String, flightId: String!, flightUtime: Float, internalMetadata: JSONString, mediaGeojson: GeoJSON, structureId: String, videoUsec: Float): CreateAnnotation
  createAnnotationBatch(annotations: [AnnotationInput]!): CreateAnnotationBatch
  createAnnotationCategory(categoryType: CloudApiAnnotationCategoryTypeAnnotationCategoryTypeEnum, generateColor: Boolean, name: String!, orgId: ID): CreateAnnotationCategory
  createAxonIdentityProvider(agencyDomain: String!, organizationNodeId: ID!): CreateAxonIdentityProvider
  createCloudSimulator(branch: String = "master", containerVersion: String, enableFullFlightLogging: Boolean = true, expiresIn: String, name: String!, orgUuid: String, remoteIdExempt: Boolean, useCloudNode: Boolean = true, vehicleType: SimulatorVehicleTypes = R47): CreateCloudSimulator
  createLivestreamEgress(host: String!): CreateLivestreamEgress
  createLoginType(enabled: Boolean, identityProviderId: ID, loginType: login_type!, organizationId: ID!, userId: ID): CreateLoginType
  createMissionTemplate(missionSpecJson: String!, name: String!, orgId: ID!): CreateMissionTemplate
  createOidcIdentityProvider(clientId: String!, clientSecret: String, metadataJson: JSONString, metadataUrl: String, name: String!, organizationNodeId: ID!, usePkce: Boolean = false): CreateOidcIdentityProvider
  createOperation(operationInput: CreateOperationInput!, orgUuid: UUID!): CreateOperation
  createOrganization(dataLevel: datalevel = 1, name: String, orgTier: orgtier = 0, templateOrgUuid: String): CreateOrganization
  createSamlIdentityProvider(isDefault: Boolean, metadataFile: String, metadataUrl: String, name: String!, organizationNodeId: ID!): CreateSamlIdentityProvider
  createSharedLink(automated: Boolean, expiresAt: DateTime!, name: String, organizationNodeId: ID!, sharedResources: [SharedResourceInput!]!, startsAt: DateTime): CreateSharedLink
  createSimulatorContainerVersion(branch: String!, gitCommit: String!, released: Boolean = false, tag: String!, vehicleType: SimulatorVehicleTypes!): CreateSimulatorContainerVersion
  createVehicleLicense(amount: Int, expiration: DateTime!, licenseType: vehiclelicensetype!, orgId: ID!): CreateVehicleLicense
  createVpsMap(ncpgFileId: String!, orgId: ID!, takeoffPointUuid: String!): CreateVpsMap
  createWebhook(name: String!, orgId: ID!, url: String!): CreateWebhook
  deleteAlertConfig(id: ID!): DeleteAlertConfig
  deleteAnnotation(id: ID): DeleteAnnotation
  deleteAnnotationCategory(id: ID!): DeleteAnnotationCategory
  deleteApiToken(id: ID!): DeleteApiToken
  deleteApnSetting(id: ID!): DeleteApnSetting
  deleteAxonConfig(nodeId: ID): DeleteAxonConfig
  deleteCloudSimulator(vehicleId: String!): DeleteCloudSimulator
  deleteIdentityProviderConfiguration(id: ID!): DeleteIdentityProviderConfiguration
  deleteLoginType(id: ID!): DeleteLoginType
  deleteMarkers(markerUuids: [UUID]!, orgUuid: UUID!): DeleteMarkers
  deleteMediaFiles(excludedFileUuids: [String], fileKinds: [FileKindEnum], fileUuids: [String], flightUuids: [String], organizationUuid: String!, scanUuids: [String]): DeleteMediaFiles
  deleteObsoleteGroup(id: ID): DeleteObsoleteGroup
  deleteOperation(id: ID!): DeleteOperation
  deleteOrganizationLogo(id: ID!): DeleteOrganizationLogo
  deleteResourceGroup(id: ID): DeleteResourceGroup
  deleteScheduledMission(id: ID): DeleteScheduledMission
  deleteSharedLink(id: ID!): DeleteSharedLink
  deleteSimulatorContainerVersion(id: ID!): DeleteSimulatorContainerVersion
  deleteSite(id: ID!): DeleteSite
  deleteSsoCredential(ssoCredentialId: ID!): DeleteSsoCredential
  deleteStructure(id: ID!): DeleteStructure
  deleteVehicleLicense(nodeId: ID): DeleteVehicleLicense
  deleteWebhook(id: ID): DeleteWebhook
  deleteWifiSetting(id: ID): DeleteWifiSetting
  denormalizeLoginTypesForOrg(dryRun: Boolean, organizationUuid: String!, userBatchSize: Int): DenormalizeLoginTypesForOrg
  disableDeviceScheduledMissions(deviceNodeId: ID!, disabled: Boolean!): DisableDeviceScheduledMissions
  duplicateMission(templateUuid: UUID!): DuplicateMission
  duplicateMissionTemplate(missionTemplateId: ID!): DuplicateMissionTemplate
  fetchDronesenseMissions(userId: ID!): FetchDroneSenseMissions
  inviteUsers(emails: [String]!, orgId: ID!, orgPermission: organizationpermission, resourceGroupLinks: [ResourceGroupLinkInput]): InviteUsers
  linkDevices(accessPointId: ID, dockId: ID, vehicleId: ID!): LinkDevices
  moveDevicesToResourceGroup(deviceNodeIds: [ID], resourceGroupNodeId: ID!): MoveDevicesToResourceGroup
  onboardVehicleWithController(alphaPublicKey: String, claimDevice: Boolean, dockType: docktype, skydioSerial: String!, vehicleId: String!, vehicleType: vehicletype): OnboardVehicleWithController
  queueWorkerJob(jobName: String!, queueMessage: String, queueMessageAttributes: String, redisKeyFields: String!): QueueWorkerJob
  queueZipFilesWorkerJob(excludedFileUuids: [String], fileKinds: [FileKindEnum], fileUuids: [String], flightUuids: [String], organizationUuid: String!, outputFilename: String, scanUuid: String): QueueZipFilesWorkerJob
  removeDeviceFromResourceGroup(deviceNodeId: ID!, resourceGroupNodeId: ID!): RemoveDeviceFromResourceGroup
  removeFlightFromResourceGroup(flightsToRemove: [RemoveFlightFromResourceGroupRequestEntry]): RemoveFlightFromResourceGroup
  requestDebugLogUpload(deviceNodeId: ID!): RequestDebugLogUpload
  requestDeviceNetworkTest(deviceNodeId: ID!, testRequest: IotApiDeviceNetworkTestRequest!): RequestDeviceNetworkTest
  requestDeviceReboot(deviceNodeId: ID!, requestReboot: Boolean!): RequestDeviceReboot
  requestDeviceWebTunnel(deviceNodeId: ID): RequestDeviceWebTunnel
  requestFlightLogUpload(deviceNodeId: ID!, flightId: String): RequestFlightLogUpload
  requestFormatSd(formatLogs: Boolean, formatMedia: Boolean, vehicleId: String, vehicleNodeId: ID, vehicleSerial: String): RequestFormatSD
  requestMediaSyncSpeedTest(deviceNodeId: ID!, testRequest: MediaSyncSpeedTestRequest!): RequestMediaSyncSpeedTest
  requestNetworkTest(clientId: String!, testRequest: IotApiDeviceNetworkTestRequest!): RequestNetworkTest
  requestRpicSession(sessionId: String, vehicleId: String): RequestRpicSession
  requestRpicSessionTemporal(vehicleId: String): RequestRpicSessionTemporal
  retryAxonIntegrationForFlightFiles(flightNodeId: ID): RetryAxonIntegrationForFlightFiles
  rolloutGroupToOrgsV2(dryRun: Boolean, enable: Boolean!, excludeDataLevels: [datalevel], excludeGroupUuids: [String], excludeHasDocksOfType: [docktype], excludeHasVehiclesOfType: [vehicletype], groupUuid: String!, includeDataLevels: [datalevel], includeGroupUuids: [String], includeHasDocksOfType: [docktype], includeHasVehiclesOfType: [vehicletype], organizationTiers: [orgtier]!, percentRollout: Int): RolloutGroupToOrgsV2
  rotateSigningKeys(orgNodeId: ID!, usage: signingkeyusage): RotateSigningKeys
  scheduleMission(dockId: String, endTriggers: String, startTriggers: String!, templateUuid: String!, timezone: String, vehicleId: String): ScheduleMission
  scheduleMissionNow(idempotencyKey: String, maxDelaySeconds: Int, skydioSerial: String!, templateUuid: String!): ScheduleMissionNow
  sendDronesenseMissionSelect(callSign: String!, flightId: String!, missionId: String!, userId: ID!, vehicleId: String!): SendDroneSenseMissionSelect
  sendIotCommand(command: IotApiIOTCommand!, organizationUuid: String, siteUuid: String, vehicleId: String): SendIOTCommand
  sendMissionRequest(deviceNodeId: ID!, ignoreVps: Boolean, messageTarget: IotApiMessageTargetEnum, missionNodeId: ID, missionResumeOption: MissionResumeOption): SendMissionRequest
  sendNcpgFileDownloadRequest(deviceNodeId: ID!, missionNodeId: ID!): SendNcpgFileDownloadRequest
  sendRunModeRequestCommand(action: FlightDeckRunModeAction!, deviceNodeId: ID!, requestId: Int, runModeName: String!): SendRunModeRequestCommand
  sendSetupFlightRequest(deviceNodeId: ID!): SendSetupFlightRequest
  setCloudInstanceSettings(cloudInstanceCaCert: String, cloudInstanceUrl: String, id: ID!): SetCloudInstanceSettings
  setDeleteUploadedAxonFiles(deleteUploadedFiles: Boolean!, nodeId: ID!): SetDeleteUploadedAxonFiles
  setDockDesiredState(connectWebrtc: Boolean, dockNodeId: ID!, force: Boolean, webTunnelDesired: Boolean): SetDockDesiredState
  setFlashpackChannel(groupId: ID!, id: ID!): SetFlashpackChannel
  setFlightTelemetryEnabled(enabled: Boolean, id: ID!): SetFlightTelemetryEnabled
  setGroupEnabled(enabled: Boolean!, groupId: ID!, orgUuid: String!): SetGroupEnabled
  setGroupReleased(groupId: ID!, released: Boolean!): SetGroupReleased
  setMediaUploadSettings(deleteAfterUpload: Boolean!, id: ID!, uploadFullLogs: Boolean, uploadImages: Boolean!, uploadNonImageLogs: Boolean, uploadPreviewVideo: Boolean, uploadScans: Boolean!, uploadVideo: Boolean!): SetMediaUploadSettings
  setOrgDefaultLoginTypes(loginTypeUpdates: [LoginTypesUpdate], organizationId: ID!): SetOrgDefaultLoginTypes
  setOrganizationAccountId(nodeId: ID!, salesforceAccountId: String!): SetOrganizationAccountId
  setOrganizationDataLevel(dataLevel: datalevel!, id: ID!): SetOrganizationDataLevel
  setOrganizationEnableRemoteOpsLocation(enabled: Boolean!, orgId: ID!): SetOrganizationEnableRemoteOpsLocation
  setOrganizationName(name: String, id: ID!): SetOrganizationName
  setOrganizationRegion(id: ID!, region: region!): SetOrganizationRegion
  setOrganizationTier(id: ID!, tier: orgtier!): SetOrganizationTier
  setOverrides(overridesMap: GenericScalar!, scopeId: ID!): SetOverrides
  setSiteRpicUser(siteId: String!, userId: String!): SetSiteRpicUser
  setUserDefaultLogin(userId: ID!): SetUserDefaultLogin
  setUserGroupEnabled(enabled: Boolean!, groupId: ID!, userUuid: String!): SetUserGroupEnabled
  setVehicleDesiredState(clientId: String, force: Boolean, ttlSeconds: Int, vehicleNodeId: ID!, videoStreamDesired: Boolean, webTunnelDesired: Boolean, webrtcDesired: Boolean): SetVehicleDesiredState
  setVehicleLivestreamEnabled(enabled: Boolean!, vehicleNodeId: ID!): SetVehicleLivestreamEnabled
  setVehicleTeleoperationEnabled(enabled: Boolean!, vehicleId: String, vehicleNodeId: ID): SetVehicleTeleoperationEnabled
  submitFeedback(jiraData: JiraDataInput, text: String!, url: String!): SubmitFeedback
  submitIntegrationRequest(email: String!, integrationName: String!, name: String!, workflowDescription: String!): SubmitIntegrationRequest
  submitNewIntegrationRequest(applicationName: String!, email: String!, name: String!, workflowDescription: String!): SubmitNewIntegrationRequest
  toggleAxonPoller(enabled: Boolean!, orgUuid: UUID!, taskQueue: String): ToggleAxonPoller
  transferOrgData(dryRun: Boolean, newOrgId: ID!, oldOrgId: ID!): TransferOrgData
  unassignUserFromMission(mission_template_id: ID!, user_id: ID!): UnassignUserFromMission
  unclaimDevice(deviceNodeId: ID!): UnclaimDevice
  updateAccessPoint(name: String, id: ID, notes: String): UpdateAccessPoint
  updateAlertConfig(alertConfigNodeId: ID!, name: String, newAlertTargetRules: [AlertTargetRuleInput], triggerType: trigger_type, userEmails: [String], webhookId: ID): UpdateAlertConfig
  updateAnnotation(annotationCategoryId: String, description: String, eventTime: DateTime, flightUtime: Float, internalMetadata: JSONString, mediaGeojson: GeoJSON, nodeId: ID!, videoUsec: Float): UpdateAnnotation
  updateAnnotationCategory(isCustomerFacing: Boolean!, nodeId: ID!): UpdateAnnotationCategory
  updateAttachment(name: String, id: ID, notes: String): UpdateAttachment
  updateBattery(name: String, id: ID, notes: String): UpdateBattery
  updateCloudSimulator(remoteIdExempt: Boolean, stop: Boolean, vehicleId: String!): UpdateCloudSimulator
  updateController(name: String, id: ID, notes: String): UpdateController
  updateDeviceNetworkSettings(apIp: String, deviceNodeId: ID!, gatewayIp: String, staIp: String): UpdateDeviceNetworkSettings
  updateDeviceSoftware(deviceNodeId: ID!): UpdateDeviceSoftware
  updateDock(apriltagSet: apriltag_set, fiducialId: String, name: String, id: ID, notes: String, position: DockPositionInput, setupDate: DateTime): UpdateDock
  updateGimbal(name: String, id: ID, notes: String): UpdateGimbal
  updateGroup(description: String, id: ID, owner: String): UpdateGroup
  updateLivestreamEgress(host: String, livestreamEgressId: ID!): UpdateLivestreamEgress
  updateLivestreamSettings(egressDataEnabled: Boolean, egressEnabled: Boolean, egressExternalHost: String, egressExternalToken: String, egressId: String, egressRtspEnabled: Boolean, organizationId: ID!): UpdateLivestreamSettings
  updateLoginType(enabled: Boolean, identityProviderId: ID, id: ID!, override: Boolean, userId: ID): UpdateLoginType
  updateMissionTemplate(actionsJson: [String!], archived: Boolean, autoStart: Boolean, dockMission: Boolean, enableDirectRtd: Boolean, enableFaultBasedDirectRtd: Boolean, enableTwilightMode: Boolean, missionSpecJson: String, name: String, id: ID!, photoIntervalSettings: LegacyPhotoIntervalSettingsInput, recordingMode: String, returnSettings: String, returnType: MissionReturnType, timezone: String, videoBitrateOverride: Int): UpdateMissionTemplate
  updateSamlIdentityProvider(isDefault: Boolean, metadataFile: String, metadataUrl: String, name: String, nodeId: ID!): UpdateSamlIdentityProvider
  updateScheduledMission(active: Boolean, dockId: String, endTriggers: String, id: ID!, startTriggers: String, timezone: String, vehicleId: String): UpdateScheduledMission
  updateSensor(name: String, id: ID, notes: String): UpdateSensor
  updateSharedLink(expiresAt: DateTime, name: String, resourceType: SharedResourceType, resourceUuid: String, sharedLinkNodeId: ID!, startsAt: DateTime): UpdateSharedLink
  updateSimulatorContainerVersion(id: ID!, released: Boolean!): UpdateSimulatorContainerVersion
  updateVehicle(name: String, id: ID, notes: String): UpdateVehicle
  updateVehicleLicense(expiration: DateTime, licenseId: ID!): UpdateVehicleLicense
  updateWebhook(name: String, id: ID, url: String): UpdateWebhook
  updateWifiSetting(id: ID, password: String, priority: Int, ssid: String): UpdateWifiSetting
  upsertApiToken(enabled: Boolean, name: String!, id: ID, orgUuid: String, scopes: [CloudApiApiTokenScopesScopesEnum]): UpsertApiToken
  upsertApnSetting(apn: String!, carrier: String!, id: ID, orgId: ID!, password: String, username: String): UpsertApnSetting
  upsertAxonDevices(jsonResponse: String!, orgUuid: UUID!): UpsertAxonDevices
  upsertMarker(input: UpsertMarkerInput!): UpsertMarker
  upsertMission(archived: Boolean, isPartialPath: Boolean, json: String!, orgId: ID!, takeoffPointId: UUID, templateId: UUID, vpsMapId: UUID): UpsertMission
  upsertMissionTemplate(archived: Boolean, missionSpecFields: UpsertMissionSpecInput, name: String, id: ID, orgId: ID, timezone: String): UpsertMissionTemplate
  upsertRemoteOpsLocation(address: String, locationPoint: GPSPointInput, name: String, orgId: ID): UpsertRemoteOpsLocation
  upsertResourceGroup(name: String, orgNodeId: ID!, rgNodeId: ID): UpsertResourceGroup
  upsertSite(address: String, archive: Boolean, clearReturnHeight: Boolean, docks: [TakeoffPointInput], geofence: GeoJSON, geofenceCeilingMeters: Float, geofenceFloorMeters: Float, name: String, orgId: ID, origin: GPSPointInput, positioning: site_positioning, referenceFrame: ReferenceFrameInput, returnHeight: Float, safeLandingPoints: [SafeLandingPointInput], siteId: ID, structures: [StructureInput], zones: [ZoneInput]): UpsertSite
  upsertStructures(siteUuid: String!, structures: [StructureInput]): UpsertStructures
  upsertTransparencyDashboardSettings(additionalLinkTitle: String, additionalLinkUrl: String, dashboardLogoUrl: String, description: String, enabled: Boolean, organizationId: ID!, title: String, vanityUrlPath: String): UpsertTransparencyDashboardSettings
  upsertUser(email: String, firstName: String, lastName: String, loginTypes: [LoginTypesUpdate], nodeId: ID, organizationNotes: String, organizationPermission: organizationpermission, overrideLoginTypes: Boolean, resourceGroupLinks: [ResourceGroupLinkInput]): UpsertUser
  validateAxonConfig(organizationNodeId: ID): ValidateAxonConfig
}

type NavCamReconstructionAddSubjectCamVertexRequest {
  requestUuid: UuidUtilUuid!
  utime: Float!
}

type NavCamReconstructionFullMappingRequest {
  enable: Boolean!
  fileUuid: UuidUtilUuid!
  requestUuid: UuidUtilUuid!
  utime: Float!
}

type NavCamReconstructionPoseId {
  flightId: String!
  utime: Float!
}

type NavPosition implements Position & Base3DCartesianPosition {
  frame: SkillsFrameTypeEnum!
  x: Float!
  y: Float!
  z: Float!
  zFrame: SkillsFrameTypeEnum!
}

input NavPositionInput {
  x: Float!
  y: Float!
  z: Float!
}

union NetworkConnectivityTool = WebRTCNetworkConnectivityTool

type NetworkManagerNetworkIpSettings {
  apIp: String!
  gatewayIp: String!
  staIp: String!
  utime: Float!
}

type NetworkUtilsIperfResult {
  errorString: String!
  jsonResult: String!
}

type NextScheduledMission {
  nextExecutionTime: DateTime
  scheduledMission: ScheduledMission
}

interface Node {
  id: ID!
}

type OnboardVehicleWithController {
  betaPublicKey: String
  dock: Dock
  errors: [String]
  newRegistration: Boolean
  vehicle: Vehicle
}

type Operation implements Node {
  annotations(before: String, after: String, first: Int, last: Int): AnnotationConnection
  created: DateTime
  description: String
  endTime: DateTime
  externalId: String
  flights(before: String, after: String, first: Int, last: Int): FlightConnection
  id: ID!
  markers(before: String, after: String, first: Int, last: Int): MarkerConnection
  modified: DateTime
  organizationId: String!
  sites(before: String, after: String, first: Int, last: Int): SiteConnection
  startTime: DateTime!
  transparencyPublicationStatus: transparencypublicationstatus!
  users(before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
  vehicles(before: String, after: String, first: Int, last: Int): VehicleConnection
}

type OperationConnection {
  edges: [OperationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OperationEdge {
  cursor: String!
  node: Operation
}

input OperationInput {
  annotationCategoryIds: [String]
  description: String
  endTime: DateTime
  externalId: String
  startTime: DateTime
  transparencyPublicationStatus: CloudApiTransparencyPublicationStatusTransparencyPublicationStatusEnum
}

type OrgMarkersUpdated {
  organization: Organization
}

enum OrgTierEnum {
  BETA
  EMPLOYEE
  PROTECTED
  T1
  T2
  T3
  UNKNOWN
}

type Organization implements Node {
  accessPoints(searchTerm: String, accessPointSerial: String, before: String, after: String, first: Int, last: Int): AccessPointConnection
  alertConfigs(alertConfigId: String, searchTerm: String, alertTypes: [alert_type_v2], webhookId: String, userEmail: String, before: String, after: String, first: Int, last: Int): AlertConfigV2Connection
  alertRecords(alertType: alert_type_v2, flightId: String, vehicleId: String, vehicleSerial: String, dockId: String, dockSerial: String, firedSince: DateTime, firedBefore: DateTime, searchTerm: String, missionTemplateId: String, before: String, after: String, first: Int, last: Int): AlertRecordV2Connection
  alertTargetCount(alertTargetInput: [AlertTargetRuleInput]): ComputedAlertTargetCounts
  annotationCategories(annotationCategoryId: String, searchTerm: String, annotationCategoryType: annotationcategorytype, before: String, after: String, first: Int, last: Int): AnnotationCategoryConnection
  annotationCategoryMeta: AnnotationCategoryMeta
  annotations(structureUuid: String, flightDataFileUuid: String, flightUuid: String, annotationCategoryIds: [UUID], before: String, after: String, first: Int, last: Int): AnnotationConnection
  apiTokenCount: Int
  apiTokens(apiTokenId: String, searchTerm: String, createdSortOrder: SortOrder, before: String, after: String, first: Int, last: Int): ApiTokenConnection
  apnSettings(before: String, after: String, first: Int, last: Int): ApnSettingConnection
  attachments(searchTerm: String, attachmentSerial: String, before: String, after: String, first: Int, last: Int): AttachmentConnection
  autoUploadFullLogs: Boolean!
  autoUploadImages: Boolean!
  autoUploadNonImageLogs: Boolean!
  autoUploadPreviewVideo: Boolean!
  autoUploadScans: Boolean!
  autoUploadVideo: Boolean!
  axonConfiguration(configurationType: ConfigurationType): AxonConfiguration
  axonConfigurations(before: String, after: String, first: Int, last: Int): AxonConfigurationConnection
  batteries(searchTerm: String, batterySerial: String, vehicleSerial: String, before: String, after: String, first: Int, last: Int): BatteryConnection
  cloudInstanceCaCert: String
  cloudInstanceUrl: String
  controllers(searchTerm: String, before: String, after: String, first: Int, last: Int): ControllerConnection
  created: DateTime
  dataLevel: datalevel!
  dataUsageRights: datausagerights!
  deleteAfterAutoUpload: Boolean!
  docks(searchTerm: String, dockSerial: String, dockType: docktype, dockId: String, before: String, after: String, first: Int, last: Int): DockConnection
  enableRemoteOpsLocation: Boolean!
  externalApiDocumentationLinks: [ExternalApiDocumentationLink]
  featureFlags: FeatureFlags
  flashpackChannel: Group
  flightDataFiles(vehicle: String, uploadedBefore: DateTime, uploadedSince: DateTime, mediaCapturedBefore: DateTime, mediaCapturedSince: DateTime, flightId: String, kinds: [FileKindEnum], missionTemplateUuid: String, missionExecutionUuid: String, waypointName: String, before: String, after: String, first: Int, last: Int): FlightDataFileConnection
  flights(hasMediaFiles: Boolean, batterySerial: String, vehicleId: String, takeoffUserId: UUID, takeoffBefore: DateTime, takeoffSince: DateTime, flightId: UUID, includeInvalidFlights: Boolean, filterByAnnotationCategoryUuids: [UUID], siteId: String, hasPath: Boolean, transparencyPublicationStatus: CloudApiTransparencyPublicationStatusTransparencyPublicationStatusEnum, before: String, after: String, first: Int, last: Int): FlightConnection
  gimbals(searchTerm: String, gimbalSerial: String, before: String, after: String, first: Int, last: Int): GimbalConnection
  groups(sort: [GroupSortEnum] = [UUID_ASC], before: String, after: String, first: Int, last: Int): OrganizationGroupConnection
  hasOrganizationLogo: Boolean
  id: ID!
  identityProviderConfigurations(before: String, after: String, first: Int, last: Int): IdentityProviderConfigurationConnection
  isFlightTelemetryEnabled: Boolean
  jobStatus(jobName: String, redisKeyFields: String): JobRedisState
  jobStatusSearch(jobName: String, redisKeyFields: String, before: String, after: String, first: Int, last: Int): JobRedisStateConnection
  kindConfigLinks(before: String, after: String, first: Int, last: Int): OrganizationUCONKindConfigLinkConnection
  latestControllerRelease(controllerType: controllertype): ControllerRelease
  latestRelease(vehicleType: vehicletype): Release
  loginOverrideCounts: [LoginOverrideCount]
  loginTypes(orgDefault: Boolean, before: String, after: String, first: Int, last: Int): LoginTypesConnection
  markers(createdAfter: DateTime, createdBefore: DateTime, updatedAfter: DateTime, updatedBefore: DateTime, inside: GeoJSON, before: String, after: String, first: Int, last: Int): MarkerConnection
  missionExecutions(sinceTime: DateTime, beforeTime: DateTime, flightId: String, missionTemplateUuid: String, result: String, vehicleId: String, vehicleSerial: String, dockId: String, dockSerial: String, status: missionresulttype, statuses: [missionresulttype], missionName: String, siteId: String, before: String, after: String, first: Int, last: Int): MissionExecutionConnection
  missionTemplates(searchTerm: String, updatedSince: DateTime, updatedBefore: DateTime, siteId: String, showArchived: Boolean, sortBy: SortBy, before: String, after: String, first: Int, last: Int): MissionTemplateConnection
  modified: DateTime
  name: String!
  networkConnectivityTools: [NetworkConnectivityTool!]!
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  orgFiles(kinds: [FileKindEnum], before: String, after: String, first: Int, last: Int): OrganizationFileConnection
  orgTier: orgtier
  organizationSettings: OrganizationSettings!
  overrides: Overrides
  overridesList: [Override]
  permissionGrantedForProductImprovement: Boolean!
  region: region!
  remoteOpsLocation: RemoteOpsLocation
  remoteOpsLocations(before: String, after: String, first: Int, last: Int): RemoteOpsLocationConnection
  resourceGroups(resourceGroupUuid: String, searchTerm: String, before: String, after: String, first: Int, last: Int): ResourceGroupConnection
  salesforceAccountId: String
  scans(searchTerm: String, userId: UUID, vehicleId: String, scannedBefore: DateTime, scannedSince: DateTime, before: String, after: String, first: Int, last: Int): ScanConnection
  scheduledMissions(searchTerm: String, templateUuid: UUID, before: String, after: String, first: Int, last: Int): ScheduledMissionConnection
  sensors(searchTerm: String, sensorSerial: String, before: String, after: String, first: Int, last: Int): SensorConnection
  sharedResources(resourceTypes: [SharedResourceType], resourceUuid: String, linkExpired: Boolean, linkName: String, sortOrder: SortOrder, startsBefore: DateTime, startsAfter: DateTime, before: String, after: String, first: Int, last: Int): SharedResourceConnection
  signingKeys(isActive: Boolean, keyId: String, before: String, after: String, first: Int, last: Int): SigningKeyConnection
  sites(searchTerm: String, showArchived: Boolean, before: String, after: String, first: Int, last: Int): SiteConnection
  stats(since: DateTime, before: DateTime): OrganizationStats
  structures(siteUuid: String, before: String, after: String, first: Int, last: Int): StructureConnection
  transparencyDashboardSettings: TransparencyDashboardSettings
  userEmailSuffix: String
  userEmailSuffixDefaultOrgPerm: organizationpermission
  users(role: String, roles: [String], uuid: UUID, hasFlightAfterDate: DateTime, hasFlightBeforeDate: DateTime, resourceGroupIds: [String], resourceGroupPermissions: [String], searchTerm: String, loginTypes: [String], before: String, after: String, first: Int, last: Int): UserConnection
  uuid: String!
  vehicleLicenses(expired: Boolean, assigned: Boolean, eligibleForVehicleId: String, before: String, after: String, first: Int, last: Int): VehicleLicenseConnection
  vehicles(flownAfterDate: DateTime, flownBeforeDate: DateTime, vehicleId: String, searchTerm: String, hasMediaFiles: Boolean, eligibleForLicenseType: vehiclelicensetype, vehicleTypes: [vehicletype], pilotEmail: String, isOnline: Boolean, hasGimbalTypes: [gimbaltype], hasAttachmentTypes: [attachmenttype], before: String, after: String, first: Int, last: Int): VehicleConnection
  webhooks(before: String, after: String, first: Int, last: Int): WebhookConnection
  wifiSettings(before: String, after: String, first: Int, last: Int): WifiSettingConnection
}

type OrganizationConnection {
  edges: [OrganizationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

type OrganizationFile implements Node {
  actionResultUuid: String
  bucket: String!
  bucketType: buckettype!
  canDownload: Boolean
  created: DateTime
  downloadUrl: String
  etag: String
  fileUsage: fileusagereason!
  filename: String!
  geoModel: GeoModel
  hasThumbnail: Boolean
  id: ID!
  key: String!
  kind: String!
  mediaCapturedAt: DateTime
  mediaMetadata: JSONString
  missionExecutionUuid: String
  modified: DateTime
  organizationId: String!
  sha1: String
  sizeBytes: Int
  tilesetUrl: String
  uploaded: DateTime
  userId: String
  uuid: String!
}

type OrganizationFileConnection {
  edges: [OrganizationFileEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationFileEdge {
  cursor: String!
  node: OrganizationFile
}

type OrganizationGroupConnection {
  edges: [OrganizationGroupEdge]!
  pageInfo: PageInfo!
}

type OrganizationGroupEdge {
  cursor: String!
  node: Group
  organizationPermission: PermEnum
}

type OrganizationOperationsChanged {
  organization: Organization
}

type OrganizationSettings implements Node {
  created: DateTime
  id: ID!
  livestreamSettings: LivestreamSettings!
  modified: DateTime
  uuid: String!
}

type OrganizationStats {
  activeVehicleFrequencyCount: [VehicleFrequency]
  avgFlightTimeSecondsPerFlight: Int
  avgFlightTimeSecondsPerPilot: Int
  avgFlightsPerDay: Float
  totalActivePilots: Int
  totalFlightTimeSeconds: Int
  totalFlights: Int
}

type OrganizationUCONKindConfigLink implements Node {
  created: DateTime
  fileDeletionPolicy: file_deletion_policy!
  id: ID!
  kind: FileKindEnum!
  modified: DateTime
  organization: Organization
  organizationId: String!
  priority: upload_priority!
  uuid: String!
}

type OrganizationUCONKindConfigLinkConnection {
  edges: [OrganizationUCONKindConfigLinkEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationUCONKindConfigLinkEdge {
  cursor: String!
  node: OrganizationUCONKindConfigLink
}

type Orientation {
  gimbalPitchDegrees: Float @deprecated(reason: "use radians, this field accumulates rounding error over time and will be removed in the future")
  gimbalPitchRadians: Float
  headingDegrees: Float @deprecated(reason: "use radians, this field accumulates rounding error over time and will be removed in the future")
  headingFrame: HeadingFrameType!
  headingRadians: Float
}

input OrientationInput {
  gimbalPitchDegrees: Float
  gimbalPitchRadians: Float
  headingDegrees: Float
  headingFrame: HeadingFrameType!
  headingRadians: Float
}

type Override {
  key: String
  overrideValue: GenericScalar
  scope: Scope
}

type Overrides implements Node {
  created: DateTime
  createdBy: String
  dockId: String
  id: ID!
  modified: DateTime
  organizationId: String!
  overridesMap: JSONString
  siteId: String
  uuid: String!
  vehicleId: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum PermEnum {
  ADMIN
  MEMBER
  MODERATOR
  REMOTE_PILOT
  TESTER
  UNKNOWN
}

type PhotoIntervalSettings {
  customExposureMode: UserCameraExposureModeEnum
  customPhotoQuality: Int
  timeInterval: Float!
}

input PhotoIntervalSettingsInput {
  customExposureMode: UserCameraExposureModeEnum
  customPhotoQuality: Int
  timeInterval: Float!
}

enum PlannerTakeoffProfileTypeEnum {
  DOCK
  DOCK_NIGHT_AUTONOMY
  DOCK_SAFE
  GPS_FLIGHT
  GPS_FLIGHT_HAND_LAUNCH
  JOYSTICK_SHALLOW
  NIGHT_AUTONOMY_SHALLOW
  NIGHT_AUTONOMY_VERTICAL
  SETUP_FLIGHT
  SHALLOW
  UNKNOWN
  VERTICAL
  VESSEL_MODE
}

type Pose implements Node {
  coordinateFrame: CoordinateFrame
  coordinateFrameId: String
  created: DateTime
  headingDegrees: Float!
  id: ID!
  modified: DateTime
  pitchDegrees: Float!
  posedPhoto: PosedPhoto
  posedTag: PosedTag
  rollDegrees: Float!
  safeLandingPoint: SafeLandingPoint
  structure: Structure
  uuid: String!
  xMeters: Float!
  yMeters: Float!
  zMeters: Float!
}

type PoseConnection {
  edges: [PoseEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PoseEdge {
  cursor: String!
  node: Pose
}

type PosedPhoto implements Node {
  created: DateTime
  distortionCoefficients: [Float]
  distortionModel: posedphotodistortionmodel
  flightDataFile: FlightDataFile
  focalLength: [Float]
  id: ID!
  imageSize: [Int]
  location: Geography
  mediaMetadata: MediaMetadata
  modified: DateTime
  organizationFile: OrganizationFile
  organizationId: String!
  pose: Pose
  poseId: String
  posedPhotoCollection: PosedPhotoCollection
  posedPhotoCollectionId: String
  posedPhotoCollectionTSelf: [Float]!
  principalPoint: [Float]
  uuid: String!
}

type PosedPhotoCollection implements Node {
  coordinateFrame: CoordinateFrame
  coordinateFrameId: String
  created: DateTime
  enuTRoot: [Float]
  flight: Flight
  flightId: String
  id: ID!
  locationEnu: Geography
  modelPipelineRunStep: ModelPipelineRunStep
  modelPipelineRunStepId: String
  modified: DateTime
  organizationId: String!
  posedPhotos(before: String, after: String, first: Int, last: Int): PosedPhotoConnection
  posedTags(before: String, after: String, first: Int, last: Int): PosedTagConnection
  source: model_source_enum!
  uuid: String!
}

type PosedPhotoCollectionConnection {
  edges: [PosedPhotoCollectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PosedPhotoCollectionEdge {
  cursor: String!
  node: PosedPhotoCollection
}

type PosedPhotoConnection {
  edges: [PosedPhotoEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PosedPhotoEdge {
  cursor: String!
  node: PosedPhoto
}

type PosedTag implements Node {
  created: DateTime
  id: ID!
  modified: DateTime
  organizationId: String!
  pose: Pose
  poseId: String
  posedPhotoCollection: PosedPhotoCollection
  posedPhotoCollectionId: String
  posedPhotoCollectionTSelf: [Float]!
  tagFamily: posedtagfamily!
  tagId: Int!
  tagInstanceId: Int!
  tagSize: Float
  uuid: String!
}

type PosedTagConnection {
  edges: [PosedTagEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PosedTagEdge {
  cursor: String!
  node: PosedTag
}

interface Position {
  frame: SkillsFrameTypeEnum!
  zFrame: SkillsFrameTypeEnum!
}

input PositionInput {
  altitude: Float
  height: Float
  heightMode: WaypointHeightMode
  isSitePosition: Boolean
  latitude: Float
  longitude: Float
  x: Float
  y: Float
  z: Float
}

enum ProtobufUtilOpEnum {
  EQ
  GE
  GT
  INVALID
  LE
  LT
  NE
}

type QcaStats {
  aniLevel: Int
  channel: Int
  droppedPackets: Int
  noiseFloor1: Int
  noiseFloor2: Int
  ofdmPhyErrors: Int
  phyRate: Int
  rssi1: Int
  rssi2: Int
  snr1: Int
  snr2: Int
}

type QcaStatsWifiScanApInfo {
  bssid: String!
  frequency: Int!
  rssi: Int!
  ssid: String!
}

type QcaStatsWifiScanParams {
  freqList: [Int!]!
  numFreq: Int!
  scanTimeMs: Int!
  ssidList: [String!]!
}

type QcaStatsWifiScanResult {
  apList: [QcaStatsWifiScanApInfo!]!
  utime: Float!
}

type Quaternion {
  w: Float!
  x: Float!
  y: Float!
  z: Float!
}

input QuaternionInput {
  w: Float!
  x: Float!
  y: Float!
  z: Float!
}

type Query {
  accessPoint(accessPointSerial: String!): AccessPoint
  annotationCategories(searchTerm: String, before: String, after: String, first: Int, last: Int): AnnotationCategoryConnection
  attachment(attachmentSerial: String!): Attachment
  attachments(searchTerm: String, attachmentSerial: String, before: String, after: String, first: Int, last: Int): AttachmentConnection
  battery(batterySerial: String!): Battery
  cloudSimulator(vehicleId: String!): CloudSimulatorObject
  controller(controllerId: String!): Controller
  controllers(searchTerm: String, controllerId: String, before: String, after: String, first: Int, last: Int): ControllerConnection
  dock(dockId: String!): Dock
  dockBySerial(dockSerial: String!): Dock
  docks(searchTerm: String, dockId: String, before: String, after: String, first: Int, last: Int): DockConnection
  flashpackChannels(before: String, after: String, first: Int, last: Int): GroupConnection
  flight(uuid: String!): Flight
  flightDataFile(uuid: String!): FlightDataFile
  flightDataFilesFromUuids(uuids: [String]!, before: String, after: String, first: Int, last: Int): FlightDataFileConnection
  flightSearch(search: FlightSearchRequest!, before: String, after: String, first: Int, last: Int): FlightConnection
  flights(searchTerm: String, hasDataFileKinds: [FileKindEnum], flightId: UUID, annotationCategoryUuids: [UUID], before: String, after: String, first: Int, last: Int): FlightConnection
  gimbal(gimbalSerial: String!): Gimbal
  gimbals(searchTerm: String, gimbalSerial: String, before: String, after: String, first: Int, last: Int): GimbalConnection
  groupRollout(groupUuid: String): [GroupRolloutEntry]
  groups(searchTerm: String, groupType: GroupType, excludeGroupTypes: [GroupType], groupUuids: [String], enabledOnOrg: String, isObsolete: Boolean, isReleased: Boolean, before: String, after: String, first: Int, last: Int): GroupConnection
  jobStatus(jobName: String, redisKeyFields: String): JobRedisState
  livestreamEgresses(hostFilter: String, before: String, after: String, first: Int, last: Int): LivestreamEgressConnection
  marker(uuid: String!): Marker
  missionEstimate(missionSpec: String!): SkillsSequenceEstimate
  missionExecution(uuid: String!): MissionExecution
  missionTemplate(uuid: String!): MissionTemplate
  node(id: ID!): Node
  nodeByUuid(type: String!, uuid: String!): Node
  organization(uuid: String!): Organization
  organizations(searchTerm: String, salesforceAccountId: String, groupUuids: [String], excludeGroupUuids: [String], dataLevel: datalevel, excludeDataLevel: datalevel, orgTiers: [orgtier], hasVehicleTypes: [vehicletype], noVehicleOfTypes: [vehicletype], hasDockTypes: [docktype], noDockOfTypes: [docktype], inverseGroupResult: Boolean, before: String, after: String, first: Int, last: Int): OrganizationConnection
  scanPlanTime(surfaceScanSkillAction: SurfaceScanSkillActionInput!): Float
  scanSearch(search: ScanSearchRequest!, before: String, after: String, first: Int, last: Int): ScanConnection
  scans(searchTerm: String, userId: UUID, vehicleId: String, scannedBefore: DateTime, scannedSince: DateTime, before: String, after: String, first: Int, last: Int): ScanConnection
  sensor(sensorSerial: String!): Sensor
  sharedLink(token: String!): SharedLink
  simulatorContainerVersions(vehicleType: SimulatorVehicleTypes = R47, searchTerm: String, released: Boolean, branch: String, before: String, after: String, first: Int, last: Int): SimulatorContainerVersionConnection
  ssoCredentials(uuid: String, credentialType: sso_credential_type, before: String, after: String, first: Int, last: Int): SsoCredentialConnection
  stockDroSettings: StockDroSettings
  structures(before: String, after: String, first: Int, last: Int): StructureConnection
  timezones: [String]
  transparencyDashboardSettings: TransparencyDashboardSettings
  user(uuid: UUID): User
  users(email: String, includeDisabled: Boolean, onlySkydioEmployees: Boolean, searchTerm: String, before: String, after: String, first: Int, last: Int): UserConnection
  vehicle(vehicleId: String!): Vehicle
  vehicleBySerial(skydioSerial: String!): Vehicle
  vehicleLicenseDefinitions: [VehicleLicenseDefinition!]!
  vehicles(searchTerm: String, hasGimbalTypes: [gimbaltype], hasAttachmentTypes: [attachmenttype], before: String, after: String, first: Int, last: Int): VehicleConnection
  vpsMaps(before: String, after: String, first: Int, last: Int): VPSMapConnection
  webhook(uuid: String!): Webhook
}

type QueueWorkerJob {
  errors: [String]
  jobRedisKey: String
}

type QueueZipFilesWorkerJob {
  errors: [String]
  jobRedisKey: String
}

input ReferenceFrameInput {
  headingDegrees: RotationDegrees
  xMeters: ENUOffsetMeters
  yMeters: ENUOffsetMeters
  zMeters: ENUOffsetMeters
}

type RelatedOrganization implements Node {
  dataLevel: datalevel!
  id: ID!
  name: String!
  uuid: String!
}

type RelatedUser implements Node {
  email: String!
  enabled: Boolean!
  firstName: String
  id: ID!
  lastName: String
  loginDefault: Boolean!
  organization: RelatedOrganization
  organizationPermission: organizationpermission!
  uuid: String!
}

type RelatedUserConnection {
  edges: [RelatedUserEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RelatedUserEdge {
  cursor: String!
  node: RelatedUser
}

type Release implements Node {
  active: Boolean!
  created: DateTime
  description: String
  fullFlashpack: FlashpackFile
  id: ID!
  isTemporary: Boolean!
  modified: DateTime
  name: String
  releaseFilesSignature: releasefilessignature!
  releaseKey: String!
  size: Float
  ubuntuSuite: ubuntusuite!
  uuid: String!
  vehicleType: vehicletype!
  version: [Int]
  versionString: String
}

type ReleaseConnection {
  edges: [ReleaseEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ReleaseEdge {
  cursor: String!
  node: Release
}

type ReleaseFile {
  description: String!
  file: DataFile!
  name: String!
  releaseKey: String!
  version: String!
}

type ReleaseUpdate {
  description: String!
  file: DataFile!
  name: String!
  releaseKey: String!
  version: String!
}

type RelocalizationInfo {
  flightId: String!
  navOrientation: Quaternion!
  navPosition: NavPosition!
  utime: Float!
}

input RelocalizationInfoInput {
  flightId: String!
  navOrientation: QuaternionInput!
  navPosition: NavPositionInput!
  utime: Float!
}

type RemoteOpsLocation implements Node {
  address: String
  altitude: Float
  created: DateTime
  id: ID!
  location: Geography
  modified: DateTime
  name: String!
  organization: Organization
  organizationId: String!
  uuid: String!
}

type RemoteOpsLocationConnection {
  edges: [RemoteOpsLocationEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RemoteOpsLocationEdge {
  cursor: String!
  node: RemoteOpsLocation
}

type RemoteStreamingLivekitConfigurationRequest {
  broadcastChannels: SkybusTunnelSubscribedChannelList!
  broadcastVideo: [RemoteStreamingVideoTypeEnum!]!
  broadcastVideoParams: [RemoteStreamingLivekitTrackParams!]!
  enableChannelBroadcast: Boolean!
  openTunnels: [RemoteStreamingLivekitTunnelParams!]!
  uclock: Float!
}

type RemoteStreamingLivekitConnectionStatus {
  clientId: String!
  connected: Boolean!
  enabled: Boolean!
  livekitStats: WebrtcLivekitClientStats!
  openTunnels: [RemoteStreamingLivekitTunnelInfo!]!
  roomId: String!
  signalProxyUrl: String!
  streamedVideoChannels: [String!]!
  streaming: Boolean!
  streamingConfig: [RemoteStreamingLivekitConfigurationRequest!]!
  supportedProtocolMessages: [String!]!
  tickTimeMs: Float!
  utime: Float!
}

type RemoteStreamingLivekitTrackParams {
  dynacastEnabled: Boolean!
  videoType: RemoteStreamingVideoTypeEnum!
}

type RemoteStreamingLivekitTunnelChannelInfo {
  bytesSent: Int!
  eventsCompleted: Int!
  eventsDropped: Int!
  eventsSent: Int!
  name: String!
  numBytesReceived: Float!
}

type RemoteStreamingLivekitTunnelInfo {
  clientId: String!
  isPilot: Boolean!
  readChannels: [RemoteStreamingLivekitTunnelChannelInfo!]!
  tunnelType: RemoteStreamingTunnelTypeEnum!
  writeChannels: [RemoteStreamingLivekitTunnelChannelInfo!]!
}

type RemoteStreamingLivekitTunnelParams {
  clientId: String!
  isPilot: Boolean!
  tunnelType: RemoteStreamingTunnelTypeEnum!
}

enum RemoteStreamingState {
  active
  blocked
  device_offline
  device_unsupported
  disabled
  pending
}

enum RemoteStreamingTunnelTypeEnum {
  DOCK_TO_VEHICLE
  NONE
  PILOT_TO_VEHICLE
  VEHICLE_TO_DOCK
  VEHICLE_TO_PILOT
}

type RemoteStreamingType {
  enabled: Boolean
  error: String
  isPilot: Boolean
  livekitParticipantIdentity: String
  livekitToken(role: SignalProxyLivekitTokenRequestRole): String
  livekitUrl: String
  maxViewerCount: Int
  mobileStreamingState: RemoteStreamingState
  organizationId: String
  signalProxyCredentials: SignalProxySignalProxyConnectionParams
  vehicleId: String
  vehicleStreamingState: RemoteStreamingState
  viewerCount: Int
}

enum RemoteStreamingVideoTypeEnum {
  COLOR
  NONE
  THERMAL
}

type RemoveDeviceFromResourceGroup {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type RemoveFlightFromResourceGroup {
  errors: [String]
  flightsRemoved: [RemoveFlightFromResourceGroupResponseEntry]
}

input RemoveFlightFromResourceGroupRequestEntry {
  flightNodeId: ID!
  rgNodeId: ID!
}

type RemoveFlightFromResourceGroupResponseEntry {
  alertRecords: [AlertRecordV2!]!
  flight: Flight!
  flightDataFiles: [FlightDataFile!]!
  missionExecutions: [MissionExecution!]!
}

type RequestDebugLogUpload {
  device: Device
  errors: [String]
}

type RequestDeviceNetworkTest {
  device: Device
  errors: [String]
}

type RequestDeviceReboot {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type RequestDeviceWebTunnel {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type RequestFlightLogUpload {
  errors: [String]
  vehicle: Vehicle
}

type RequestFormatSD {
  errors: [String]
  vehicle: Vehicle
}

type RequestMediaSyncSpeedTest {
  device: Device
  errors: [String]
  testUuid: String
}

type RequestNetworkTest {
  errors: [String]
  testSuite: IotApiDeviceNetworkTestSuite
}

type RequestRpicSession {
  errors: [String]
}

type RequestRpicSessionTemporal {
  errors: [String]
}

type ResourceGroup implements Node {
  created: DateTime
  docks(searchTerm: String, before: String, after: String, first: Int, last: Int): DockConnection
  id: ID!
  isOrganizationDefault: Boolean!
  modified: DateTime
  name: String!
  organizationId: String!
  sensors(before: String, after: String, first: Int, last: Int): SensorConnection
  sites(before: String, after: String, first: Int, last: Int): SiteConnection
  uuid: String!
  vehicles(searchTerm: String, before: String, after: String, first: Int, last: Int): VehicleConnection
}

type ResourceGroupConnection {
  edges: [ResourceGroupEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ResourceGroupEdge {
  cursor: String!
  node: ResourceGroup
}

input ResourceGroupLinkInput {
  resourceGroupNodeId: ID!
  resourceGroupPermission: organizationpermission!
}

type RetryAxonIntegrationForFlightFiles {
  errors: [String]
  numFilesRequeued: Int
}

type ReturnBehavior {
  directReturnAtEnd: Boolean
  dontReturnOnLostComms: Boolean
  height: Float!
  lostCommsWaitTimeSeconds: Float!
  returnType: MissionReturnType!
  speed: Float
  useRelativeHeight: Boolean!
}

input ReturnBehaviorInput {
  directReturnAtEnd: Boolean
  dontReturnOnLostComms: Boolean
  height: Float!
  lostCommsWaitTimeSeconds: Float!
  returnType: MissionReturnType!
  speed: Float
  useRelativeHeight: Boolean!
}

type RolloutGroupToOrgsV2 {
  dryRun: Boolean
  errors: [String]
  groupName: String
  groupUuid: String
  newState: [GroupRolloutEntry]
  orgsAffectedCount: Int
}

type RotateSigningKeys {
  errors: [String]
  rotatedSigningKeys: [SigningKey]
  signingKeys: [SigningKey]
}

scalar RotationDegrees

type RsaJwk implements Jwk {
  alg: String!
  e: String!
  kid: String!
  kty: String!
  n: String!
}

type SafeLandingPoint implements Node {
  created: DateTime
  id: ID!
  modified: DateTime
  name: String
  organizationId: String!
  pose: Pose!
  poseId: String
  site: Site!
  uuid: String!
}

type SafeLandingPointConnection {
  edges: [SafeLandingPointEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SafeLandingPointEdge {
  cursor: String!
  node: SafeLandingPoint
}

input SafeLandingPointInput {
  name: String
  pose: ENUPoseInput
  removed: Boolean
  uuid: ID
}

type Scan implements Node {
  allOutputs(before: String, after: String, first: Int, last: Int): ScanOutputConnection
  created: DateTime
  id: ID!
  modified: DateTime
  organizationId: String!
  output: ScanOutput
  siteId: String
  uuid: String!
}

type ScanConnection {
  edges: [ScanEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ScanEdge {
  cursor: String!
  node: Scan
}

type ScanOutput implements Node {
  availableModelTypes: [ModelType]
  bestModelWithPhotos(modelType: ModelType): ModelAndSourcePhotos
  created: DateTime
  description: String
  flightDataFiles(kinds: [FileKindEnum], before: String, after: String, first: Int, last: Int): FlightDataFileConnection
  flights(before: String, after: String, first: Int, last: Int): FlightConnection
  id: ID!
  inputId: String!
  modelPipelineRuns(before: String, after: String, first: Int, last: Int): ModelPipelineRunConnection
  modified: DateTime
  name: String
  organizationFiles(kinds: [FileKindEnum], before: String, after: String, first: Int, last: Int): OrganizationFileConnection
  organizationId: String!
  photoCount: Int
  scanId: String!
  scanTime: DateTime
  taskStartTime: DateTime!
  userId: String
  uuid: String!
  viewpointMediaId: String
}

type ScanOutputConnection {
  edges: [ScanOutputEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ScanOutputEdge {
  cursor: String!
  node: ScanOutput
}

type ScanPlannerPlanPoint {
  normal: EigenLcmVector3f!
  point: EigenLcmVector3f!
  status: ScanPlannerPointStatusEnum!
}

enum ScanPlannerPointStatusEnum {
  COVERED
  INVALID
  UNREACHABLE
  WILL_BE_COVERED
}

type ScanPlannerPolygonPrism {
  maxHeight: Float!
  minHeight: Float!
  polygon: StructureScanPolygon!
}

type ScanPlannerScanWaypoint {
  globalMapTCamera: EigenLcmVector3f!
  lookAtPointNormal: ScanPlannerPlanPoint!
  trajInfo: ScanPlannerTrajectoryMotionInfo!
  type: ScanPlannerScanWaypointTypeEnum!
  uuid: UuidUtilUuid!
  verticalViewpointData: ScanPlannerVerticalViewpointData!
  wideBaselineRangeInfo: ScanPlannerWideBaselineRangeInfo!
}

enum ScanPlannerScanWaypointTypeEnum {
  A_STAR
  EXPLORATION
  EXPLORATION_CORRESPONDENCE
  EXPLORATION_COVERAGE
  EXPLORATION_MEASUREMENT
  EXPLORATION_MEASUREMENT_AND_OPTIMIZATION
  EXPLORATION_RANGING
  INVALID
  PHOTO
  SPEED
}

type ScanPlannerSingleOrbitRequest {
  counterClockwise: Boolean!
  gimbalPitch: Float!
  globalMapTCenter: EigenLcmVector3d!
  lookOutwards: Boolean!
  numPhotos: Int!
  radius: Float!
}

enum ScanPlannerStructureColumnTypeEnum {
  FOUR_COLUMNS
  TWO_COLUMNS_LEFT
  TWO_COLUMNS_RIGHT
}

type ScanPlannerTrajectoryMotionInfo {
  distanceMargin: Float!
  gimbalPitchRateLimit: Float!
  hasLargeHeadingChange: Boolean!
  headingRateLimit: Float!
  maxPathSpeed: Float!
  speed: Float!
}

type ScanPlannerVerticalViewpointData {
  heading: Float!
  isLookingVertical: Boolean!
}

type ScanPlannerWideBaselineRangeInfo {
  stereoPairIndex: Float!
  waypointIndex: Float!
}

input ScanSearchRequest {
  maxFlights: Int
  maxPhotos: Int
  minFlights: Int
  minPhotos: Int
  onlyDevLogs: Boolean
  scanEndDate: DateTime
  scanId: String
  scanName: String
  scanSkillStateId: String
  scanStartDate: DateTime
  vehicleName: String
  vehicleTypes: [CloudApiVehicleTypeVehicleTypeEnum]
}

type ScheduleMission {
  errors: [String]
  scheduledMissionEdge: ScheduledMissionEdge
}

type ScheduleMissionNow {
  errors: [String]
  maxDelaySeconds: Int
  missionTemplateUuid: String
  scheduledMissionUuid: String
  vehicle: Vehicle
}

type ScheduledMission implements Node {
  active: Boolean!
  created: DateTime
  deleted: Boolean!
  dock: Dock
  dockId: String
  endTriggers: SchedulesPredicate
  endTriggersJson: String
  fullScheduleSpecJson: String
  id: ID!
  missionExecutions(before: String, after: String, first: Int, last: Int): MissionExecutionConnection
  modified: DateTime
  organizationId: String!
  startTriggers: SchedulesPredicate!
  startTriggersJson: String
  template: MissionTemplate
  templateUuid: String!
  uuid: String!
  vehicle: Vehicle
  vehicleId: String
}

type ScheduledMissionConnection {
  edges: [ScheduledMissionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ScheduledMissionEdge {
  cursor: String!
  node: ScheduledMission
}

type SchedulesBatteryPercentageCondition {
  valueCondition: SchedulesValueCondition!
}

type SchedulesCondition {
  batteryPercentage: SchedulesBatteryPercentageCondition
  dateAndTime: SchedulesDateAndTimeCondition
  dayOfMonth: SchedulesDayOfMonthCondition
  dayOfWeek: SchedulesDayOfWeekCondition
  dummy: SchedulesDummyCondition
  hourOfDay: SchedulesHourOfDayCondition
  lastCompletedMissionUuid: SchedulesLastCompletedMissionUuid
  minuteOfHour: SchedulesMinuteOfHourCondition
  monthOfYear: SchedulesMonthOfYearCondition
  startNow: SchedulesStartNowCondition
  utimeDelay: SchedulesUtimeDelayCondition
  utimeDelayLastMissionCompleted: SchedulesUtimeDelayLastMissionCompletedCondition
  weeklyCalendarEvent: SchedulesWeeklyCalendarEventCondition
}

type SchedulesDateAndTimeCondition {
  timestamp: GoogleProtobufTimestamp!
}

type SchedulesDayOfMonthCondition {
  timeCondition: SchedulesTimeCondition!
}

type SchedulesDayOfWeekCondition {
  timeCondition: SchedulesTimeCondition!
}

type SchedulesDummyCondition {
  state: Boolean!
}

type SchedulesHourOfDayCondition {
  timeCondition: SchedulesTimeCondition!
}

type SchedulesLastCompletedMissionUuid {
  trueOnFirstBoot: Boolean!
  uuid: String!
}

enum SchedulesLogicEnum {
  AND
  OR
}

type SchedulesMinuteOfHourCondition {
  timeCondition: SchedulesTimeCondition!
}

type SchedulesMonthOfYearCondition {
  timeCondition: SchedulesTimeCondition!
}

type SchedulesNextScheduledMission {
  missionDisplayName: String!
  missionTemplateUuid: String!
  scheduledMissionUuid: String!
  secondsUntilTakeoff: Float!
}

type SchedulesPredicate {
  condition: SchedulesCondition
  expression: SchedulesPredicateExpression
  uuid: String!
}

type SchedulesPredicateExpression {
  logic: SchedulesLogicEnum!
  predicates: [SchedulesPredicate!]!
}

type SchedulesStartNowCondition {
  maxUtimeDelay: Float!
}

type SchedulesTimeCondition {
  after: GoogleProtobufInt64Value!
  before: GoogleProtobufInt64Value!
}

type SchedulesUtimeDelayCondition {
  delay: Float!
}

type SchedulesUtimeDelayLastMissionCompletedCondition {
  delay: Float!
}

type SchedulesValueCondition {
  greaterThan: GoogleProtobufInt64Value!
  lessThan: GoogleProtobufInt64Value!
}

type SchedulesWeeklyCalendarEvent {
  dayOfWeek: Int!
  hourOfDay: Int!
  minuteOfHour: Int!
}

type SchedulesWeeklyCalendarEventCondition {
  calendarEvent: SchedulesWeeklyCalendarEvent!
  maxTimeDelaySeconds: Int!
}

enum Scope {
  Dock
  Organization
  Site
  Vehicle
}

enum SemanticAimAimModeEnum {
  DETECTION
  DETECTION_DYNAMIC
  INVALID
  SUBJECT_TRACK
  VISUAL_SERVO
}

type SendDroneSenseMissionSelect {
  errors: [String]
  missionSelection: DroneSenseMissionSelection
}

type SendIOTCommand {
  errors: [String]
  vehicles: [Vehicle!]!
}

type SendMissionRequest {
  errors: [String]
  vehicle: Vehicle
}

type SendNcpgFileDownloadRequest {
  errors: [String]
  vehicle: Vehicle
}

type SendRunModeRequestCommand {
  errors: [String]
  vehicle: Vehicle
}

type SendSetupFlightRequest {
  errors: [String]
  missionTemplate: MissionTemplate
  vehicle: Vehicle
}

type Sensor implements Node {
  created: DateTime
  displayName: String
  dock: Dock
  dockId: String
  id: ID!
  isOnline: String
  modified: DateTime
  name: String
  notes: String
  organizationId: String
  sensorSerial: String
  sensorType: sensortype!
  uuid: String!
}

type SensorConnection {
  edges: [SensorEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SensorEdge {
  cursor: String!
  node: Sensor
}

type SensorsGpsCoordIntegers {
  latitude: Int!
  longitude: Int!
}

type SensorsGpsQualityOverride {
  gpsQualityOverride: SensorsGpsQualityPbEnum!
  overrideEnabled: Boolean!
  utime: Float!
}

enum SensorsGpsQualityPbEnum {
  ACTIVE
  HEALTHY
  INIT
  ORIGIN
  UNKNOWN
  UNRELIABLE
}

type SetCloudInstanceSettings {
  errors: [String]
  organization: Organization
}

type SetDeleteUploadedAxonFiles {
  axonConfiguration: AxonConfiguration
  errors: [String]
}

type SetDockDesiredState {
  dock: Dock
  errors: [String]
}

type SetFlashpackChannel {
  errors: [String]
  organization: Organization
}

type SetFlightTelemetryEnabled {
  errors: [String]
  organization: Organization
}

type SetGroupEnabled {
  errors: [String]
  group: Group
  organization: Organization
}

type SetGroupReleased {
  errors: [String]
  group: Group
}

type SetMediaUploadSettings {
  errors: [String]
  organization: Organization
}

type SetOrgDefaultLoginTypes {
  errors: [String]
  loginTypes: [LoginTypes]
}

type SetOrganizationAccountId {
  errors: [String]
  organization: Organization
}

type SetOrganizationAccountIdCompleted {
  organization: Organization
}

type SetOrganizationDataLevel {
  errors: [String]
  organization: Organization
}

type SetOrganizationEnableRemoteOpsLocation {
  errors: [String]
  organization: Organization
}

type SetOrganizationName {
  errors: [String]
  organization: Organization
}

type SetOrganizationNameCompleted {
  organization: Organization
}

type SetOrganizationRegion {
  errors: [String]
  organization: Organization
}

type SetOrganizationTier {
  errors: [String]
  organization: Organization
}

type SetOverrides {
  dock: Dock
  errors: [String]
  organization: Organization
  site: Site
  vehicle: Vehicle
}

type SetSiteRpicUser {
  site: Site
}

type SetUserDefaultLogin {
  errors: [String]
  user: User
}

type SetUserGroupEnabled {
  errors: [String]
  group: Group
  user: User
}

type SetVehicleDesiredState {
  errors: [String]
  vehicle: Vehicle
}

type SetVehicleLivestreamEnabled {
  errors: [String]
  vehicle: Vehicle
}

type SetVehicleTeleoperationEnabled {
  errors: [String]
  vehicle: Vehicle
}

type ShapeMapBox {
  add: Boolean!
  boxMax: EigenLcmVector3d!
  boxMin: EigenLcmVector3d!
  trans: BodyTrans!
}

type ShapeMapCylinder {
  add: Boolean!
  center: EigenLcmVector3d!
  height: Float!
  radius: Float!
  trans: BodyTrans!
}

type ShapeMapHalfPlane {
  add: Boolean!
  planeUnitNormal: EigenLcmVector3d!
  point: EigenLcmVector3d!
}

type ShapeMapPolygon {
  add: Boolean!
  maxHeight: Float!
  minHeight: Float!
  vertices: [EigenLcmVector2d!]!
}

type ShapeMapShapeMap {
  boxes: [ShapeMapBox!]!
  cylinders: [ShapeMapCylinder!]!
  halfPlanes: [ShapeMapHalfPlane!]!
  polygons: [ShapeMapPolygon!]!
  spheres: [ShapeMapSphere!]!
  utime: Float!
}

type ShapeMapSphere {
  add: Boolean!
  center: EigenLcmVector3d!
  radius: Float!
  trans: BodyTrans!
}

type SharedLink implements Node {
  created: DateTime
  creator: User
  creatorId: String!
  expiresAt: DateTime!
  id: ID!
  modified: DateTime
  name: String
  organization: Organization
  organizationId: String!
  sharedResources(before: String, after: String, first: Int, last: Int): SharedResourceConnection
  startsAt: DateTime
  token: String!
  uuid: String!
}

type SharedLinkRevoked {
  sharedLinkNodeId: ID
}

type SharedLinkUpdated {
  sharedLink: SharedLink
}

type SharedResource implements Node {
  id: ID!
  organizationId: String!
  resourceGroup: ResourceGroup
  resourceType: SharedResourceType
  resourceUuid: String!
  sharedLink: SharedLink
  sharedLinkId: String!
  vehicle: Vehicle
}

type SharedResourceConnection {
  edges: [SharedResourceEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SharedResourceEdge {
  cursor: String!
  node: SharedResource
}

input SharedResourceInput {
  resourceType: SharedResourceType
  resourceUuid: UUID
}

enum SharedResourceType {
  FLIGHT_MEDIA
  INVALID
  LIVESTREAM
  RESOURCE_GROUP
}

enum SignalProxyLivekitTokenRequestRole {
  NONE
  PILOT
  PUBLISHER
  VIEWER
}

type SignalProxySignalProxyConnectionParams {
  token: String
  url: String
}

type SigningKey implements Node {
  algorithm: signingkeyalgorithm!
  created: DateTime
  id: ID!
  isActive: Boolean
  jwk: Jwk
  modified: DateTime
  organizationId: String!
  usage: signingkeyusage!
  uuid: String!
}

type SigningKeyConnection {
  edges: [SigningKeyEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SigningKeyEdge {
  cursor: String!
  node: SigningKey
}

type SimulatorContainerVersion implements Node {
  branch: String!
  created: DateTime
  gitCommit: String!
  id: ID!
  modified: DateTime
  released: Boolean!
  tag: String!
  uuid: String!
  vehicleType: String!
}

type SimulatorContainerVersionConnection {
  edges: [SimulatorContainerVersionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SimulatorContainerVersionEdge {
  cursor: String!
  node: SimulatorContainerVersion
}

type SimulatorDisturbanceRequest {
  constant: EigenLcmVector3d!
  normalDistributionStdev: EigenLcmVector3d!
  randomWalkWind: SimulatorRandomWalkWind!
  sineWaves: [SimulatorPeriodicDisturbance!]!
  squareWaves: [SimulatorPeriodicDisturbance!]!
  type: SimulatorDisturbanceRequestDisturbanceType!
  utime: Float!
  vonKarmanWind: SimulatorVonKarmanWind!
}

enum SimulatorDisturbanceRequestDisturbanceType {
  CLEAR_DISTURBANCES
  FORCE_DISTURBANCE
  TORQUE_DISTURBANCE
  UNKNOWN
  WIND_DISTURBANCE
}

type SimulatorPeriodicDisturbance {
  amplitude: EigenLcmVector3d!
  period: Float!
  phaseOffset: Float!
}

type SimulatorRandomWalk {
  bounds: [SimulatorRandomWalkBound!]!
  components: [SimulatorRandomWalkComponent!]!
  mean: Float!
  noiseDt: Float!
}

type SimulatorRandomWalkBound {
  end: Float!
  start: Float!
}

type SimulatorRandomWalkComponent {
  magnitude: Float!
  timeConstant: Float!
}

type SimulatorRandomWalkWind {
  xyAngle: SimulatorRandomWalk!
  xyMagnitude: SimulatorRandomWalk!
  z: SimulatorRandomWalk!
}

enum SimulatorVehicleTypes {
  G47
  R47
  R47G47
}

type SimulatorVonKarmanWind {
  amplitude: EigenLcmVector3d!
  freeStreamAirSpeed: Float!
  heightAboveGround: Float!
}

type Site implements Node {
  address: String
  archived: Boolean
  coordinateFrameRoot: CoordinateFrameRoot
  coordinateFrameRootId: String
  created: DateTime
  description: String
  id: ID!
  modified: DateTime
  name: String
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  organization: Organization
  organizationId: String!
  originAltitude: Float!
  originPoint: Geography
  overrides: Overrides
  overridesList(returnInheritedOverrides: Boolean = false): [Override]
  polygonCeilingMeters: Float!
  polygonFloorMeters: Float
  polygonGeojson: GeoJSON!
  positioning: site_positioning!
  referenceFrame: CoordinateFrame
  referenceFrameId: String
  returnHeight: Float
  safeLandingPoints(before: String, after: String, first: Int, last: Int): SafeLandingPointConnection
  siteFrame: CoordinateFrame
  takeoffPoints(search: String): [TakeoffPoint]
  user: User
  userId: String
  uuid: String!
  vpsMaps: [VPSMap]
  zones(before: String, after: String, first: Int, last: Int): ZoneConnection
}

type SiteConnection {
  edges: [SiteEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SiteEdge {
  cursor: String!
  node: Site
}

type SitePosition implements Position & Base3DCartesianPosition {
  frame: SkillsFrameTypeEnum!
  isSitePosition: Boolean!
  x: Float!
  y: Float!
  z: Float!
  zFrame: SkillsFrameTypeEnum!
}

type SkillsAcquireGpsActionArgs {
  gotoWaypointActionArgs: SkillsGotoWaypointActionArgs!
}

type SkillsAction {
  actionKey: String!
  actionUuid: String!
  args: SkillsActionArgs!
}

type SkillsActionArgs {
  acquireGps: SkillsAcquireGpsActionArgs
  apriltagSetId: SkillsApriltagSetIdActionArgs
  atvSubjectSpoofAction: SkillsAtvSubjectSpoofActionArgs
  conditional: SkillsConditionalActionArgs
  disableStrobeLights: SkillsDisableStrobeLightsActionArgs
  dockGpsEstimator: SkillsDockGpsEstimatorActionArgs
  dummy: SkillsDummyActionArgs
  eLand: SkillsELandActionArgs
  enableStrobeLights: SkillsEnableStrobeLightsActionArgs
  g47CommandOverride: SkillsG47CommandOverrideActionArgs
  globalGraphControl: SkillsGlobalGraphControlActionArgs
  gotoAndOrbitPoi: SkillsGotoAndOrbitPoiActionArgs
  gotoGpsWaypoint: SkillsGotoGpsWaypointActionArgs
  gotoNavWaypoint: SkillsGotoNavWaypointActionArgs
  gotoWaypoint: SkillsGotoWaypointActionArgs
  initGlobalMap: SkillsInitGlobalMapActionArgs
  initializeGps: SkillsInitializeGpsActionArgs
  inverter: SkillsInverterActionArgs
  isSkippable: Boolean!
  json: String
  keyframeAction: SkillsKeyframeActionArgs
  looper: SkillsLooperActionArgs
  modifySimStateEstimation: SkillsModifySimStateEstimationActionArgs
  ncpgControl: SkillsNcpgControlActionArgs
  orbitPoiAction: SkillsOrbitPoiActionArgs
  overrideGpsQuality: SkillsOverrideGpsQualityActionArgs
  photoOnCompletion: Boolean!
  precomputedSubjectSpoofAction: SkillsPrecomputedSubjectSpoofActionArgs
  registerComplimentaryActions: SkillsRegisterComplimentaryActionsActionArgs
  requestTakeoffProfile: SkillsRequestTakeoffProfileActionArgs
  sequence: SkillsSequenceActionArgs
  setFaultOverride: SkillsSetFaultOverrideActionArgs
  setGimbal: SkillsSetGimbalOrientationArgs
  setObstacleAvoidance: SkillsSetObstacleAvoidanceActionArgs
  skiSubjectSpoofAction: SkillsSkiSubjectSpoofActionArgs
  spoofBatteryLevel: SkillsSpoofBatteryLevelActionArgs
  spoofDisturbanceAction: SkillsSpoofDisturbanceActionActionArgs
  spoofInitialGpsHeading: SkillsSpoofInitialGpsHeadingActionArgs
  spoofJoysticksInputs: SkillsSpoofJoysticksInputsActionArgs
  spoofObstacle: SkillsSpoofObstacleActionArgs
  startVideo: SkillsStartVideoActionArgs
  stopForPhotoInspect: SkillsStopForPhotoInspectActionArgs
  stopVideo: SkillsStopVideoActionArgs
  surfaceScanSkill: SkillsSurfaceScanActionArgs
  switchRecordingMode: SkillsSwitchRecordingModeActionArgs
  takePanorama: SkillsTakePanoramaActionArgs
  takePhoto: SkillsTakePhotoActionArgs
  testDesiredVelocity: SkillsTestDesiredVelocityActionArgs
  testTrackTrajectory: SkillsTestTrackTrajectoryActionArgs
  timedWait: SkillsTimedWaitActionArgs
  togglePhotoIntervalMode: SkillsTogglePhotoIntervalModeActionArgs
  toggleSemanticAim: SkillsToggleSemanticAimActionArgs
  toggleTargetPointExposure: SkillsToggleTargetPointExposureActionArgs
  trackInPlace: SkillsTrackInPlaceActionArgs
  trackLandingPadRequest: SkillsTrackLandingPadRequestActionArgs
  trajectoryInspect: SkillsTrajectoryInspectActionArgs
  unifiedFollow: SkillsUnifiedFollowActionArgs
  updateDockLocationAction: SkillsUpdateDockLocationActionArgs
  updateJoysticksSettings: SkillsUpdateJoysticksSettingsActionArgs
  updateShapeMap: SkillsUpdateShapeMapActionArgs
  updateVehicleSettings: SkillsUpdateVehicleSettingsActionArgs
  waitForVehicleStop: SkillsWaitForVehicleStopActionArgs
  wifiScan: SkillsWifiScanActionArgs
  withinDistance: SkillsWithinDistanceActionArgs
}

type SkillsAllowedEdges {
  loadedPaths: Boolean!
  vehiclePaths: Boolean!
}

type SkillsApriltagSetIdActionArgs {
  timeoutS: Float!
}

enum SkillsAttributeStyle {
  DANGER
  INVALID
  NORMAL
  WARNING
}

type SkillsAtvSubjectSpoofActionArgs {
  accel: Float!
  altitudeOffset: Float!
  decel: Float!
  forward: Boolean!
  length: Float!
  maxSpeed: Float!
  minSpeed: Float!
  numLoops: Int!
  radius: Float!
  reverse: Boolean!
  width: Float!
}

type SkillsBoolSetting {
  field: String!
  value: Boolean!
}

type SkillsCameraSettings {
  awbMode: UserCameraAwbModeEnum!
  compensationMode: UserCameraCompensationModeEnum!
  exposureMode: UserCameraExposureModeEnum!
  isoMode: UserCameraIsoModeEnum!
  recordingMode: UserCameraRecordingModeEnum!
  zoomLevel: Float!
}

type SkillsConditionalActionArgs {
  asynchronous: Boolean!
  conditionArgs: SkillsConditionalArgs!
}

type SkillsConditionalArgs {
  boolParam: Boolean!
  floatParam: Float!
  intParam: Float!
  strParam: String!
}

enum SkillsControlNodeTypeEnumEnum {
  RUN_ALL
  RUN_UNTIL_FAILURE
  RUN_UNTIL_SUCCESS
  UNSPECIFIED
}

type SkillsDisableStrobeLightsActionArgs {
  noArgs: Boolean!
}

type SkillsDockGpsEstimatorActionArgs {
  timeoutS: Float!
}

type SkillsDummyActionArgs {
  name: String!
}

type SkillsELandActionArgs {
  type: SkillsELandActionArgsELandType!
  waitForElandTimeoutS: Float!
}

enum SkillsELandActionArgsELandType {
  AIRHAWK_ONLY
  VIO
}

type SkillsEnableStrobeLightsActionArgs {
  noArgs: Boolean!
}

type SkillsEnumSetting {
  field: String!
  value: Int!
}

type SkillsExtraPhotoMetadata {
  capturePointId: String!
  capturePointName: String!
  structureId: String!
  structureName: String!
}

type SkillsFloatSetting {
  field: String!
  value: Float!
}

type SkillsFrameDetails {
  poseId: NavCamReconstructionPoseId!
}

enum SkillsFrameTypeEnum {
  GLOBAL_MAP
  GPS
  INVALID
  NAV
  NAV_CAM_POSE_GRAPH
  NAV_HEIGHT_ABOVE_GROUND
  NAV_TAKEOFF
  SITE
  WORLD
  WORLD_PILOT_RELATIVE
  WORLD_TAKEOFF
}

enum SkillsFreeLookModeEnum {
  DISABLED
  PAN_AND_TILT
  PAN_ONLY
  TILT_ONLY
  UNKNOWN
}

type SkillsG47CommandOverrideActionArgs {
  keepOpen: Boolean!
  timeoutS: Float!
}

type SkillsGimbalPitch {
  value: Float!
}

enum SkillsGimbalPitchModeEnum {
  CONSTANT_BEGINNING
  CONSTANT_END
  CUSTOM
  GRADUAL
  LOOKAHEAD
  LOOKAT_POINT
  LOOKAT_TARGET
  UNSPECIFIED
}

type SkillsGlobalGraphControlActionArgs {
  save: SkillsGlobalGraphControlActionArgsSave
  timeoutS: Float!
}

type SkillsGlobalGraphControlActionArgsSave {
  saveRequest: GlobalGraphSaveRequest!
  succeedWithDeferredSaveQueuedResponse: Boolean!
}

type SkillsGotoAndOrbitPoiActionArgs {
  customIntercept: SkillsWaypoint!
  interceptMode: SkillsInterceptOrbitPoiModeEnum!
  motionArgs: SkillsMotionArgs!
  orbitArgs: SkillsOrbitPoiActionArgs!
  waypointFreeLookMode: SkillsFreeLookModeEnum!
}

type SkillsGotoGpsWaypointActionArgs {
  freeLookMode: SkillsFreeLookModeEnum!
  motionArgs: SkillsMotionArgs!
  waypoint: SkillsWaypoint!
}

type SkillsGotoNavWaypointActionArgs {
  freeLookMode: SkillsFreeLookModeEnum!
  motionArgs: SkillsMotionArgs!
  waypoint: SkillsWaypoint!
}

type SkillsGotoWaypointActionArgs {
  freeLookMode: SkillsFreeLookModeEnum!
  motionArgs: SkillsMotionArgs!
  ncpgInfo: SkillsNcpgInfo!
  preserveArScene: Boolean!
  waypoint: SkillsWaypoint!
}

type SkillsGpsOriginInfo {
  gpsAltitude: Float!
  gpsHeading: Float!
  lat: Float!
  lon: Float!
}

type SkillsGpsWaypoint {
  altitude: Float!
  gimbalPitch: Float!
  hasAltitude: Boolean!
  hasGimbalPitch: Boolean!
  hasHeading: Boolean!
  heading: Float!
  key: Float!
  latitude: Float!
  longitude: Float!
}

type SkillsGraphMotionArgs {
  allowedEdges: SkillsAllowedEdges!
  slowdownNearTarget: Boolean!
  speed: Float!
  useSpline: Boolean!
}

type SkillsHeading {
  frame: SkillsFrameTypeEnum!
  frameDetails: SkillsFrameDetails!
  value: Float!
}

enum SkillsHeadingModeEnum {
  BACKWARD
  CONSTANT_BEGINNING
  CONSTANT_END
  CUSTOM
  FORWARD
  GRADUAL
  LOOKAHEAD
  LOOKAT_POINT
  LOOKAT_TARGET
  UNSPECIFIED
}

enum SkillsHeightModeEnum {
  CONSTANT_BEGINNING
  CONSTANT_END
  CUSTOM
  GRADUAL
  MAX
  UNSPECIFIED
}

type SkillsInitGlobalMapActionArgs {
  initFromGpsArgs: SkillsInitGlobalMapFromGpsArgs!
  useGps: Boolean!
}

type SkillsInitGlobalMapFromGpsArgs {
  globalMapGpsOrigin: BodyGpsOrigin!
}

type SkillsInitializeGpsActionArgs {
  alwaysSucceed: Boolean!
  noArgs: Boolean!
  returnToStartingPos: Boolean!
}

enum SkillsInterceptOrbitPoiModeEnum {
  CUSTOM
  PERPENDICULAR
  TANGENTIAL
  UNSPECIFIED
}

type SkillsInverterActionArgs {
  action: SkillsAction!
}

type SkillsJoysticksInputs {
  axes: [SkillsUiAxis!]!
  deviceId: String!
  kind: SkillsJoysticksKindEnum!
  utime: Float!
}

enum SkillsJoysticksKindEnum {
  GAMEPAD
  RC_TRANSMITTER
  SKYDIO_STICKS
  UNKNOWN
}

type SkillsKeyframeActionArgs {
  dynamicBraking: Boolean!
  keyframeList: [SkillsKeyframeTrans!]!
  navTTakeoff: BodyTrans!
  poseGraphLogDir: String!
  speed: Float!
}

type SkillsKeyframeTrans {
  flightId: String!
  gimbalRoll: Float!
  orientationPy: EigenLcmVector2d!
  poseGraphVertexUtime: Float!
  position: EigenLcmVector3d!
  unitSpeedTimeAlongTraj: Float!
  utimeAdded: Float!
  vehiclePose: BodyTrans!
}

type SkillsLookAtMotionArgs {
  customGimbalPitch: SkillsGimbalPitch!
  customHeading: SkillsHeading!
  gimbalPitchMode: SkillsGimbalPitchModeEnum!
  headingMode: SkillsHeadingModeEnum!
  ignoreTargetGimbalPitch: Boolean!
  ignoreTargetHeading: Boolean!
  lookatHeight: SkillsPositionZ!
  lookatPoint: SkillsPositionXY!
  targetTLookat: EigenLcmVector3d!
}

type SkillsLooperActionArgs {
  action: SkillsAction!
  maxLoops: Float!
  name: String!
  type: SkillsControlNodeTypeEnumEnum!
}

enum SkillsLostConnectionActionEnumEnum {
  CONTINUE
  HOVER
  RETURN_TO_HOME
  UNKNOWN
  UNSPECIFIED
}

type SkillsMission {
  actions: [SkillsAction!]!
  autoStart: Boolean!
  autonomousAbortMissionOnFailedAction: Boolean!
  awbMode: UserCameraAwbModeEnum!
  compensationMode: UserCameraCompensationModeEnum!
  disableStrobeLights: Boolean!
  displayName: String!
  dockMission: Boolean!
  enableFaultBasedDirectRtd: Boolean!
  estimateReferenceNavTNavTakeoff: BodyTrans!
  expectedGpsOrigin: SkillsGpsOriginInfo!
  exposureMode: UserCameraExposureModeEnum!
  flightId: String!
  globalGraphFileId: String!
  isoMode: UserCameraIsoModeEnum!
  lostConnectionAction: SkillsLostConnectionActionEnumEnum!
  missionRunnerSkill: SkillsMissionSkillEnumEnum!
  navigationModeOverride: FlightDeckNavigationModeMode!
  navigationModeOverrideEnabled: Boolean!
  ncpgFileId: String!
  needsGlobalGraph: Boolean!
  needsGpsInitializationMove: Boolean!
  needsNcpgInitialization: Boolean!
  postFailureAction: SkillsPostMissionActionEnumEnum!
  postMissionAction: SkillsPostMissionActionEnumEnum!
  recordingMode: UserCameraRecordingModeEnum!
  returnToPathOnResume: Boolean!
  rtxSettings: FlightDeckReturnSettings!
  scheduledMissionUuid: String!
  showSkipUi: Boolean!
  skipUpload: Boolean!
  templateUuid: String!
  useAwbMode: Boolean!
  useCompensationMode: Boolean!
  useExposureMode: Boolean!
  useIsoMode: Boolean!
  useRecordingMode: Boolean!
  useRtxSettings: Boolean!
  utime: Float!
  uuid: String!
  videoBitrateOverride: Int!
}

input SkillsMissionControl {
  actionUuid: String
  command: SkillsMissionControlControlType
  utime: Float
}

enum SkillsMissionControlControlType {
  ABORT
  ABORT_AUTONOMOUS
  INVALID
  LAND_IN_PLACE
  PAUSE
  REQUEST_MISSION
  RESUME
  SKIP_TO_WAYPOINT
  START
}

enum SkillsMissionSkillEnumEnum {
  MISSION_RUNNER
  SURFACE_SCAN
}

enum SkillsMissionStateMissionStateEnum {
  ABORTED
  COMPLETED
  ERROR
  IDLE
  IN_PROGRESS
  LOST_CONNECTION
  LOST_CONNECTION_PAUSED
  LOW_BATTERY_RETURN
  PAUSED
  POST_MISSION_ACTION
  POST_MISSION_TASK
  PRETAKEOFF_SEQUENCE
  READY
  RETURNING_TO_FLIGHT_PATH
  UNINITIALIZED
  VEHICLE_PREP
}

type SkillsModifySimStateEstimationActionArgs {
  positionOffset: EigenLcmVector3d!
  velocityOffset: EigenLcmVector3d!
}

type SkillsMotionArgs {
  graphArgs: SkillsGraphMotionArgs!
  lookAtArgs: SkillsLookAtMotionArgs!
  terminationArgs: SkillsWaypointTerminationArgs!
  traversalArgs: SkillsTraversalMotionArgs!
}

type SkillsMotionSettings {
  globalVelocityLimit: Float!
}

type SkillsMovementApiSettings {
  maxGimbalPitchRate: Float!
  maxHeadingRate: Float!
  maxSpeed: Float!
  overridePrecisionFlight: Boolean!
}

type SkillsNcpgControlActionArgs {
  addSubjectCamVertexRequest: NavCamReconstructionAddSubjectCamVertexRequest
  fullMappingRequest: NavCamReconstructionFullMappingRequest
  queueMissionNcpgTask: SkillsQueueMissionNcpgTask
  timeoutS: Float!
}

type SkillsNcpgInfo {
  defaultNavTakeoffTPoseId: BodyTrans!
  defaultNavTrans: BodyTrans!
  poseId: NavCamReconstructionPoseId!
}

enum SkillsObstacleAvoidanceEnumEnum {
  DEFAULT
  DISABLED
  MINIMAL
  REDUCED
  UNSPECIFIED
}

enum SkillsObstacleTypeEnum {
  BOX
  CEILING_FLOOR
  DOORWAY
  SPHERE
  UNKNOWN
  WALL
}

type SkillsOrbitPoiActionArgs {
  gimbalPitch: Float!
  hideAr: Boolean!
  numRotations: Float!
  orbitCenter: SkillsWaypoint!
  radius: Float!
  speed: Float!
}

type SkillsOverrideGpsQualityActionArgs {
  override: SensorsGpsQualityOverride!
}

enum SkillsPanoramaModeEnum {
  HORIZONTAL
  SPHERE
  UNSPECIFIED
  VERTICAL
}

type SkillsPhotoFormat {
  format: String!
}

type SkillsPhotoSettings {
  photoFormat: SkillsPhotoFormat!
  photoQuality: Float!
  photoType: SkillsPhotoType!
  publishThumbnail: Boolean!
  thumbnailWidth: Int!
}

type SkillsPhotoType {
  eoPhoto: Boolean!
  irPhoto: Boolean!
}

type SkillsPhotoWaypointAction {
  takePhoto: SkillsTakePhotoActionArgs
}

type SkillsPositionXY {
  frame: SkillsFrameTypeEnum!
  frameDetails: SkillsFrameDetails!
  x: Float!
  y: Float!
}

type SkillsPositionZ {
  frame: SkillsFrameTypeEnum!
  frameDetails: SkillsFrameDetails!
  value: Float!
}

enum SkillsPostMissionActionEnumEnum {
  DIRECT_RETURN_AND_LAND_AT_DOCK
  DIRECT_RETURN_TO_DOCK
  HAND_CARRY_DISABLE
  HOVER
  LAND_AT_DOCK
  LAND_AT_HOME
  LAND_IN_PLACE
  RETURN_TO_DOCK
  RETURN_TO_HOME
  RETURN_TO_START
  UNKNOWN
  UNSPECIFIED
}

type SkillsPrecomputedSubjectSpoofActionArgs {
  azimuth: Float!
  numLoops: Int!
  positions: [EigenLcmVector3f!]!
  range: Float!
  times: [Float!]!
  velocities: [EigenLcmVector3f!]!
}

type SkillsQueueMissionNcpgTask {
  ncpgFileId: UuidUtilUuid!
}

type SkillsRegisterComplimentaryActionsActionArgs {
  complimentaryActionsToRegister: [ComplimentaryActionsComplimentaryAction!]!
  timeoutS: Float!
}

type SkillsRequestTakeoffProfileActionArgs {
  profileType: PlannerTakeoffProfileTypeEnum!
  timeoutS: Float!
}

type SkillsSequenceActionArgs {
  actions: [SkillsAction!]!
  hideReverseUi: Boolean!
  name: String!
}

type SkillsSequenceEstimate {
  actionUuid: String!
  childSequenceEstimates: [SkillsSequenceEstimate!]!
  distanceTraveled: Float!
  duration: Float!
  finalPosition: SkillsWaypoint!
  name: String!
}

type SkillsSetFaultOverrideActionArgs {
  enable: Boolean!
  faultId: Int!
  faultName: String!
  overrideValue: Boolean!
  waitForOverrideTimeoutS: Float!
}

type SkillsSetGimbalOrientationArgs {
  gimbalPitch: Float!
  gimbalRoll: Float!
}

type SkillsSetObstacleAvoidanceActionArgs {
  oaSetting: SkillsObstacleAvoidanceEnumEnum!
}

type SkillsSkiSubjectSpoofActionArgs {
  altitudeOffset: Float!
  length: Float!
  maxSpeed: Float!
  minSpeed: Float!
  numberOfTurns: Int!
  slopeAngle: Float!
  width: Float!
}

type SkillsSpoofBatteryLevelActionArgs {
  batteryLevel: Float!
}

type SkillsSpoofDisturbanceActionActionArgs {
  disturbanceRequest: SimulatorDisturbanceRequest!
}

type SkillsSpoofInitialGpsHeadingActionArgs {
  heading: Float!
  headingSigma: Float!
}

type SkillsSpoofJoysticksInputsActionArgs {
  durationS: Float!
  inputs: SkillsJoysticksInputs!
}

type SkillsSpoofObstacleActionArgs {
  spoofObstacleInternal: SkillsSpoofObstacleInternal!
}

type SkillsSpoofObstacleInternal {
  alwaysSpoof: Boolean!
  boxMaxPoint: EigenLcmVector3d!
  boxMinPoint: EigenLcmVector3d!
  distanceAhead: Float!
  length: Float!
  obstacleType: SkillsObstacleTypeEnum!
  position: Float!
  radius: Float!
  timeAhead: Float!
  utime: Float!
  width: Float!
  yzPlane: Boolean!
}

type SkillsStartVideoActionArgs {
  awbMode: UserCameraAwbModeEnum! @deprecated(reason: "Related protobuf field has been deprecated")
  cameraSettings: SkillsCameraSettings!
  exposureMode: UserCameraExposureModeEnum! @deprecated(reason: "Related protobuf field has been deprecated")
  isoMode: UserCameraIsoModeEnum! @deprecated(reason: "Related protobuf field has been deprecated")
}

type SkillsStopForPhotoInspectActionArgs {
  frame: SkillsFrameTypeEnum!
  motionSettings: SkillsMotionSettings!
  photoWaypointAction: SkillsPhotoWaypointAction!
  scanWaypoints: [ScanPlannerScanWaypoint!]!
}

type SkillsStopVideoActionArgs {
  noArgs: Boolean!
}

type SkillsSurfaceScanActionArgs {
  inspectionParameters: SurfaceScanInspectionParameters!
  resumeScan: Boolean!
  saveName: String!
  saveUclock: Float!
  scanModeLabel: String!
  scanSkillStateId: String!
  settingsKeys: [String!]!
  settingsManager: SurfaceScanSettingsManager!
  siteName: String!
  stats: SkillsUiStatsView!
}

type SkillsSwitchRecordingModeActionArgs {
  recordingMode: UserCameraRecordingModeEnum!
}

type SkillsTakePanoramaActionArgs {
  cameraSettings: SkillsCameraSettings!
  panoramaMode: SkillsPanoramaModeEnum!
  photoSettings: SkillsPhotoSettings!
}

type SkillsTakePhotoActionArgs {
  cameraSettings: SkillsCameraSettings!
  extraMetadata: SkillsExtraPhotoMetadata!
  photoSettings: SkillsPhotoSettings!
  photoType: SkillsPhotoType!
}

type SkillsTestDesiredVelocityActionArgs {
  description: String!
  durationSeconds: Float!
  headingAtStart: Float!
  headingRate: Float!
  pitchRate: Float!
  settings: SkillsMovementApiSettings!
  velocity: EigenLcmVector3f!
  velocityFrame: SkillsVelocityFrameEnum!
  waitForHeading: Float!
}

type SkillsTestTrackTrajectoryActionArgs {
  maxAcceleration: Float!
  positionAggressiveness: Float!
  settings: SkillsMovementApiSettings!
  velocityAggressiveness: Float!
  waypoints: [SkillsTrackTrajectoryWaypoint!]!
}

type SkillsTimedWaitActionArgs {
  timeout: SkillsTimeout!
}

type SkillsTimeout {
  value: Float!
}

type SkillsTogglePhotoIntervalModeActionArgs {
  cameraSettings: SkillsCameraSettings!
  enable: Boolean!
  exposureMode: UserCameraExposureModeEnum!
  photoFormat: SkillsPhotoFormat!
  photoQuality: Float!
  photoSettings: SkillsPhotoSettings!
  photoType: SkillsPhotoType!
  rangeInterval: Float!
  timeInterval: Float!
  useRangeInterval: Boolean!
  useTimeInterval: Boolean!
}

type SkillsToggleSemanticAimActionArgs {
  aimMode: SemanticAimAimModeEnum!
  detectionClass: DetectionDetectionClassEnum!
  numberFramesToAggregate: Float!
  toggleOn: Boolean!
}

type SkillsToggleTargetPointExposureActionArgs {
  enable: Boolean!
  navTTarget: EigenLcmVector3d!
  targetRadius: Float!
  timeInterval: Float!
}

type SkillsTrackInPlaceActionArgs {
  name: String!
}

type SkillsTrackLandingPadRequestActionArgs {
  enableImageSpace: Boolean!
  enableTracker: Boolean!
  landingPadType: LandingPadLandingPadTypeEnum!
  source: LandingPadTrackLandingPadRequestSourceEnum!
  timeoutS: Float!
  waitForActiveTrack: Boolean!
}

type SkillsTrackTrajectoryWaypoint {
  position: EigenLcmVector3f!
  speed: Float!
}

type SkillsTrajectoryInspectActionArgs {
  frame: SkillsFrameTypeEnum!
  scanWaypoints: [ScanPlannerScanWaypoint!]!
  trajectoryActionPlanSettings: TrajectoryActionPlannerPlanSettings!
}

type SkillsTraversalMotionArgs {
  ascendSpeed: Float!
  customArgs: SkillsPositionZ
  descendSpeed: Float!
  heightMode: SkillsHeightModeEnum!
  ignoreWaypointZ: Boolean!
  maxArgs: SkillsPositionZ
  speed: Float!
  usePathfinder: Boolean!
}

type SkillsUiAxis {
  axis: SkillsUiInputAxisEnum!
  value: Float!
}

enum SkillsUiInputAxisEnum {
  ACTION_WHEEL_1
  ACTION_WHEEL_2
  ACTION_WHEEL_3
  AZIMUTH_BUTTONS
  A_BUTTON
  B_BUTTON
  CUSTOM_1
  CUSTOM_2
  CUSTOM_3
  C_BUTTON
  DOWN_ARROW
  FORWARD
  HEIGHT_BUTTONS
  HEIGHT_SLIDER
  HOME_BUTTON
  LEFT_ARROW
  LEFT_SHIFTER
  LEFT_SHOULDER
  LEFT_STICK_X
  LEFT_STICK_Y
  LEFT_TRIGGER
  MAGIC_BUTTON
  MENU_BUTTON
  MINUS_BUTTON
  PITCH
  PLUS_BUTTON
  RANGE_BUTTONS
  RANGE_SLIDER
  RIGHT
  RIGHT_ARROW
  RIGHT_SHIFTER
  RIGHT_SHOULDER
  RIGHT_STICK_X
  RIGHT_STICK_Y
  RIGHT_TRIGGER
  SNSR_SLEW
  START_BUTTON
  STEERING_STICK_X
  STEERING_STICK_Y
  STOP_BUTTON
  STRAFE_BUTTONS
  STRAFING_STICK_X
  STRAFING_STICK_Y
  UP
  UP_ARROW
  X_BUTTON
  YAW
  YAW_BUTTONS
  Y_BUTTON
  Z_BUTTON
}

type SkillsUiStat {
  label: String!
  style: SkillsAttributeStyle!
  value: String!
}

type SkillsUiStatsView {
  id: String!
  stats: [SkillsUiStat!]!
}

type SkillsUnifiedFollowActionArgs {
  azimuth: Float!
  classification: DetectionDetectionClassEnum!
  range: Float!
}

type SkillsUpdateDockLocationActionArgs {
  navTUpdatedDock: BodyTrans!
}

type SkillsUpdateJoysticksSettingsActionArgs {
  settings: JoysticksJoysticksSettings!
}

type SkillsUpdateShapeMapActionArgs {
  relativeToVehicle: Boolean!
  shapeMap: ShapeMapShapeMap!
}

type SkillsUpdateVehicleSettingsActionArgs {
  boolSettings: [SkillsBoolSetting!]!
  enumSettings: [SkillsEnumSetting!]!
  floatSettings: [SkillsFloatSetting!]!
  returnSettings: FlightDeckReturnSettings!
}

enum SkillsVelocityFrameEnum {
  BODY
  NAV
}

type SkillsWaitForVehicleStopActionArgs {
  angvelTol: Float!
  settleDurationS: Float!
  timeoutS: Float!
  velTol: Float!
}

type SkillsWaypoint {
  gimbalPitch: SkillsGimbalPitch!
  heading: SkillsHeading!
  xy: SkillsPositionXY!
  z: SkillsPositionZ!
}

enum SkillsWaypointFrameTypeEnum {
  GLOBAL_MAP
  GPS
  NAV
  NAV_CAM_POSE_GRAPH
  NAV_HEIGHT_ABOVE_GROUND
  NAV_TAKEOFF
  SITE
  UNKNOWN
  WORLD
  WORLD_PILOT_RELATIVE
  WORLD_TAKEOFF
}

type SkillsWaypointTerminationArgs {
  xyPositionThreshold: Float!
  zPositionThreshold: Float!
}

type SkillsWifiScanActionArgs {
  durationMs: Float!
  ssidList: [String!]!
}

type SkillsWithinDistanceActionArgs {
  distance: Float!
}

enum SkybusTunnelQosClassEnum {
  BACKGROUND
  BEST_EFFORT
  INVALID
  VIDEO
  VOICE
}

type SkybusTunnelSubscribedChannel {
  channel: String!
  downsampleLowThrottleDt: Float!
  downsampleNominalDt: Float!
  fecCodeRate: Float!
  protocol: SkybusTunnelSubscribedChannelProtocol!
  qos: SkybusTunnelQosClassEnum!
}

type SkybusTunnelSubscribedChannelList {
  channels: [SkybusTunnelSubscribedChannel!]!
  clientId: String!
  maxSupportedVersion: SkybusTunnelTunnelProtocolVersionEnum!
  minSupportedVersion: SkybusTunnelTunnelProtocolVersionEnum!
  nonce: Int!
  utime: Float!
}

enum SkybusTunnelSubscribedChannelProtocol {
  DEFAULT_PROTOCOL
  LOGGING_ONLY
}

enum SkybusTunnelTunnelProtocolVersionEnum {
  UNKNOWN
  V1
  V2
}

type SkyperfSkyperfSession {
  hostname: String!
  port: Int!
  protocol: SkyperfSkyperfSessionProtocol!
  reverse: Boolean!
}

enum SkyperfSkyperfSessionProtocol {
  TCP
  UDP
}

enum SortBy {
  Activity
  Modified
  Name
}

enum SortOrder {
  Asc
  Desc
}

type SsoCredential implements Node {
  clientId: String!
  created: DateTime
  id: ID!
  modified: DateTime
  region: String
  type: sso_credential_type!
  uuid: String!
}

type SsoCredentialConnection {
  edges: [SsoCredentialEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SsoCredentialEdge {
  cursor: String!
  node: SsoCredential
}

type StartRecording {
  _: Boolean
}

type StockDroSettings {
  captureSettings: FlightDeckCaptureSettings
  irCaptureSettings: FlightDeckIrCaptureSettings
  vehicleSettings: FlightDeckVehicleSettings
}

type StopRecording {
  _: Boolean
}

type Structure implements Node {
  annotations: Annotation
  box: Box
  created: DateTime
  enuTPrismGeojson: GeoJSON
  id: ID!
  location: Geography
  locationEnu: Geography
  modelPipelineRuns(before: String, after: String, first: Int, last: Int): ModelPipelineRunConnection
  modified: DateTime
  name: String
  organizationId: String!
  pose: Pose
  poseId: String
  prismMaxHeight: Float
  prismMinHeight: Float
  site: Site
  uuid: String!
}

type StructureBox {
  depth: Float!
  height: Float!
  width: Float!
}

enum StructureCategoryEnum {
  GENERIC
  INVALID
  PERSON
  TRANSMISSION_INSULATOR
  TRANSMISSION_TOWER
  VEHICLE
  WAREHOUSE_BAY
}

type StructureConnection {
  edges: [StructureEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type StructureCylinder {
  height: Float!
  radius: Float!
}

type StructureEdge {
  cursor: String!
  node: Structure
}

type StructureFrame {
  gpsOrigin: SkillsGpsWaypoint!
  type: SkillsWaypointFrameTypeEnum!
}

type StructureGeometry {
  box: StructureBox!
  cylinder: StructureCylinder!
  geometryType: StructureGeometryTypeEnum!
}

enum StructureGeometryTypeEnum {
  BOX
  CYLINDER
  POINT
  UNKNOWN
}

input StructureInput {
  box: BoxInput
  name: String
  pose: ENUPoseInput
  removed: Boolean
  uuid: String
}

type StructureObject {
  frame: StructureFrame!
  frameTObject: BodyTrans!
  geometry: StructureGeometry!
}

type StructureScanPolygon {
  vertices: [EigenLcmVector2f!]!
}

type StructureStructure {
  category: StructureCategoryEnum!
  description: String!
  metadata: String!
  name: String!
  object: StructureObject!
  siteId: UuidUtilUuid!
  utime: Float!
  uuid: UuidUtilUuid!
}

type SubmitFeedback {
  errors: [String]
}

type SubmitIntegrationRequest {
  errors: [String]
  integrationName: String
}

type SubmitNewIntegrationRequest {
  applicationName: String
  errors: [String]
}

type Subscription {
  deviceActiveFaultIdsReceived(orgId: ID!, deviceId: String): DeviceActiveFaultIdsReceived
  deviceAmbassadorStatusReceived(orgId: ID!, deviceId: String): DeviceAmbassadorStatusReceived
  deviceBatteryStatusReceived(orgId: ID!, deviceId: String): DeviceBatteryStatusReceived
  deviceFlightDeckStatusReceived(orgId: ID!, deviceId: String): DeviceFlightDeckStatusReceived
  deviceHyperMastFlagUpdated(deviceId: String!, name: String!, instance: Int): DeviceHyperMastFlagUpdated
  deviceLivekitStatusReceived(orgId: ID!, deviceId: String): DeviceLivekitStatusReceived
  deviceMissionStateReceived(orgId: ID!, deviceId: String): DeviceMissionStateReceived
  deviceNetworkTestSuiteResultReceived(deviceId: String!): DeviceNetworkTestSuiteResultReceived
  deviceRemoteStreamingStatusReceived(orgId: ID!, deviceId: String): DeviceRemoteStreamingStatusReceived
  deviceRunModeSwitchingReceived(orgId: ID!, deviceId: String): DeviceRunModeSwitchingReceived
  deviceSoftwareUpdateStatusReceived(orgId: ID!, deviceId: String): DeviceSoftwareUpdateStatusReceived
  deviceUploadStatusReceived(orgId: ID!, deviceId: String): DeviceUploadStatusReceived
  deviceWebTunnelConnectionInfoChanged(deviceId: String!): DeviceWebTunnelConnectionInfoChanged
  dockAdsbTrafficUpdated(orgId: ID!, dockId: String): DockAdsbTrafficUpdated
  dockConnectivityStatsReceived(orgId: ID!): DockConnectivityStatsReceived
  dockIotStatusReceived(orgId: ID!): DockIOTStatusReceived
  dockIsOnlineChanged(orgId: ID!): DockIsOnlineChanged
  dockWeatherStationDataUpdated(orgId: ID!, dockId: String): DockWeatherStationDataUpdated
  flightDataFileIntegrationStatusUpdated(orgId: ID!): FlightDataFileIntegrationStatusUpdated
  flightDataFilePromised(orgId: ID!): FlightDataFilePromised
  flightDataFileThumbnailGenerated(orgId: ID!): FlightDataFileThumbnailGenerated
  flightDataFileUploaded(orgId: ID!): FlightDataFileUploaded
  flightTelemetryEnabledChanged(id: ID!): FlightTelemetryEnabledChanged
  jobStatusReceived(orgId: ID!): JobStatusReceived
  mediaSyncSpeedTestResultReceived(deviceId: String!): MediaSyncSpeedTestResultReceived
  missionListUpdated(orgId: ID!): MissionListUpdated
  missionOnVehicleUpdated(vehicleId: String): MissionOnVehicleUpdated
  orgMarkersUpdated(orgId: ID!): OrgMarkersUpdated
  organizationOperationsChanged(orgUuid: UUID!): OrganizationOperationsChanged
  setOrganizationAccountIdCompleted(id: ID!): SetOrganizationAccountIdCompleted
  setOrganizationNameCompleted(id: ID!): SetOrganizationNameCompleted
  sharedLinkRevoked(sharedLinkNodeId: ID!): SharedLinkRevoked
  sharedLinkUpdated(uuid: String!): SharedLinkUpdated
  time(intervalSeconds: Int): DateTime
  userRpicStatusUpdated(userId: String!): UserRpicStatusUpdated
  vehicleConnectivityStatsReceived(orgId: ID!): VehicleConnectivityStatsReceived
  vehicleFileDownloadStatusReceived(orgId: ID!): VehicleFileDownloadStatusReceived
  vehicleIsLivestreamingChanged(orgId: ID!): VehicleIsLivestreamingChanged
  vehicleIsOnlineChanged(orgId: ID!): VehicleIsOnlineChanged
  vehicleScheduleUpdated(orgId: ID!): VehicleScheduleUpdated
}

enum SupportedProtobufTypes {
  MISSION
  MISSION_UPDATE
}

type SurfaceScanGpsHelperState {
  globalMapGpsOrigin: BodyGpsOrigin!
  gpsPolygon: [SkillsGpsWaypoint!]!
  gpsWaypoint: SkillsGpsWaypoint!
  overwriteGlobalMapGpsOriginZFromWorldTNavZ: Boolean!
}

type SurfaceScanInspectionParameters {
  focusPoint: EigenLcmVector3f!
  globalMapTColumnPositionsXy: [EigenLcmVector2d!]!
  gpsHelper: SurfaceScanGpsHelperState!
  polygonPrism: ScanPlannerPolygonPrism!
  relocalizationStrategy: SurfaceScanRelocalizationStrategyEnum!
  singleOrbitRequests: [ScanPlannerSingleOrbitRequest!]!
  structures: [StructureStructure!]!
  viewpointCandidates: [EigenLcmVector3f!]!
  viewpointFocusPoint: EigenLcmVector3f!
}

enum SurfaceScanRelocalizationStrategyEnum {
  CYLINDER
  HEIGHT_OFFSET
  LOWEST_ORBIT
  NONE
  TRANSMISSION
  TSDF
}

enum SurfaceScanScanModeEnum {
  CUSTOM
  CYLINDER
  INDOOR_CONTOUR
  INVALID
  MAP_AREA
  MAP_CONTOUR
  PILLAR_AREA
  PILLAR_CONTOUR
  PILLAR_LONG_RANGE_CONTOUR
  PILLAR_MESH
  PILLAR_PERIMETER
  RADIUS_CONTOUR
  SEMANTIC_TRANSMISSION_TOWER
  TELECOM_ORBIT
  TRANSMISSION_TOWER
}

type SurfaceScanSettingsManager {
  adjustUnreachablePhotos: Boolean!
  areaGimbalPitch: Float!
  areaOverlap: Float!
  areaScanHeight: Float!
  areaSidelap: Float!
  autofocusMode: UserCameraAutofocusModeEnum!
  autofocusRegion: UserCameraAutoRegionRequest!
  autonomousTowerAlignment: Boolean!
  avoidRedundantCoverage: Boolean!
  awbMode: UserCameraAwbModeEnum!
  ccwPerpendicularCameraHeading: Boolean!
  columnGimbalPitch: Float!
  columnIndices: [Int!]!
  columnOverlap: Float!
  columnPlanType: ScanPlannerStructureColumnTypeEnum!
  compensationMode: UserCameraCompensationModeEnum!
  contourDesiredRange: Float!
  contourLongRange: Boolean!
  contourNumPasses: Float!
  contourPassMultiplier: Float!
  contourSliceOverlapPercentage: Float!
  contourSlicePitch: Float!
  contourSliceYaw: Float!
  contourSmallGapsDistance: Float!
  contourWaypointOverlapPercentage: Float!
  contourZLookdownAngle: Float!
  crossHatchGimbalAngle: Float!
  customFlightLegDirection: Float!
  diagonalGimbalPitch: Float!
  diagonalOverlap: Float!
  distanceToSurface: Float!
  enableCrossHatch: Boolean!
  enableCustomCameraHeading: Boolean!
  enableCustomFlightLegDirection: Boolean!
  eoRecordingMode: UserCameraRecordingModeEnum!
  explorationOrbitHeight: Float!
  explorationOrbitRadius: Float!
  exposureMode: UserCameraExposureModeEnum!
  exteriorCaptureCeil: Boolean!
  exteriorCaptureFloor: Boolean!
  exteriorCaptureLateral: Boolean!
  geofenceCeilOffset: Float!
  geofenceFloorOffset: Float!
  geofenceLateralOffset: Float!
  geofenceOffsetFloorFromPolygonPrismCeiling: Boolean!
  geofenceStrictCeiling: Boolean!
  geofenceStrictFloor: Boolean!
  geofenceStrictLateral: Boolean!
  gimbalPitchDeg: Float!
  globalMaximumSpeed: Float!
  globalSupportOutsideGeofencePoints: Boolean!
  ignoreTranslationMotionBlurConstraint: Boolean!
  insulatorEnabled: Boolean!
  insulatorExecutionMode: SurfaceScanWaypointExecutionModeEnum!
  insulatorTakePhoto: Boolean!
  isLookupScan: Boolean!
  lengthTower: Float!
  lockAwbAtFirstWaypoint: Boolean!
  lookOutwards: Boolean!
  lostCommsRallyWaitTime: Float!
  lostCommsWaitTime: Float!
  maxMotionBlurPx: Int!
  minDistanceFromSurface: Float!
  nadirExecutionMode: SurfaceScanWaypointExecutionModeEnum!
  nadirFillImage: Float!
  nadirTakePhoto: Boolean!
  numColumns: Int!
  numPhotosPerOrbit: Float!
  numberPitchAngles: Int!
  orbitCounterClockwise: Boolean!
  orbitGimbalPitch: Float!
  orbitSidelap: Float!
  orbitUseHelix: Boolean!
  overlapPercentage: Float!
  overviewEnabled: Boolean!
  overviewExecutionMode: SurfaceScanWaypointExecutionModeEnum!
  overviewGimbalPitchDown: Float!
  overviewTakePhoto: Boolean!
  perimeterGimbalPitch: Float!
  perimeterMinDistanceToScanPlane: Float!
  perimeterNumHeights: Float!
  perimeterOverlap: Float!
  rollingShutterCorrection: Boolean!
  runAreaScan: Boolean!
  runColumnScan: Boolean!
  runContourCustomScan: Boolean!
  runContourXScan: Boolean!
  runContourYScan: Boolean!
  runContourZScan: Boolean!
  runDiagonalScan: Boolean!
  runManualScan: Boolean!
  runMeshScan: Boolean!
  runOrbitScan: Boolean!
  runPerimeterScan: Boolean!
  runStructureColumnInspectionScan: Boolean!
  runVertexColumnScan: Boolean!
  scanModeLcm: SurfaceScanScanModeEnum!
  scanVolumeExtendCaptureDistance: Float!
  scanVolumeInside: Boolean!
  semanticInspectionGimbalPitchDown: Float!
  semanticInspectionGimbalPitchStraight: Float!
  semanticInspectionGimbalPitchUp: Float!
  showArCoverageMesh: Boolean!
  spanEnabled: Boolean!
  spanExecutionMode: SurfaceScanWaypointExecutionModeEnum!
  spanTakePhoto: Boolean!
  specificationSelection: SurfaceScanSpecificationSelectionEnum!
  splitExplorationIsCumulative: Boolean!
  splitExplorationIsEnabled: Boolean!
  splitExplorationIsTopToBottom: Boolean!
  splitExplorationSliceHeight: Float!
  standoffDistance: Float!
  stopForPhoto: Boolean!
  takeIrPhotos: Boolean!
  takeRawPhotos: Boolean!
  terrainFollow: Boolean!
  towerBodyEnabled: Boolean!
  towerBodyExecutionMode: SurfaceScanWaypointExecutionModeEnum!
  towerBodyOverlap: Float!
  towerBodyPitch: Float!
  towerBodyTakePhoto: Boolean!
  towerDepth: Float!
  towerHeight: Float!
  towerWidth: Float!
  upAndOverHeight: Float!
  useExplorationPhase: Boolean!
  useExtremeCursor: Boolean!
  useGeofenceArea: Boolean!
  useGlobalMapFromRtk: Boolean!
  useGpsScanPose: Boolean!
  useLongRangeExplore: Boolean!
  useMeshExplore: Boolean!
  useOrbitExploration: Boolean!
  usePillarCursor: Boolean!
  usePillarCursorMarker: Boolean!
  useRealTimeTerrainDetection: Boolean!
  useSemanticAim: Boolean!
  useSemanticInspectionGimbalPitchDown: Boolean!
  useSemanticInspectionGimbalPitchStraight: Boolean!
  useSemanticInspectionGimbalPitchUp: Boolean!
  userControls: SurfaceScanUserControls!
  verticalOverlapFractionPercentage: Float!
}

type SurfaceScanSkillAction implements MissionAction {
  inspectionParameters: JSONString
  resumeScan: Boolean
  scanSkillStateId: String
  settingsKeys: [String]
  settingsManager: JSONString
  uuid: String!
}

input SurfaceScanSkillActionInput {
  inspectionParameters: JSONString!
  resumeScan: Boolean
  scanSkillStateId: String
  settingsKeys: [String]!
  settingsManager: JSONString!
  siteName: String
}

enum SurfaceScanSpecificationSelectionEnum {
  INVALID
  MAP
  PILLAR
  RADIUS
  SEMANTIC_TRANSMISSION
  TELECOM_ORBIT
  TRANSMISSION
}

type SurfaceScanUserControls {
  disableCameraSettings: Boolean!
  disableManualFocus: Boolean!
  disableTapToFocus: Boolean!
  disableUserZoomInput: Boolean!
  disableZoomSlider: Boolean!
}

enum SurfaceScanWaypointExecutionModeEnum {
  CAPTURE
  PAUSE
  SKIP
}

type TableUpdate {
  tableName: String!
  tableUuids: [ID]!
}

type TakePanorama implements MediaCapture {
  isSkippable: Boolean!
  panoramaType: SkillsPanoramaModeEnum
}

type TakePhoto implements MediaCapture {
  _: Boolean
  extraMetadata: GenericScalar
  isSkippable: Boolean!
}

input TakePhotoInput {
  _: Boolean
  extraMetadata: GenericScalar
}

type TakeoffPoint implements Node {
  created: DateTime
  dock: Dock
  headingDegrees: Float!
  id: ID!
  missionSpecs(before: String, after: String, first: Int, last: Int): MissionSpecConnection
  modified: DateTime
  organizationId: String!
  setupFlightOverride: Boolean!
  site: Site
  siteId: String!
  uuid: String!
  xMeters: Float!
  yMeters: Float!
  zMeters: Float!
}

input TakeoffPointInput {
  apriltagSet: apriltag_set
  dockId: ID
  removed: Boolean
  resetSetupDate: Boolean
  rotationDegrees: RotationDegrees
  setupFlightOverride: Boolean
  xMeters: ENUOffsetMeters
  yMeters: ENUOffsetMeters
  zMeters: ENUOffsetMeters
}

type ToggleAxonPoller {
  errors: [String]
  isEnabled: Boolean
}

enum TrafficControlInterfaceStateEnum {
  ACTIVE
  DOWN
  UNKOWN
  UP
}

type TrafficControlInterfaceStatus {
  gatewayAddress: String!
  ipAddresses: [String!]!
  name: String!
  routes: [TrafficControlRoute!]!
  state: TrafficControlInterfaceStateEnum!
  type: TrafficControlInterfaceTypeEnum!
}

enum TrafficControlInterfaceTypeEnum {
  CELLULAR
  ETHERNET
  LOOPBACK
  UNKNOWN
  USB_EXT_ETH
  USB_INT_ETH
  WIFI
}

type TrafficControlRoute {
  destination: String!
  nextHop: String!
  table: String!
}

type TrafficControlTrafficControlStatus {
  currentGateway: String!
  interfaceStatuses: [TrafficControlInterfaceStatus!]!
  utime: Float!
}

type TrajectoryActionPlannerPlanSettings {
  eoJpegQuality: Int!
  eoPhotoFormats: [UserCameraPhotoFormatEnum!]!
  globalAngularVelocityLimit: Float!
  globalMinimumWaypointVelocity: Float!
  globalVelocityLimit: Float!
  ignoreTranslationMotionBlurConstraint: Boolean!
  irPhotoFormats: [UserCameraPhotoFormatEnum!]!
  maxAllowedBlurPixels: Float!
  takeBestEffortPhotoWhenFailing: Boolean!
}

type TransferOrgData {
  complete: Boolean
  errors: [String]
  updatedRowTotal: Int
  updatedRowUuids: [TableUpdate]
}

type TransitToWaypointSettings {
  obstacleAvoidance: SkillsObstacleAvoidanceEnumEnum!
  orientation: Orientation
  recordingActive: Boolean!
  speed: Float
  taskType: WaypointTransitTaskType
}

input TransitToWaypointSettingsInput {
  obstacleAvoidance: SkillsObstacleAvoidanceEnumEnum
  orientation: OrientationInput
  recordingActive: Boolean!
  speed: Float
  taskType: WaypointTransitTaskType
}

type TransparencyDashboardSettings implements Node {
  additionalLinkTitle: String
  additionalLinkUrl: String
  created: DateTime
  dashboardLogoUrl: String
  dashboardUrl: String
  description: String
  enabled: Boolean!
  id: ID!
  modified: DateTime
  organizationId: String!
  title: String
  uuid: String!
  vanityUrlPath: String
}

scalar UUID

type UnassignUserFromMission {
  errors: [String]
  missionTemplate: MissionTemplate
  user: User
}

type UnclaimDevice {
  accessPoint: AccessPoint
  battery: Battery
  controller: Controller
  dock: Dock
  errors: [String]
  sensor: Sensor
  vehicle: Vehicle
}

type UnsupportedPosition implements Position {
  _: Boolean
  frame: SkillsFrameTypeEnum!
  zFrame: SkillsFrameTypeEnum!
}

type UpdateAccessPoint {
  accessPoint: AccessPoint
  errors: [String]
}

type UpdateAlertConfig {
  alertConfig: AlertConfigV2
  errors: [String]
}

type UpdateAnnotation {
  annotation: Annotation
  errors: [String]
}

type UpdateAnnotationCategory {
  annotationCategory: AnnotationCategory
  errors: [String]
}

type UpdateAttachment {
  attachment: Attachment
  errors: [String]
}

type UpdateBattery {
  battery: Battery
  errors: [String]
}

type UpdateCloudSimulator {
  errors: [String]
}

type UpdateController {
  controller: Controller
  errors: [String]
}

type UpdateDeviceNetworkSettings {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type UpdateDeviceSoftware {
  dock: Dock
  errors: [String]
  vehicle: Vehicle
}

type UpdateDock {
  dock: Dock
  errors: [String]
}

type UpdateGimbal {
  errors: [String]
  gimbal: Gimbal
}

type UpdateGroup {
  errors: [String]
  group: Group
}

type UpdateLivestreamEgress {
  errors: [String]
  livestreamEgress: LivestreamEgress
}

type UpdateLivestreamSettings {
  errors: [String]
  livestreamSettings: LivestreamSettings
}

type UpdateLoginType {
  errors: [String]
  loginType: LoginTypes
}

type UpdateMissionTemplate {
  errors: [String]
  missionTemplate: MissionTemplate
}

type UpdateSamlIdentityProvider {
  errors: [String]
  identityProviderConfiguration: IdentityProviderConfiguration
}

type UpdateScheduledMission {
  errors: [String]
  scheduledMission: ScheduledMission
}

type UpdateSensor {
  errors: [String]
  sensor: Sensor
}

type UpdateSharedLink {
  errors: [String]
  sharedLink: SharedLink
}

type UpdateSimulatorContainerVersion {
  errors: [String]
  simulatorContainerVersion: SimulatorContainerVersion
}

type UpdateVehicle {
  errors: [String]
  vehicle: Vehicle
}

type UpdateVehicleLicense {
  errors: [String]
  vehicleLicense: VehicleLicense
}

type UpdateWebhook {
  errors: [String]
  webhook: Webhook
}

type UpdateWifiSetting {
  errors: [String]
  wifiSetting: WifiSetting
}

type UpsertApiToken {
  apiToken: ApiToken
  errors: [String]
  secret: String
}

type UpsertApnSetting {
  apnSetting: ApnSetting
  errors: [String]
}

type UpsertAxonDevices {
  errors: [String]
  upsertedMarkers: [Marker]
}

type UpsertMarker {
  errors: [String]
  upsertedMarker: Marker
}

input UpsertMarkerInput {
  area: String
  description: String
  eventTime: String
  externalId: String
  externalSource: String
  externalUpdatedAt: String
  externalUuid: UUID
  jsonMetadata: String
  latitude: Float
  longitude: Float
  orgUuid: UUID!
  source: MarkerSource!
  title: String
  type: MarkerType!
  uuid: UUID
  version: Int
}

type UpsertMission {
  errors: [String]
  missionTemplate: MissionTemplate
}

input UpsertMissionSpecInput {
  actions: [MissionActionInput]
  autoStart: Boolean
  autonomousAbortMissionOnFailedAction: Boolean
  clearNavigationModeOverride: Boolean
  clearReturnBehavior: Boolean
  clearVideoBitrateOverride: Boolean
  disableStrobeLights: Boolean
  dockMission: Boolean
  enableFaultBasedDirectRtd: Boolean
  expectedGpsOrigin: GpsOriginInfoInput
  lostConnectionAction: SkillsLostConnectionActionEnumEnum
  navigationModeOverride: FlightDeckNavigationModeMode
  needsGlobalGraph: Boolean
  needsNcpgInitialization: Boolean
  photoIntervalSettings: PhotoIntervalSettingsInput
  postFailureAction: SkillsPostMissionActionEnumEnum
  postMissionAction: SkillsPostMissionActionEnumEnum
  recordingMode: recording_mode_t
  returnBehavior: ReturnBehaviorInput
  returnToPathOnResume: Boolean
  showSkipUi: Boolean
  takeoffPointId: ID
  videoBitrateOverride: Int
  vpsMapId: ID
}

type UpsertMissionTemplate {
  errors: [String]
  missionTemplate: MissionTemplate
}

type UpsertRemoteOpsLocation {
  errors: [String]
  remoteOpsLocation: RemoteOpsLocation
}

type UpsertResourceGroup {
  errors: [String]
  resourceGroup: ResourceGroup
}

type UpsertSite {
  errors: [String]
  site: Site
}

type UpsertStructures {
  errors: [String]
  structures: [Structure]
}

type UpsertTransparencyDashboardSettings {
  errors: [String]
  transparencyDashboardSettings: TransparencyDashboardSettings
}

type UpsertUser {
  errors: [String]
  user: User
}

type User implements Node {
  active: Boolean!
  annotations(before: String, after: String, first: Int, last: Int): AnnotationConnection
  controllerReleaseOverride: ControllerReleaseOverride
  controllers(before: String, after: String, first: Int, last: Int): ControllerConnection
  created: DateTime
  displayName: String
  email: String!
  emailStatus: String
  enabled: Boolean!
  firstName: String
  flights(flightsBeforeDate: DateTime, flightsAfterDate: DateTime, before: String, after: String, first: Int, last: Int): FlightConnection
  groups(before: String, after: String, first: Int, last: Int): GroupConnection
  id: ID!
  isSkydioEmployee: Boolean!
  lastName: String
  loginDefault: Boolean!
  loginTypes(before: String, after: String, first: Int, last: Int): LoginTypesConnection
  loginTypesOverriden: Boolean
  missionTemplates(before: String, after: String, first: Int, last: Int): MissionTemplateConnection
  modified: DateTime
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  organization: Organization
  organizationId: String
  organizationNotes: String
  organizationPermission: organizationpermission!
  relatedUsers(orgSearchFilter: String, before: String, after: String, first: Int, last: Int): RelatedUserConnection
  releaseOverrides(before: String, after: String, first: Int, last: Int): UserReleaseOverrideConnection
  resourceGroupLinks(before: String, after: String, first: Int, last: Int): UserResourceGroupLinkConnection
  rpicSessionForVehicle(rpicVehicleId: String!): UserRpicSession
  rpicStatus: UserRpicStatus
  sites(before: String, after: String, first: Int, last: Int): SiteConnection
  supportedLoginOptions: [LoginTypes]
  uuid: String!
  vehicles(before: String, after: String, first: Int, last: Int): VehicleConnection
}

enum UserCameraAntiBandingModeEnum {
  ANTI_BANDING_50HZ
  ANTI_BANDING_60HZ
  ANTI_BANDING_AUTO
  ANTI_BANDING_OFF
}

enum UserCameraAutoRegionReferenceEnum {
  DEFAULT
  NORMALIZED_PREVIEW
  NORMALIZED_SENSOR
  RAW_SENSOR
}

type UserCameraAutoRegionRequest {
  reference: UserCameraAutoRegionReferenceEnum!
  region: [Float!]!
  utime: Float!
}

enum UserCameraAutofocusModeEnum {
  AUTO
  CONTINUOUS_EDOF
  CONTINUOUS_PHOTO
  CONTINUOUS_VIDEO
  MACRO
  OFF
}

enum UserCameraAwbModeEnum {
  AWB_MODE_2300K
  AWB_MODE_2800K
  AWB_MODE_3200K
  AWB_MODE_3800K
  AWB_MODE_4300K
  AWB_MODE_4800K
  AWB_MODE_5000K
  AWB_MODE_5400K
  AWB_MODE_5600K
  AWB_MODE_5800K
  AWB_MODE_6000K
  AWB_MODE_6500K
  AWB_MODE_7500K
  AWB_MODE_AUTO
}

enum UserCameraColorModeEnum {
  COLOR_DEFAULT
  COLOR_FLAT
  COLOR_HDR10
  COLOR_HLG
  COLOR_VIBRANT
}

enum UserCameraCompensationModeEnum {
  COMP_MODE_0
  COMP_MODE_05
  COMP_MODE_10
  COMP_MODE_15
  COMP_MODE_20
  COMP_MODE_25
  COMP_MODE_30
  COMP_MODE_N05
  COMP_MODE_N10
  COMP_MODE_N15
  COMP_MODE_N20
  COMP_MODE_N25
  COMP_MODE_N30
}

input UserCameraDigitalZoomRequest {
  digitalZoom: Float
  digitalZoomRate: Float
  preferredCamera: UserCameraSensorModuleEnum
  utime: Float
  virtualCameraEquirectangular: Boolean
  zoomRequestType: UserCameraDigitalZoomRequestTypeEnum
}

enum UserCameraDigitalZoomRequestTypeEnum {
  ABSOLUTE_VALUE
  CAMERA_SWITCH
  RATE
}

enum UserCameraEncoderModeEnum {
  FORMAT_AVC
  FORMAT_DEFAULT
  FORMAT_HEVC
  FORMAT_HEVC_10BIT
}

enum UserCameraExposureModeEnum {
  EXP_MODE_120
  EXP_MODE_1920
  EXP_MODE_24
  EXP_MODE_240
  EXP_MODE_30
  EXP_MODE_3840
  EXP_MODE_48
  EXP_MODE_480
  EXP_MODE_60
  EXP_MODE_7680
  EXP_MODE_96
  EXP_MODE_960
  EXP_MODE_AUTO
}

enum UserCameraIsoModeEnum {
  ISO_MODE_100
  ISO_MODE_12800
  ISO_MODE_1600
  ISO_MODE_16000
  ISO_MODE_200
  ISO_MODE_3200
  ISO_MODE_400
  ISO_MODE_6400
  ISO_MODE_800
  ISO_MODE_9600
  ISO_MODE_AUTO
}

enum UserCameraPhotoFormatEnum {
  PHOTO_FORMAT_DEFAULT
  PHOTO_FORMAT_DNG
  PHOTO_FORMAT_JPEG
  PHOTO_FORMAT_JPEG_AND_DNG
  PHOTO_FORMAT_RAW
  PHOTO_FORMAT_RJPEG
  PHOTO_FORMAT_YUV
}

enum UserCameraPhotoIntervalModeEnum {
  DISABLED
  INTERVAL_10_SEC
  INTERVAL_15_SEC
  INTERVAL_1_SEC
  INTERVAL_20_SEC
  INTERVAL_2_SEC
  INTERVAL_30_SEC
  INTERVAL_3_SEC
  INTERVAL_5_SEC
  INTERVAL_60_SEC
  INTERVAL_7_SEC
}

enum UserCameraRecordingBitratePresetEnum {
  OPTIMIZE_FOR_QUALITY
  OPTIMIZE_FOR_SIZE
}

enum UserCameraRecordingModeEnum {
  PHOTO_24MP
  PHOTO_2K
  PHOTO_2K_HDR
  PHOTO_32MP
  PHOTO_5K
  PHOTO_DEFAULT
  PHOTO_HDR
  PHOTO_HIGH_RES
  PHOTO_NIGHT
  PHOTO_QBC_RAW
  PHOTO_WITH_VIDEO_DEFAULT
  VIDEO_1080P_120FPS
  VIDEO_1080P_24FPS
  VIDEO_1080P_30FPS
  VIDEO_1080P_30FPS_HDR
  VIDEO_1080P_60FPS
  VIDEO_1080P_60FPS_HDR
  VIDEO_1080P_DEEP_30FPS
  VIDEO_1080P_DEEP_FULL_30FPS
  VIDEO_1080P_FULL_24FPS
  VIDEO_1080P_FULL_30FPS
  VIDEO_1080P_FULL_30FPS_HDR
  VIDEO_2K_30FPS
  VIDEO_2K_60FPS
  VIDEO_2_7K_30FPS
  VIDEO_2_7K_30FPS_HDR
  VIDEO_2_7K_60FPS
  VIDEO_2_7K_60FPS_HDR
  VIDEO_4K_120FPS
  VIDEO_4K_24FPS
  VIDEO_4K_24FPS_HDR
  VIDEO_4K_30FPS
  VIDEO_4K_30FPS_HDR
  VIDEO_4K_48FPS
  VIDEO_4K_48FPS_HDR
  VIDEO_4K_60FPS
  VIDEO_4K_60FPS_HDR
  VIDEO_4K_DEEP_30FPS
  VIDEO_4K_DEEP_FULL_30FPS
  VIDEO_4K_FULL_24FPS
  VIDEO_4K_FULL_30FPS
  VIDEO_4K_FULL_30FPS_HDR
  VIDEO_4K_FULL_60FPS
  VIDEO_5K_16FPS
  VIDEO_8K_24FPS
  VIDEO_8K_30FPS
  VIDEO_DEFAULT
  VIDEO_MODE_2K_30FPS_HDR
}

enum UserCameraSensorModuleEnum {
  R3_WIDE
  R47_CINE
  R47_INFRARED
  R47_NARROW
  R47_NAV
  R47_TELE
  R47_WIDE
  UNKNOWN
  X2_NARROW
  X2_WIDE
}

type UserConnection {
  edges: [UserEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  cursor: String!
  node: User
}

enum UserLoginTypeEnum {
  AXON
  ONE_TIME_PASSWORD
  SSO
  UNKNOWN
}

type UserReleaseOverride implements Node {
  created: DateTime
  forceFullFlashpack: Boolean!
  id: ID!
  modified: DateTime
  releaseKey: String!
  userId: String!
  uuid: String!
  validUntil: DateTime
}

type UserReleaseOverrideConnection {
  edges: [UserReleaseOverrideEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserReleaseOverrideEdge {
  cursor: String!
  node: UserReleaseOverride
}

type UserResourceGroupLink implements Node {
  created: DateTime
  id: ID!
  modified: DateTime
  resourceGroupId: String!
  resourceGroupName: String
  resourceGroupPermission: resource_group_permission!
  userId: String!
  uuid: String!
}

type UserResourceGroupLinkConnection {
  edges: [UserResourceGroupLinkEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserResourceGroupLinkEdge {
  cursor: String!
  node: UserResourceGroupLink
}

type UserRpicSession {
  rpicState: IotApiRpicState! @deprecated(reason: "Related protobuf field has been deprecated")
  sessionId: String!
  sessionState: IotApiRpicUserSessionSessionState!
}

type UserRpicStatus {
  currentVehicleSession(rpicVehicleId: String!): UserRpicSession
  gps: GpsPb!
  sessions: [UserRpicSession!]!
}

type UserRpicStatusUpdated {
  user: User
}

type UuidUtilUuid {
  data: [Int!]!
}

type VPSMap implements Node {
  flights(before: String, after: String, first: Int, last: Int): FlightConnection
  globalGraphId: String!
  id: ID!
  missionSpecs(before: String, after: String, first: Int, last: Int): MissionSpecConnection
  ncpgFileId: String!
  processingStatus: VPSMapProcessingStatus!
  takeoffPoint: TakeoffPoint
  texturedMeshOrgFile: OrganizationFile
  tilesetOrgFile: OrganizationFile
  uuid: String!
}

type VPSMapConnection {
  edges: [VPSMapEdge]!
  pageInfo: PageInfo!
}

type VPSMapEdge {
  cursor: String!
  node: VPSMap
}

enum VPSMapProcessingStatus {
  BUILDING_TILESET
  COMPLETE
  OPTIMIZING_POSE_GRAPH
  RUNNING_PHOTOGRAMMETRY
  UPLOADING_FROM_VEHICLE
}

type ValidateAxonConfig {
  errors: [String]
  featureGroupings: [FeatureGrouping!]!
  success: Boolean
}

type Vehicle implements Node & Device {
  accessPoint: AccessPoint
  activeFaults: [Int!]
  alertConfigs(before: String, after: String, first: Int, last: Int): AlertConfigV2Connection
  alerts(before: String, after: String, first: Int, last: Int): AlertConfigV2Connection @deprecated(reason: "Use alertConfigs")
  ansiSerialNumberOverride: String
  assignedLicenses(before: String, after: String, first: Int, last: Int): VehicleLicenseConnection
  attachments(before: String, after: String, first: Int, last: Int): AttachmentConnection
  batteryStatus: BatteryStatus
  canTeleop: Boolean!
  cloudConfigLastUpdated: Float
  connectivityStatsUpdated: DateTime
  created: DateTime
  currentGimbalNavTransform: BodyTrans
  currentGlobalYawNav: Float
  currentHeightAboveTakeoff: Float
  currentPilot: User
  currentSpeed: Float
  customerFlightPhase: CommonFlightPhaseEnumEnum
  dataFiles(kinds: [FileKindEnum], uploadedBefore: DateTime, uploadedSince: DateTime, before: String, after: String, first: Int, last: Int): DeviceDataFileConnection
  desiredState: iot_api_VehicleIOTDesiredState!
  deviceId: String!
  deviceIsSwitchingRunMode: Boolean
  deviceNetworkTestResults: IotApiDeviceNetworkTestSuiteResult
  deviceWillReboot: Boolean
  disabled: Boolean!
  displayName: String!
  dock: Dock
  fileDownloadStatus: FileDownloadsFileDownloadStatus
  flightLogsToUpload: [String]
  flightPhase: CommonFlightPhaseEnumEnum
  flights(flightsBeforeDate: DateTime, flightsAfterDate: DateTime, orgUuid: String, includeLinkedDockFlights: Boolean, before: String, after: String, first: Int, last: Int): FlightConnection
  gimbal: Gimbal
  hasLivekitConnectionStatus: Boolean @deprecated(reason: "All vehicles should support livekit")
  hyperMastFlagGroup(name: String!, instance: Int = 0): IotApiDeviceHyperMastFlagGroup
  hyperMastFlagGroups: GenericScalar
  hyperMastFlags: HyperMastFlagsHelper
  iccid: String
  id: ID!
  imei: String
  iotStatus(lastKnown: Boolean = false): VehicleIOTStatus
  isIotDevice: Boolean
  isOnLte: Boolean
  isOnline: Boolean
  isOnlineMobile: Boolean
  isSimulator: Boolean!
  linkedAccessPointSerial: String
  linkedDockId: String
  livekitConnectionStatus: RemoteStreamingLivekitConnectionStatus
  livestreamSharedLink: SharedLink
  location(lastKnown: Boolean = false): Location
  mediaSyncSpeedTestResult: MediaSyncSpeedTestResult
  missionOnVehicleJson: GenericScalar
  missionState: MissionState
  modified: DateTime
  name: String
  networkIpSettings: NetworkManagerNetworkIpSettings
  nextScheduledMission: NextScheduledMission
  nextScheduledMissionOnDevice: SchedulesNextScheduledMission
  notes: String
  operations(before: String, after: String, first: Int, last: Int): OperationConnection
  organization: Organization
  organizationId: String
  overrides: Overrides
  overridesList(returnInheritedOverrides: Boolean = false): [Override]!
  pendingReleaseUpdate: ReleaseUpdate
  qcaStats: QcaStats
  recentFileDownloadRequests: [String]
  release: Release
  releaseOverride: DeviceReleaseOverride
  releaseUuid: String
  remoteIdExempt: Boolean!
  remoteStreaming(isPilot: Boolean = false): RemoteStreamingType
  runModeName: String
  scheduledMissions(before: String, after: String, first: Int, last: Int): ScheduledMissionConnection
  scheduledMissionsDisabled: Boolean!
  skillKey: String
  skydioSerial: String
  softwareUpdateStatus: FlightDeckSoftwareUpdateStatus
  softwareUpdateStatusToRelease: Release
  streams: [DeviceStream!]!
  supportsSiteMissions: Boolean
  teleopEnabled: Boolean!
  teleoperationStatus: cloud_api_IOTVehicle @deprecated(reason: "teleoperation status pulls from kinesis state, which is deprecated and no longer set.")
  trafficControlStatus: TrafficControlTrafficControlStatus
  uploadStatus: AutomaticFileUploadFileUploadStatus
  userCanTeleop: Boolean
  userEmails: [String]
  users: [RelatedUser]
  uuid: String!
  vehicleCustomerName: String
  vehicleId: String!
  vehicleType: vehicletype!
  webTunnelConnectionInfo: cloud_api_WebTunnelConnectionInfo
  webTunnelUptimeSeconds: Float
  wifiStatus: WifiStatus
}

type VehicleConnection {
  edges: [VehicleEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VehicleConnectivityStatsReceived {
  vehicle: Vehicle
}

type VehicleEdge {
  cursor: String!
  node: Vehicle
}

type VehicleFileDownloadStatusReceived {
  vehicle: Vehicle
}

type VehicleFrequency {
  id: String
  label: String
  value: Int
}

type VehicleIOTStatus {
  ambassadorStatus: VehicleStatus!
  batteryPrediction: BatteryPrediction!
  bootId: String!
  fileUploadStatus: AutomaticFileUploadFileUploadStatus!
  flightDeckStatus: FlightDeckStatus!
  gimbalNavTransform: GimbalGimbalNavTransform!
  hasLivekitConnectionStatus: Boolean
  livekitConnectionStatus: RemoteStreamingLivekitConnectionStatus!
  missionState: MissionState!
  pendingReleaseUpdate: ReleaseFile!
  trafficControlStatus: TrafficControlTrafficControlStatus!
}

type VehicleIsLivestreamingChanged {
  vehicle: Vehicle
}

type VehicleIsOnlineChanged {
  vehicle: Vehicle
}

type VehicleLicense implements Node {
  assignedVehicle: Vehicle
  assignedVehicleId: String
  created: DateTime
  displayName: String!
  expiration: DateTime!
  id: ID!
  isExpired: String
  licenseKey: String!
  licenseType: vehiclelicensetype!
  modified: DateTime
  organizationId: String!
  requireAllLicenseDisplayNames: [String]
  requireAllLicenses: [CloudApiVehicleLicenseTypeVehicleLicenseTypeEnum]
  requireOneOfLicenseDisplayNames: [String]
  requireOneOfLicenses: [CloudApiVehicleLicenseTypeVehicleLicenseTypeEnum]
  uuid: String!
  validVehicleTypes: [CloudApiVehicleTypeVehicleTypeEnum]
}

type VehicleLicenseConnection {
  edges: [VehicleLicenseEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VehicleLicenseDefinition {
  displayName: String!
  licenseType: vehiclelicensetype!
  status: LicenseStatusEnum!
}

type VehicleLicenseEdge {
  cursor: String!
  node: VehicleLicense
}

type VehicleScheduleUpdated {
  vehicle: Vehicle
}

type VehicleStatsMetadata {
  gpsHasData: Boolean
  gpsLatitude: Float
  gpsLongitude: Float
}

type VehicleStatus {
  currentPilot: User
  globalYawNav: Float!
  heightAboveTakeoff: AmbassadorHeightAboveTakeoff!
  navSourceInfo: AmbassadorNavSourceInfo!
  pilotCloudUserId: String!
  vehicleGps: AmbassadorMinimalGps!
}

type WaitTime {
  isSkippable: Boolean!
  valueSeconds: Float!
}

input WaitTimeInput {
  isSkippable: Boolean!
  valueSeconds: Float!
}

enum WaypointHeightMode {
  NAV
  NAV_HEIGHT_ABOVE_GROUND
  NAV_TAKEOFF
  SITE
  WORLD_TAKEOFF
}

enum WaypointTransitTaskType {
  GRAPH
  TRAVERSAL
}

type WeatherStationWeatherStationData {
  correctedDirection: Int!
  dewpoint: Float!
  maxGustSpeed: Float!
  pressure: Float!
  rainRate: Float!
  relativeHumidity: Int!
  sensorFault: Boolean!
  temperature: Float!
  type: WeatherStationWeatherStationType!
  utime: Float!
  windDirection: Int!
  windSpeed: Float!
}

enum WeatherStationWeatherStationType {
  G47
  METSENS500
}

type WebRTCNetworkConnectivityTool {
  livekitCredentials: CloudApiLivekitCredentialsResponse!
}

type Webhook implements Node {
  alertConfigs(before: String, after: String, first: Int, last: Int): AlertConfigV2Connection
  created: DateTime
  id: ID!
  modified: DateTime
  name: String!
  organizationId: String!
  url: String!
  uuid: String!
  webhookType: webhook_type!
}

type WebhookConnection {
  edges: [WebhookEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WebhookEdge {
  cursor: String!
  node: Webhook
}

type WebrtcBandwidthUpdateStats {
  bitrateSuggestion: Float!
  newBandwidth: Float!
  oldBandwidth: Float!
  streamHealth: Float!
}

type WebrtcChannelStats {
  bitrateActual: Float!
  bitrateEstimated: Float!
  bytesQueued: Float!
  bytesSent: Float!
  firCount: Float!
  frameDeltaMsMax: Float!
  frameDeltaMsMin: Float!
  frameProcTimeMs: Float!
  frameSendTime: Float!
  framesDiscarded: Float!
  framesQueued: Float!
  framesS: Float!
  framesSent: Float!
  lastPacket: Float!
  missingBytes: Float!
  missingFrames: Float!
  nackCount: Float!
  name: String!
  packetBufferTime: Float!
  packetsDiscarded: Float!
  packetsSent: Float!
  pliCount: Float!
  rttiMs: Float!
  samplesSent: Float!
  sliCount: Float!
  targetBitrate: Float!
  videoHeight: Float!
  videoWidth: Float!
}

type WebrtcIceCandidateStats {
  address: String!
  protocol: String!
  type: String!
  url: String!
}

type WebrtcIceServerStats {
  port: Int!
  protocol: String!
}

type WebrtcJitterBufferStats {
  holdTimeMs: Float!
  inRate: WebrtcRealtimeStatistic!
  outRate: WebrtcRealtimeStatistic!
  tickRate: WebrtcRealtimeStatistic!
}

type WebrtcLivekitClientStats {
  inBufferPerf: [WebrtcLivekitClientStatsInBufferPerfEntry!]!
  outBufferPerf: [WebrtcLivekitClientStatsOutBufferPerfEntry!]!
  publishPeer: WebrtcPeerConnectionStats!
  statusFlags: String!
  subscribePeer: WebrtcPeerConnectionStats!
}

type WebrtcLivekitClientStatsInBufferPerfEntry {
  key: String!
  value: WebrtcJitterBufferStats!
}

type WebrtcLivekitClientStatsOutBufferPerfEntry {
  key: String!
  value: WebrtcJitterBufferStats!
}

type WebrtcPeerConnectionStats {
  bandwidthInfo: WebrtcBandwidthUpdateStats!
  connectionTime: Float!
  dataChannels: [WebrtcChannelStats!]!
  iceCandidates: [String!]!
  iceServer: WebrtcIceServerStats!
  localIce: WebrtcIceCandidateStats!
  localSdp: String!
  name: String!
  recvRtpStats: [WebrtcPeerConnectionStatsRecvRtpStatsEntry!]!
  recvStreamStats: [WebrtcPeerConnectionStatsRecvStreamStatsEntry!]!
  remoteIce: WebrtcIceCandidateStats!
  remoteSdp: String!
  sendRtpStats: [WebrtcPeerConnectionStatsSendRtpStatsEntry!]!
  sendStreamStats: [WebrtcPeerConnectionStatsSendStreamStatsEntry!]!
  videoChannels: [WebrtcChannelStats!]!
}

type WebrtcPeerConnectionStatsRecvRtpStatsEntry {
  key: String!
  value: WebrtcRtpStats!
}

type WebrtcPeerConnectionStatsRecvStreamStatsEntry {
  key: String!
  value: WebrtcStreamStats!
}

type WebrtcPeerConnectionStatsSendRtpStatsEntry {
  key: String!
  value: WebrtcRtpStats!
}

type WebrtcPeerConnectionStatsSendStreamStatsEntry {
  key: String!
  value: WebrtcStreamStats!
}

type WebrtcRealtimeStatistic {
  avgInterval: Float!
  avgValue: Float!
  jitter: Float!
  missedDeadlines: Int!
}

type WebrtcRtpStats {
  firCount: Float!
  nackCount: Float!
  networkFrameDrops: Float!
  packetSendDelay: Float!
  pliCount: Float!
  rtti: Float!
  sentBytes: Float!
  sentFrames: Float!
  sliCount: Float!
  utime: Float!
}

type WebrtcStreamStats {
  avgFrameProcTimeMs: Float!
  avgIntraframeTimeMs: Float!
  avgIntratickTimeMs: Float!
  avgTickTimeMs: Float!
  bytesS: Float!
  frameSendTimeMs: Float!
  framesS: Float!
  maxFrameDelta: Float!
  minFrameDelta: Float!
  tickS: Float!
  tickTimeMs: Float!
  totalBytes: Float!
  totalFrames: Float!
}

enum WifiIpsecPolicy {
  BIDIRECTIONAL
  DISABLED
  DOWNLINK_ONLY
  UPLINK_ONLY
}

type WifiSetting implements Node {
  authType: auth_type!
  created: DateTime
  id: ID!
  modified: DateTime
  organization: Organization
  organizationId: String!
  priority: Int!
  ssid: String!
  uuid: String!
}

type WifiSettingConnection {
  edges: [WifiSettingEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WifiSettingEdge {
  cursor: String!
  node: WifiSetting
}

type WifiSkysticksPairingInfo {
  band: Int!
  bandwidth: Int!
  channel: Int!
  credentials: WifiWifiCredentials!
  isNonSkysticksPairing: Boolean!
  mode: Int!
  powerKnob: Int!
  radioType: HandhawkMainRadioTypeEnum!
  utime: Float!
  vehicleName: String!
  vehicleSerial: String!
}

type WifiStatus {
  bssid: String!
  ip: String!
  ssid: String!
}

type WifiWifiCredentials {
  bssid: String!
  desiredIpsec: WifiIpsecPolicy!
  downlinkAuthKey: String!
  downlinkEncKey: String!
  hashedPsk: Boolean!
  macAddress: String!
  networkId: String!
  password: String!
  uplinkAuthKey: String!
  uplinkEncKey: String!
  utime: Float!
}

type Zone implements Node {
  ceiling: Float!
  ceilingEnabled: Boolean!
  created: DateTime
  floor: Float!
  floorEnabled: Boolean!
  id: ID!
  keepOut: Boolean!
  modified: DateTime
  name: String
  organizationId: String!
  polygon: GeoJSON!
  site: Site!
  siteId: String!
  uuid: String!
}

type ZoneConnection {
  edges: [ZoneEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ZoneEdge {
  cursor: String!
  node: Zone
}

input ZoneInput {
  ceiling: Float
  ceilingEnabled: Boolean
  floor: Float
  floorEnabled: Boolean
  keepOut: Boolean
  name: String
  polygon: GeoJSON
  removed: Boolean
  uuid: ID
}

enum access_point_type {
  C93
  UNKNOWN
}

enum actionresulttype {
  DID_NOT_RUN
  FAILED_CANNOT_REACH_WAYPOINT
  FAILED_DISABLING_STROBES
  FAILED_ENABLING_STROBES
  FAILED_GPS_INITIALIZATION
  FAILED_PHOTO_CAPTURE
  FAILED_SWITCHING_RECORDING_MODE
  FAILED_WAYPOINT_GEOFENCE
  FAILED_WAYPOINT_REJECTED
  FAILURE
  SKIPPED
  SUCCESS
  UNKNOWN
}

enum alert_type_v2 {
  DOCK_ERROR
  FLIGHT_STATUS
  HUMAN_DETECTED
  LIVE_STREAM_STATUS_CHANGED
  MEDIA_AVAILABLE_FOR_FLIGHT
  MEDIA_AVAILABLE_FOR_SCAN
  MEDIA_FILE_AVAILABLE
  MISSION_INCOMPLETE
  ONLINE_STATUS
  SCHEDULED_MISSION_FAILED_TAKEOFF
  TELEMETRY_AVAILABLE
  UNKNOWN
  WAYPOINT_PROGRESS
}

enum annotationcategorytype {
  DEFAULT
  TRANSPARENCY_DASHBOARD
  UNKNOWN
}

enum apriltag_set {
  PROTO_SET_A
  PROTO_SET_B
  PROTO_SET_C
  PROTO_SET_D
  PROTO_SET_E
  QUAL1_SET_A
  QUAL1_SET_B
  QUAL1_SET_C
  QUAL1_SET_D
  QUAL1_SET_E
  UNKNOWN
}

enum attachmenttype {
  R47_DROPPER
  R47_GNSS
  R47_NIGHT_AUTONOMY
  R47_PARACHUTE
  R47_RTK
  R47_SPEAKERMIC
  R47_SPOTLIGHT
  UNKNOWN
}

enum auth_type {
  OPEN
  PSK
  UNKNOWN
}

enum awb_mode_t {
  AWB_MODE_2300_K
  AWB_MODE_2800_K
  AWB_MODE_3200_K
  AWB_MODE_3800_K
  AWB_MODE_4300_K
  AWB_MODE_4800_K
  AWB_MODE_5000_K
  AWB_MODE_5400_K
  AWB_MODE_5600_K
  AWB_MODE_5800_K
  AWB_MODE_6000_K
  AWB_MODE_6500_K
  AWB_MODE_7500_K
  AWB_MODE_AUTO
}

enum buckettype {
  AWS_S3
  OFFICE_LOCAL
  UNKNOWN
}

enum client_type {
  BEACON
  DOCK
  JOYSTICKS
  MISSION_CONDUCTOR
  MOBILE
  SCHEDULER
  SKYSTICKS
  UNKNOWN
  VEHICLE
  WEB
}

type cloud_api_IOTVehicle {
  webTunnelConnection: cloud_api_WebTunnelConnectionInfo!
  webTunnelState: CloudApiTeleOpState!
  webrtcCredentials: KinesisWebrtcKinesisCredentials!
  webrtcState: CloudApiTeleOpState!
}

type cloud_api_WebTunnelConnectionInfo {
  credentials: String!
  headers: [CloudApiWebTunnelConnectionInfoHeadersEntry!]!
  hostname: String!
  insecure: Boolean!
  port: Int!
  uclock: Float!
}

enum compensation_mode_t {
  COMP_MODE_0
  COMP_MODE_05
  COMP_MODE_10
  COMP_MODE_15
  COMP_MODE_20
  COMP_MODE_25
  COMP_MODE_30
  COMP_MODE_N05
  COMP_MODE_N10
  COMP_MODE_N15
  COMP_MODE_N20
  COMP_MODE_N25
  COMP_MODE_N30
}

enum controllertype {
  C18
  C78
  UNKNOWN
}

enum coordinateframetype {
  NAV_TAKEOFF
  SITE
  UNKNOWN
}

enum datalevel {
  EXTERNAL
  INTERNAL
  SECRET
  UNKNOWN
}

enum datausagerights {
  NONE_0
  NOT_ASSESSED_4
  RESTRICTED_1
  STANDARD_3
  STRONG_2
  UNKNOWN
}

enum docktype {
  DOCK
  G47
  GROUND
  PEDESTAL
  UNKNOWN
}

enum exposure_mode_t {
  EXP_MODE_120
  EXP_MODE_1920
  EXP_MODE_24
  EXP_MODE_240
  EXP_MODE_30
  EXP_MODE_3840
  EXP_MODE_48
  EXP_MODE_480
  EXP_MODE_60
  EXP_MODE_7680
  EXP_MODE_96
  EXP_MODE_960
  EXP_MODE_AUTO
}

enum fiducialtype {
  APRILTAG
  SKYDIO_LOGO
  UNKNOWN
}

enum file_deletion_policy {
  DELETE_AFTER_UPLOAD
  NO_ACTION
  UNKNOWN
}

enum fileusagereason {
  DEFAULT
  RELEASED_BY_CUSTOMER
  UNKNOWN
}

enum gimbaltype {
  AIRCOVER
  CINE
  DEFENDER
  DEFENDER_PRQ1
  DEFENDER_QUAL1
  INSPECTOR
  INSPECTOR_LITE
  INSPECTOR_LITE_QUAL3
  INSPECTOR_QUAL1
  INSPECTOR_QUAL3
  SUPERGIMBAL
  TELE_BREAKOUT
  UNKNOWN
}

type google_protobuf_Struct {
  fields: [GoogleProtobufStructFieldsEntry!]!
}

enum grouptype {
  CUSTOMER_PERMISSION
  FEATURE_FLAG
  FLASHPACK_VERSIONING
  INTERNAL_PERMISSION
  UNKNOWN
}

enum identityprovidertype {
  AXON
  OIDC
  SAML
  UNKNOWN
}

type iot_api_DockIOTDesiredState {
  bootId: String!
  connectWebrtc: Boolean!
  exposeWebTunnel: Boolean!
  uclock: Float!
}

type iot_api_VehicleIOTDesiredState {
  bootId: String!
  connectTeleop: Boolean!
  exposeWebTunnel: Boolean!
  uclock: Float!
}

enum iso_mode_t {
  ISO_MODE_100
  ISO_MODE_12800
  ISO_MODE_1600
  ISO_MODE_16000
  ISO_MODE_200
  ISO_MODE_3200
  ISO_MODE_400
  ISO_MODE_6400
  ISO_MODE_800
  ISO_MODE_9600
  ISO_MODE_AUTO
}

enum login_type {
  AXON
  ONE_TIME_PASSWORD
  SSO
  UNKNOWN
}

enum lostconnectionaction {
  CONTINUE
  HOVER
  RETURN_TO_HOME
  UNKNOWN
  UNSPECIFIED
}

enum missionresulttype {
  ABORT_AUTONOMOUS
  ABORT_AUTONOMOUS_MISSION_CONTROL
  ABORT_FAILED_ACTIONS
  ABORT_FAR_OUTSIDE_GEOFENCE
  ABORT_LOST_CONNECTION
  ABORT_LOW_BATTERY
  ABORT_MANUAL
  ABORT_MANUAL_BUTTON_PRESSED
  ABORT_MANUAL_LAND
  ABORT_MANUAL_RTX
  ABORT_TOO_DARK
  FAILED_ACTIONS
  FAILED_POST_MISSION_ACTION
  FAILED_TAKEOFF
  FAILED_TO_LOAD_GLOBAL_GRAPH
  FAILED_TO_LOAD_NCPG
  LAND_IN_PLACE_MISSION_CONTROL
  NEED_NCPG_TO_LOAD_GLOBAL_GRAPH
  OFFLINE
  PERSISTENT_GLOBAL_GRAPH_DISABLED
  REJECT_ARGUMENTS
  SUCCESS
  UNKNOWN
  WAYPOINT_VALIDATION_FAILED
}

enum model_source_enum {
  AGISOFT_CLOUD
  AGISOFT_METASHAPE
  BENTLEY_CONTEXT_CAPTURE
  BENTLEY_CONTEXT_CAPTURE_CLOUD
  DRONE_DEPLOY
  ESRI_SITE_SCAN
  PIX4D_CLOUD
  PIX4D_MAPPER
  POLYCAM
  REALITY_CAPTURE
  REALITY_CAPTURE_CLOUD
  SKYDIO_CLOUD
  SKYDIO_DRONE
  SYNTHETIC_GROUND_TRUTH
  UNKNOWN
}

enum modelpipelinerunsteptype {
  INITIAL_POSE_GRAPH
  NCPG_PHOTO_POSE_ESTIMATION
  PHOTOGRAMMETRY_MARCHING_CUBE_MESH
  PHOTOGRAMMETRY_PHOTO_LINEARIZATION_POSE_REFINEMENT
  PHOTOGRAMMETRY_STAGE_GENERIC
  PHOTOGRAMMETRY_TEXTURED_MESH
  SURFACE_SCAN_COVERAGE_MESH
  SURFACE_SCAN_PHOTO_POSE_ESTIMATION
  TEXTURED_MESH_TILESET_3D
  UNKNOWN
}

enum modeltype {
  COVERAGE_MESH
  ORTHO_PHOTO
  POINT_CLOUD
  TEXTURED_MESH
  TEXTURED_MESH_TILESET_3D
  UNKNOWN
  UNTEXTURED_MESH
}

enum mountpoint {
  ALL
  BOTTOM
  FRAME_MOUNT
  LEFT
  NONE
  RIGHT
  TOP
}

enum navigationmode {
  AUTONOMY_OFF
  DEFAULT_NAV
  NIGHT_AUTONOMY
  TWILIGHT
  UNKNOWN
  VESSEL_MODE
}

enum organizationpermission {
  ADMIN
  MEMBER
  MODERATOR
  REMOTE_PILOT
  TESTER
  UNKNOWN
}

enum orgtier {
  BETA
  EMPLOYEE
  PROTECTED
  T1
  T2
  T3
  UNKNOWN
}

enum pipelinestepextrafiletype {
  PHOTOGRAMMETRY_STAGE_DIR
  POSE_GRAPH_TAR
  UNKNOWN
}

enum posedphotodistortionmodel {
  ATAN
  DOUBLE_SPHERE
  EQUIDISTANT_EPIPOLAR
  EQUIRECTANGULAR
  LINEAR
  POLYNOMIAL
  SPHERICAL
  UNKNOWN
}

enum posedtagfamily {
  APRILTAG_16H5
  APRILTAG_36H11
  APRILTAG_STANDARD41H12
  UNKNOWN
}

enum postmissionaction {
  DIRECT_RETURN_AND_LAND_AT_DOCK
  DIRECT_RETURN_TO_DOCK
  HAND_CARRY_DISABLE
  HOVER
  LAND_AT_DOCK
  LAND_AT_HOME
  LAND_IN_PLACE
  RETURN_TO_DOCK
  RETURN_TO_HOME
  RETURN_TO_START
  UNKNOWN
  UNSPECIFIED
}

enum recording_mode_t {
  PHOTO_24_MP
  PHOTO_2_K
  PHOTO_2_K_HDR
  PHOTO_32_MP
  PHOTO_5_K
  PHOTO_DEFAULT
  PHOTO_HDR
  PHOTO_HIGH_RES
  PHOTO_NIGHT
  PHOTO_QBC_RAW
  PHOTO_WITH_VIDEO_DEFAULT
  VIDEO_1080_P_120_FPS
  VIDEO_1080_P_24_FPS
  VIDEO_1080_P_30_FPS
  VIDEO_1080_P_30_FPS_HDR
  VIDEO_1080_P_60_FPS
  VIDEO_1080_P_60_FPS_HDR
  VIDEO_1080_P_DEEP_30_FPS
  VIDEO_1080_P_DEEP_FULL_30_FPS
  VIDEO_1080_P_FULL_24_FPS
  VIDEO_1080_P_FULL_30_FPS
  VIDEO_1080_P_FULL_30_FPS_HDR
  VIDEO_2_7_K_30_FPS
  VIDEO_2_7_K_30_FPS_HDR
  VIDEO_2_7_K_60_FPS
  VIDEO_2_7_K_60_FPS_HDR
  VIDEO_2_K_30_FPS
  VIDEO_2_K_60_FPS
  VIDEO_4_K_120_FPS
  VIDEO_4_K_24_FPS
  VIDEO_4_K_24_FPS_HDR
  VIDEO_4_K_30_FPS
  VIDEO_4_K_30_FPS_HDR
  VIDEO_4_K_48_FPS
  VIDEO_4_K_48_FPS_HDR
  VIDEO_4_K_60_FPS
  VIDEO_4_K_60_FPS_HDR
  VIDEO_4_K_DEEP_30_FPS
  VIDEO_4_K_DEEP_FULL_30_FPS
  VIDEO_4_K_FULL_24_FPS
  VIDEO_4_K_FULL_30_FPS
  VIDEO_4_K_FULL_30_FPS_HDR
  VIDEO_4_K_FULL_60_FPS
  VIDEO_5_K_16_FPS
  VIDEO_8_K_24_FPS
  VIDEO_8_K_30_FPS
  VIDEO_DEFAULT
  VIDEO_MODE_2_K_30_FPS_HDR
}

enum region {
  SKYDIO_AP_0
  SKYDIO_US_0
  UNKNOWN
}

enum releasefilessignature {
  LOCKED
  RESTRICTED
  UNKNOWN
}

enum resource_group_permission {
  ADMIN
  MEMBER
  MODERATOR
  REMOTE_PILOT
  TESTER
  UNKNOWN
}

enum sensortype {
  ADS_B
  UNKNOWN
  WEATHER
}

enum signingkeyalgorithm {
  RS256
  UNKNOWN
}

enum signingkeyusage {
  UNKNOWN
  USER_JWT
}

enum site_positioning {
  INDOOR
  OUTDOOR
  UNKNOWN
}

enum sso_credential_type {
  AXON
  UNKNOWN
}

enum target_base_type {
  DOCK
  ORGANIZATION
  SITE
  UNKNOWN
  VEHICLE
}

enum target_parent_type {
  DOCK
  ORGANIZATION
  SITE
  UNKNOWN
  VEHICLE
}

enum tokenscope {
  FULL_PERMISSION
  GET_ANNOTATIONS
  GET_BATTERIES
  GET_DOCKS
  GET_FLIGHTS
  GET_MISSIONS
  GET_STRUCTURES
  GET_USERS
  GET_VEHICLES
  UNKNOWN
  VEHICLE_CONTROL
}

enum transparencypublicationstatus {
  IN_REVIEW
  PRIVATE
  PUBLIC
  UNKNOWN
}

enum trigger_type {
  DOCK_ERROR
  FLIGHT_STATUS
  HUMAN_DETECTED
  LIVE_STREAM_STATUS_CHANGED
  MEDIA_AVAILABLE_FOR_FLIGHT
  MEDIA_AVAILABLE_FOR_SCAN
  MEDIA_FILE_AVAILABLE
  MISSION_INCOMPLETE
  ONLINE_STATUS
  SCHEDULED_MISSION_FAILED_TAKEOFF
  TELEMETRY_AVAILABLE
  UNKNOWN
  WAYPOINT_PROGRESS
}

enum ubuntusuite {
  BIONIC
  FOCAL
  TRUSTY
  UNKNOWN
  XENIAL
}

enum uconfileintegrationstatustype {
  COMPLETE
  FAILED
  IN_PROGRESS
  NOT_STARTED
  UNKNOWN
}

enum upload_priority {
  HIGH
  HIGHEST
  LOW
  LOWEST
  MEDIUM
  NO_UPLOAD
  UNKNOWN
}

enum vehiclelicensetype {
  R47_3D_SCAN
  R47_CROSSHAIR
  R47_DYNAMIC
  R47_NIGHT_AUTONOMY
  R47_SCOUT
  R47_TOWER_SCAN
  S2_3D_SCAN
  S2_AEF
  UNKNOWN
  X10D_CORE
  X10D_MAVLINK
  X10D_ONLINE
  X10_ATAK
  X10_REMOTE_FLIGHT_DECK
  X2D_3D_SCAN
  X2D_AEF
  X2D_FED_ATO_SAC_SAE
  X2D_FED_NON_ATO_SAC_SAE
  X2D_INTL_SAC_SAE
  X2E_3D_SCAN
  X2E_AEF
}

enum vehicletype {
  C18
  C36
  C93
  DOCK_G27
  DOCK_G47
  E1
  R1
  R3
  R36
  R47
  R47_ISP
  R47_XAVIER
  SIMULATOR
  UNKNOWN
}

enum webhook_type {
  ALERT
  CLOUD_EVENT
  UNKNOWN
}